<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Блог, милый блог. Новая история каждый будний день.</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>33.3%</title>
        <description>
          
          &lt;p&gt;Завтра будет 4 месяца моего блого-челенджа - год по истории каждый рабочий день. Ну что же,
готово 88 постов, ритм держу, но заколебался, конечно, 
сильно.&lt;/p&gt;

&lt;p&gt;Кстати блог еще один пример тщетности планов и ожиданий. Я ждал, что будут интересные истории
перемежаться с техническими фактами и вырастать в статьи и книги (а в комментариях проходить
интеллегентные беседы в духе настоящих вечеринок с коктейлями). Фиг там, технические штуки быстро
кончились или про них не рассказать в паре абзацев, картинки рисовать и тем более сканить - лень,
вместо буфера в 10-20 постов и 3-5 вычиток, с которых я начинал, у меня который вечер проходит
под знаком &amp;quot;#$&amp;amp;%%%, надо же запилить очередной пост&amp;quot;.&lt;/p&gt;

&lt;p&gt;Тем не менее блого-челендж - самое прекрасное, что произошло в моей профессиональной жизни за этот год.
Мысль о том, что нужно постоянно чем-то делиться, заставляет по другому смотреть на ежедневный труд,
делать чуть больше, заворачивать чуть более правильно. Из блога уже выросла статья про терраформ, за
которую иначе бы не взялся, появились новые прекрасные контакты, есть наработки для разных других
тем.&lt;/p&gt;

&lt;p&gt;Глубину каждый день не обещаю, но точно будут появлятся занимательные вещи, формат сохранится -
3-4 абзаца по 3-4 предложения, чтобы не утомлять и не утомляться.
Скорее всего буду позволять себе еще больше вольностей,
почитаю как нужно ставить запятые и вот эти смешные буковки соединять в слова 
(русский у меня второй язык - сорян за ошибки, руби - родной),
серьезные дела
стоит делать с юмором.
Вечеринка продолжается!&lt;/p&gt;

        </description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/09/ubiley/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/09/ubiley/index.html</guid>
      </item>
    
      <item>
        <title>Загрузить бокс</title>
        <description>
          
          &lt;p&gt;Последние полгода, а может и больше, занимаюсь в основном девопсом. Когда что-то не
допрограммируют, то это обычно терпимо, а когда что-то падает - это всегда громко, поэтому
хочу отладить все чтобы хорошо работало. Но в низкоуровневых
вещах ничего не понимаю (хотя могу отправить скриншот &lt;code&gt;atop&lt;/code&gt; в саппорт Селектела по запросу),
подхожу чисто со стороны дев, так как знаю как выглядит счастье разработчика. &lt;/p&gt;

&lt;p&gt;Поэтому не смейтесь, хочу сохранить в блоге три команды как можно загрузить CPU, память и диск для
проверки системы мониторинга, иначе могу потом забыть:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat /dev/urandom &amp;gt; /dev/null&lt;/code&gt; - хорошо грузит проц;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd if=/dev/zero of=bigfile bs=100M count=5&lt;/code&gt; - создает файл на полгигабайта;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby -e &amp;#39;&amp;quot;0&amp;quot;*300_000_000;sleep&amp;#39;&lt;/code&gt; - занять 300 мегабайт памяти до &lt;code&gt;^C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Некоторые вещи люблю искать в блоге, когда-то давно, еще в прошлой версии блога,
у меня был пост с настройками яркости и звука
двух моделей ноутов VAIO под убунтой после очередного обновления ядра. Линукс на ноуте
у меня до сих пор ассоциируется с проблемами со звуком или c яркостью, не знаю какая сейчас ситуация,
давно не сталкивался.&lt;/p&gt;

        </description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/08/load/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/08/load/index.html</guid>
      </item>
    
      <item>
        <title>Повседневное</title>
        <description>
          
          &lt;p&gt;Я практик и мне результат важнее правильного термина, но в принципе для любой разумной деятельности
всегда можно подобрать нужные слова, найти продукты и целые компании, которые занимаются только этим.&lt;/p&gt;

&lt;p&gt;Вот, например, если вы готовите базы для тестовых енвайроментов и разработчиков (а куда деваться,
если база не помещается на обычный компьютер), то вы вовлечены в Test Data Management, как любезно
подсказал Иван Евтухович в &lt;a href=&quot;http://evtuhovich.ru/life/2016/11/30/banya/&quot;&gt;ржевских банях&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Рейлс сайтик, который обращается к базе, выполняет OLTP-запросы, а вот если вас попросили
выгрузить активность за месяц - это уже OLAP. &lt;code&gt;cap production deploy&lt;/code&gt; - 
билет в мир Continuous Delivery, CircleCI, подключенный одним кликом к гитхабу, - это
Continuous Integration.&lt;/p&gt;

&lt;p&gt;Будни каждого IT-специалиста проходят в пафосе терминов и технологий &lt;img class=&#39;emoji&#39; title=&#39;:star2:&#39; alt=&#39;:star2:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f31f.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:yum:&#39; alt=&#39;:yum:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f60b.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;.&lt;/p&gt;

        </description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/07/procent/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/07/procent/index.html</guid>
      </item>
    
      <item>
        <title>Ансибл не гони, ансибл погоди</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ansible/main.jpg&quot; /&gt;
          &lt;p&gt;Так получилось, что у нас большинство проектов настроены с помощью ансибла 2.0 и у всех он был установлен и все работало.
Однако где-то понадобились фичи из 2.1, поставили 2.2 и старые рецепты естественно работать перестали. В принципе они
легко фиксятся, но есть два способа, как можно обойтись без исправления: один рабочий, а второй на докере &lt;img class=&#39;emoji&#39; title=&#39;:trollface:&#39; alt=&#39;:trollface:&#39; src=&#39;https://assets.github.com/images/icons/emoji/trollface.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;.&lt;/p&gt;

&lt;p&gt;С удивлением узнал (коллеги подсказали), что &lt;code&gt;brew&lt;/code&gt; умеет переключать версии:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew switch ansible 2.0.1.0
brew switch ansible 2.2.0.0_1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Белиссимо! Этим способом я пока и пользуюсь. &lt;/p&gt;

&lt;p&gt;Второй способ пока не использовал, только запустил один раз. Уже давно в голове крутится идея,
что докер же должен стать идеальным для консервации
старых версий утилит. В принципе такая команда запускается (если ssh-ключ без пароля) и работает ожидаемо:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -v&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;:/ansible -v&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh:/root/.ssh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  hypoport/ansible:2.0.2.0 ansible-playbook node.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;То есть можно положить в репо какой-нибудь sh-файл, который сделает алиасы нужных докеризированных версий утилит или еще что-нибудь
придумать. Идейно по-моему очень круто, но есть две засады. Вывод команды не цветной, пока не смотрел можно ли это как-то пофиксить.
И вторая проблема хуже, докер в маке работает медленно, рецепт, который прогоняется через brew-версию за одну минуту, в контейнере
пыхтел четыре с половиной &lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. В убунту такой проблемы насколько я знаю нет, докер унижает только любителей смузи.&lt;/p&gt;

&lt;p&gt;По факту у нас пожалуй плывут версии всего двух утилит - ansible (редко) и терраформ (чаще). Так-то особо проблемы нет, но может вы
знаете изящный способ консервировать версию утилиты на веки вечные?&lt;/p&gt;

&lt;p&gt;PS. Писал этот пост и подумал, а может вагрант?! Ммм?&lt;/p&gt;

        </description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/06/ansible/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/06/ansible/index.html</guid>
      </item>
    
      <item>
        <title>Селектел Скриптинг Солюшен</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/selectel_sol/main.jpg&quot; /&gt;
          &lt;p&gt;Просто похвастаюсь. Оценит тот, кому приходится часто управлять квотами в Селектеле вручную. У нас есть магический
руби-скрипт (а настоящия магия возникает только в руби-скриптах, написанных только в виме, как мы все прекрасно
знаем &lt;img class=&#39;emoji&#39; title=&#39;:trollface:&#39; alt=&#39;:trollface:&#39; src=&#39;https://assets.github.com/images/icons/emoji/trollface.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), который умеет управлять квотами.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Стандартное флоу 1.&lt;/strong&gt; Так, нам нужно еще 8 гигабайт оперативной памяти. Лезем в панель, оу, 26624 мегабайт уже есть, запускаем
&lt;code&gt;irb&lt;/code&gt; (или что у вас в роли калькулятора), вбиваем &lt;code&gt;26624 + 8*1024&lt;/code&gt;, ентер, копируем результат в окошечко. Повторяем для всех остальных
параметров.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Стандартное флоу 2.&lt;/strong&gt; Накручиваем квот от души, побольше-побольше, с запасом. Так как много дисков, памяти и ядер стоят
дешево, если пользоваться ими не долго. После создания всех необходимых cерверов нажимаем кнопки &amp;quot;оптимизировать квоты&amp;quot;, которая подгоняет
все параметры под реально используемые.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Магическое флоу руби-волшеников, работающих в виме.&lt;/strong&gt; Спец скрипт, которое через resell-api Селектела узнает сколько квот в каком
регионе используется сейчас, парсит tf-файлы и выдирает значения, которые вам будут нужны после &lt;code&gt;terraform apply&lt;/code&gt;, устанавливает
большие:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/selectel_sol/t.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Вообще у нас много классных штук, которыми хотелось бы поделиться с сообществом, но они довольно
узкоспециализированные, заточенные под наши задачи, поэтому я пока не знаю как. Например скриптец
из данной статьи это увесистый руби-файл на 400 строк, который умеет много всего хорошего. Но то, что
хорошо носить дома, не очень правильно надевать на прогулку или в публичное место, со скриптами
похожая история, поэтому мы пока
только присматриваемся.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/selectel_sol/1.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

        </description>
        <pubDate>Mon, 05 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/05/selectel_sol/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/05/selectel_sol/index.html</guid>
      </item>
    
      <item>
        <title>5 дисков</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/5disk/main.jpg&quot; /&gt;
          &lt;p&gt;Недавно во время переноса проекта в другой регион похоронил 5 дисков и устроил себе пару приятных ночных часов по накатыванию
серверов с нуля и восстановлению из бэкапов. Сделал это с помощью своего любимого терраформа, утилиты, как я уже много раз говорил,
крайне шустрой и опасной. Гарантирую, что вручную вы так быстро раскурочить живой проект никогда не сможете, обязательно нужно воспользоваться
для этого правильными инструментами.&lt;/p&gt;

&lt;p&gt;Так вот, плохой, плохой Хашикорп дал вредный совет как подключать опенстек-диски. Вот он, пожалуйста, &lt;a href=&quot;https://www.terraform.io/docs/providers/openstack/r/compute_instance_v2.html&quot;&gt;compute_instance_v2&lt;/a&gt;, раздел &lt;code&gt;Boot From an Existing Volume&lt;/code&gt;, зловредная опция -
&lt;code&gt;delete_on_termination = true&lt;/code&gt;. Запомните ее. Если удалить сервера (которые на самом деле пустышки,
которые можно спокойно сноcить и восстанавлить, главное прописывать IP
жестко), созданные, как рекомендуется в документации c &lt;code&gt;delete_on_termination = true&lt;/code&gt;, то диску будет тоже секир башка.&lt;/p&gt;

&lt;p&gt;Опасность этой опции мы выяснили еще во время тестировании, закрепили, что ее ни в коем случае не надо использовать, но видимо она проникла
в несколько старых серверов и сработала как надо - диски исчезли в момент. Ну чтож, зато бэкапы проверили.&lt;/p&gt;

        </description>
        <pubDate>Fri, 02 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/02/5disk/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/02/5disk/index.html</guid>
      </item>
    
      <item>
        <title>Питон и емакс</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/python/main.jpg&quot; /&gt;
          &lt;p&gt;Питон как известно это почти, как руби, только сильно хуже, а емакс - это бледная тень вима. &amp;quot;Эээ, куда
вы меня тащите и зачем бьете? Это же оценочное суждение!&amp;quot;&lt;/p&gt;

&lt;p&gt;Вообще недавно я кажется понял почему мне очень сложно выучить питон
или попробовать емакс. Они занимают в принципе, на тех задачах, что у меня есть, если
не сильно придираться, очень подобные ниши.
И получается, что я с легкостью пользовался много лет визуал студией в паралель с вимом, мне нравится
джаваскрипт и го, я поглядывал на эрланг и много другое. Даже люблю пописать скриптики на баше, но
мне никогда не приходило в голову поменять консольный руби на консольный питон. Они же умеют
все тоже самое.&lt;/p&gt;

&lt;p&gt;Тут аналогия, как если вы владеете в совершенстве британским английским выучить вторым
языком - американский английский. Гораздо же забавнее выбрать немецкий
или экзотику какую-нибудь.&lt;/p&gt;

&lt;p&gt;Итак:&lt;br&gt;
руби - да, питон - нет,&lt;br&gt;
вим - да, емакс - нет,&lt;br&gt;
gnu screen - да, tmux - нет,&lt;br&gt;
с++ - нет, java - нет (сорян, не хочу ни того, ни того &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;),&lt;br&gt;
tsung - да, jmeter, танк - нет,&lt;br&gt;
bash - да, zsh - нет.&lt;/p&gt;

&lt;p&gt;Пока у меня нет четкой дифференциации инструмента под задачи, я пользуюсь тем, который
выучил первым.&lt;/p&gt;

        </description>
        <pubDate>Thu, 01 Dec 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/12/01/python/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/12/01/python/index.html</guid>
      </item>
    
      <item>
        <title>Пальцем по стеклу</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/palec/main.jpg&quot; /&gt;
          &lt;p&gt;Очень не люблю слово &amp;quot;баг&amp;quot;. Мне кажется, что там где баг, там и глюк, и где-то рядом &amp;quot;программисты -
пид*расы&amp;quot;. &amp;quot;Дефект&amp;quot; лишено негативного смысла в моем сознании. Если стол с дефектом - не обязательно
это столяр ошибся, может грузчики уронили (у нас все работает, это админы не правильно окружение
настроили). Баги - программисты плохо кодят, дефекты - это часть процессов, приоритеты, триаж и осмысленное управление.&lt;/p&gt;

&lt;p&gt;&amp;quot;Хотелки&amp;quot; и &amp;quot;плюшки&amp;quot;. Ыыыы. Не перевариваю. По-моему это унижение всех. Если бизнес вместо
требований, подкрепленных знанием рынка, метриками, опытом и интуицией выдает &amp;quot;хотелки&amp;quot;, то пусть
делают их &amp;quot;компьютерщики&amp;quot;, они стоят друг друга.&lt;/p&gt;

&lt;p&gt;А вот написание по-русски и адаптация терминов ухо мне не режет, просто стараюсь приспособится
кому как нравится. Ну сиквел - так сиквел, а эскюель - значит эскюель.
Даже &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot;&gt;википедия говорит&lt;/a&gt;, что неважно как. Все равно как 15 лет
назад я проносил лен-гэ-тэ-ха в голове, так и произношу, другого способа правильно написать
&lt;code&gt;length&lt;/code&gt; я не знаю.&lt;/p&gt;

&lt;p&gt;Да пребудет с вами раби.&lt;/p&gt;

        </description>
        <pubDate>Wed, 30 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/30/palec/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/30/palec/index.html</guid>
      </item>
    
      <item>
        <title>Бюрократия</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/kach/main.jpg&quot; /&gt;
          &lt;p&gt;Сегодня покачаю лодку в другую сторону для разнообразия.
Вообще я всегда за такое фри, креатив и отсутствие отчетов, но однако есть секретное оружие, которое
решает все проблемы разработки и не только, это - бюрократия.
Если что-то не ладится - значит не хватает формализма.&lt;/p&gt;

&lt;p&gt;Эту силу я познал в &lt;a href=&quot;http://www.cqg.com/&quot;&gt;CQG&lt;/a&gt;, где были очень сильные и формальные процессы,
так как работа
идет с большими деньгами. Если задача была чуть более сложная, чем совсем очевидная, она всегда была
у простого разработчика одна. Максимум три. И когда задача всего одна, все равно нужно же как-то
отчитываться, что по ней сделал. Даже если было непонятно ничего, то можно было как минимум
пообщаться с постановщиком задачи, тимлидом, архитектором, человеком из матрицы компетенций, написать
несколько писем и пару документов. И чудо, если сделать это даже в самой безнадежной и сложной
проблеме, она сдвинется с места. И будет медленно двигаться.&lt;/p&gt;

&lt;p&gt;Естественно обратная сторона любого формального процесса - это стоимость. Когда разработчик
три недели пишет HLD - это довольно дорого, и компании стараются организовать дела так, чтобы
можно было &amp;quot;чик, чик и в продакшен&amp;quot;.
Баланс между формализмом и процессной свободой зависит от многих факторов и мне кажется немножко
является искусством. В продуктовой компании, конечно, формализма может быть меньше, если фича
успешная - ТЗ и вроде как не нужно, а провальная - не поможет. В разработке на заказ начинает
играть аджайл, спринты, постоянная визуализация результата.&lt;/p&gt;

&lt;p&gt;Также из формализма в легкость двигаться сложно, вон как крупным компаниям тяжело, а попасть в формализм
легко.
При любом усложнении системы, будет возрастать количество дефектов, разных непонятных ситуаций
 и естественным желанием будет внедрить регулирование: не катить по пятницам, проверять
каждую строчку кода минимум двумя специалистами и так далее. Назад уже будет сложно, если появится
много правил.
Поэтому бюрократия пускай мощное оружие и совершенное, но пользоваться им стоит аккуратно.&lt;/p&gt;

        </description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/29/kach/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/29/kach/index.html</guid>
      </item>
    
      <item>
        <title>ConcourseCI - отличная идея, подозрительная реализация</title>
        <description>
          
          &lt;p&gt;По совету коллеги изучил СoncourseCI, CI нового поколения. Идея - просто бомба, пайплайны, которые 
собираются в модных yaml-файлах (кстати у ямл-файлов второе рождение, в рейлс они помню были
очень давно, потом все захватил JSON и вот снова ямл, который на самом деле включает
в себя JSON) и позволяют делать потенциально любые операции с вашими
исходниками: релизить, версионировать, деплоить, выкладывать на S3 и все остальное, что может пригодится
для CI/CD. &lt;/p&gt;

&lt;p&gt;Но вот реализация, уж на что я спокоен ко всякому, но это, друзья, перебор. Докер контейнер, в котором
бинарь на го в 250 мегабайт, который при установки выстреливает из себя пучок других бинарей и докер
демон, который запускает докеры, в которых собираются докеры. Ну вообщем эта вся конструкция
без проблем запускается, прилично работает на тестовых примерах и
в принципе собрал пару пайплайнов, которые потенциально могли бы нам
пригодится, но психологически работать с такой системой не очень приятно. Не понятно как подлезть к
конкретному контейнеру когда что-то пойдет не так, невнятная работа с кэшированием.
Можно, конечно, все решить, если жизнь заставит,
но добровольно пока в это ввязываться не хочу.&lt;/p&gt;

&lt;p&gt;СoncourseCI, уверен, - будущее, и поиграть с ним точно стоит, освежает мышление. С внедрением
спешить не будут, подожду 
более простую реализацию или попробую еще раз попозднее.&lt;/p&gt;

        </description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/28/cc/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/28/cc/index.html</guid>
      </item>
    
  </channel>
</rss>
