<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alexey Vakhov]]></title>
  <link href="http://vakhov.me/atom.xml" rel="self"/>
  <link href="http://vakhov.me/"/>
  <updated>2012-11-20T14:02:27+04:00</updated>
  <id>http://vakhov.me/</id>
  <author>
    <name><![CDATA[Alexey Vakhov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Перегрузка операторов в руби и простая визуализация]]></title>
    <link href="http://vakhov.me/blog/2012/11/20/ruby-overload-operators/"/>
    <updated>2012-11-20T11:41:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/11/20/ruby-overload-operators</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/14-fractal/rupor.jpg"></p>

<p>Срочно в номер, срочно в номер. Ребята, оказывает в руби есть перегрузка операторов! Я работаю с руби
уже несколько лет, а перегрузка есть! И у меня возникает ощущение, что она была все это время.
Маловероятно, что ее добавили только вчера, когда я первый раз про нее узнал.</p>

<p>Сегодня я
покажу как можно облегчить реализацию простой математической визуализации фрактального типа,
используя перегрузку стандартных операторов. Кроме того расскажу
про удобные трансформации SVG, с которыми я также познакомился недавно.</p>

<!-- more -->


<p>Подготовим шаблон для генерации HTML-файла:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HTML_LAYOUT</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">HTML</span>
</span><span class='line'><span class="sh">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="sh">&lt;html&gt;</span>
</span><span class='line'><span class="sh">  &lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;</span>
</span><span class='line'><span class="sh">  &lt;style&gt;body {text-align: center;}&lt;/style&gt;</span>
</span><span class='line'><span class="sh">  &lt;body&gt;%body%&lt;/body&gt;</span>
</span><span class='line'><span class="sh">&lt;/html&gt;</span>
</span><span class='line'><span class="no">HTML</span>
</span></code></pre></td></tr></table></div></figure>


<p>В шаблон вставим SVG-картинку:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SIZE</span> <span class="o">=</span> <span class="mi">600</span><span class="o">.</span><span class="mi">0</span> <span class="c1"># размер SVG-картинки в пикселях</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Шаблон для генерации svg</span>
</span><span class='line'><span class="no">SVG_TEMPLATE</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">SVG</span>
</span><span class='line'><span class="sh">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;#{SIZE.to_i}&quot; height=&quot;#{SIZE.to_i}&quot;&gt;</span>
</span><span class='line'><span class="sh">  &lt;!--</span>
</span><span class='line'><span class="sh">    Подписи к координатным осям. Делаем здесь, так как иначе</span>
</span><span class='line'><span class="sh">    трансформации их перевернут.</span>
</span><span class='line'><span class="sh">  --&gt;</span>
</span><span class='line'><span class="sh">  &lt;text x=&quot;#{SIZE - 20}&quot; y=&quot;#{SIZE/2 + 23}&quot; font-family=&quot;Verdana&quot; font-size=&quot;16&quot; fill=&quot;black&quot;&gt;X&lt;/text&gt;</span>
</span><span class='line'><span class="sh">  &lt;text x=&quot;#{SIZE/2 - 20}&quot; y=&quot;#{20}&quot; font-family=&quot;Verdana&quot; font-size=&quot;16&quot; fill=&quot;black&quot;&gt;Y&lt;/text&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sh">  &lt;!--</span>
</span><span class='line'><span class="sh">    Транcформации приводят систему координат к привычной математической. Не нужно</span>
</span><span class='line'><span class="sh">    для отрисовки каждой точки выполнять преобразования координат (и ловить ошибки</span>
</span><span class='line'><span class="sh">    на этих преобразованиях).</span>
</span><span class='line'><span class="sh">  --&gt;</span>
</span><span class='line'><span class="sh">  &lt;g transform=&quot;translate(#{SIZE/2},#{SIZE/2})&quot;&gt;</span>
</span><span class='line'><span class="sh">    &lt;g transform=&quot;scale(-#{SIZE/3}, #{SIZE/3})&quot;&gt;</span>
</span><span class='line'><span class="sh">      &lt;g transform=&quot;rotate(180)&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        &lt;!--</span>
</span><span class='line'><span class="sh">          Координатные оси. Они уже рисуются в привычном математическом масштабе от 0 до 1.</span>
</span><span class='line'><span class="sh">        --&gt;</span>
</span><span class='line'><span class="sh">        &lt;line x1=&quot;-1.5&quot; y1=&quot;0&quot; x2=&quot;1.5&quot; y2=&quot;0&quot; style=&quot;stroke:rgb(0,0,0);stroke-width:0.005&quot; /&gt;</span>
</span><span class='line'><span class="sh">        &lt;line x1=&quot;0&quot; y1=&quot;-1.5&quot; x2=&quot;0&quot; y2=&quot;1.5&quot; style=&quot;stroke:rgb(0,0,0);stroke-width:0.005&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        &lt;!--</span>
</span><span class='line'><span class="sh">          Отметки на осях [0, 1], [0, -1], [1, 0] и [-1, 0].</span>
</span><span class='line'><span class="sh">        --&gt;</span>
</span><span class='line'><span class="sh">        &lt;circle cx=&quot;0&quot; cy=&quot;1&quot; r=&quot;0.01&quot; fill=&quot;black&quot; /&gt;</span>
</span><span class='line'><span class="sh">        &lt;circle cx=&quot;0&quot; cy=&quot;-1&quot; r=&quot;0.01&quot; fill=&quot;black&quot; /&gt;</span>
</span><span class='line'><span class="sh">        &lt;circle cx=&quot;1&quot; cy=&quot;0&quot; r=&quot;0.01&quot; fill=&quot;black&quot; /&gt;</span>
</span><span class='line'><span class="sh">        &lt;circle cx=&quot;-1&quot; cy=&quot;0&quot; r=&quot;0.01&quot; fill=&quot;black&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        &lt;!-- Сам контент --&gt;</span>
</span><span class='line'><span class="sh">        %content%</span>
</span><span class='line'><span class="sh">      &lt;/g&gt;</span>
</span><span class='line'><span class="sh">    &lt;/g&gt;</span>
</span><span class='line'><span class="sh">  &lt;/g&gt;</span>
</span><span class='line'><span class="sh">&lt;/svg&gt;</span>
</span><span class='line'><span class="no">SVG</span>
</span></code></pre></td></tr></table></div></figure>


<p>C помощью 3-х трансформаций мы подготавливаем себе привычную систему координат от -1.5 до 1.5,
в которой удобно рисовать всякие математические и вероятностные вещи.</p>

<p><img src="http://vakhov.me/images/14-fractal/1.png"></p>

<p>Далее создаем класс Vector (вот она перегрузка пошла):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Вектор</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Vector</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span><span class="n">factor</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">factor</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">factor</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">radians</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="n">x</span><span class="o">*</span><span class="no">Math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">radians</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span><span class="o">*</span><span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">radians</span><span class="p">),</span>
</span><span class='line'>      <span class="n">x</span><span class="o">*</span><span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">radians</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="no">Math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">radians</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">abs</span>
</span><span class='line'>    <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>И рисуем три красных тентакля, используя новоиспеченную векторную математику в полном объеме:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;out.html&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="no">HTML_LAYOUT</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;%body%&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="no">SVG_TEMPLATE</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;%content%&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">point</span> <span class="o">=</span> <span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">scale</span> <span class="o">=</span> <span class="no">Vector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mo">07</span><span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">150</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="n">point2</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="o">*</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">point3</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="sx">%(&lt;circle cx=&quot;</span><span class="si">#{</span><span class="n">point</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="sx">&quot; cy=&quot;</span><span class="si">#{</span><span class="n">point</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="sx">&quot; r=&quot;0.02&quot; fill=&quot;red&quot; /&gt;)</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="sx">%(&lt;circle cx=&quot;</span><span class="si">#{</span><span class="n">point2</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="sx">&quot; cy=&quot;</span><span class="si">#{</span><span class="n">point2</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="sx">&quot; r=&quot;0.02&quot; fill=&quot;red&quot; /&gt;)</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="sx">%(&lt;circle cx=&quot;</span><span class="si">#{</span><span class="n">point3</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="sx">&quot; cy=&quot;</span><span class="si">#{</span><span class="n">point3</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="sx">&quot; r=&quot;0.02&quot; fill=&quot;red&quot; /&gt;)</span>
</span><span class='line'>        <span class="n">point</span> <span class="o">+=</span> <span class="n">scale</span>                    <span class="c1"># &lt;-- Вот она перегрузка</span>
</span><span class='line'>        <span class="n">scale</span> <span class="o">=</span> <span class="p">(</span><span class="n">scale</span><span class="o">*</span><span class="mi">0</span><span class="o">.</span><span class="mi">98</span><span class="p">)</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># &lt;-- и здесь</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">out</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Красиво и просто (математические объекты - это самое красивое, что могут сделать программисты
без дизайнеров):</p>

<p><img src="http://vakhov.me/images/14-fractal/2.png"></p>

<p>Счастливой визуализации! Напоследок еще картинка, которую я нарисовал, используя данную технологию,
решая одну задачу из теории вероятности:</p>

<p><img src="http://vakhov.me/images/14-fractal/3.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Покажи свой Monkey Patch]]></title>
    <link href="http://vakhov.me/blog/2012/11/16/show-me-your-monkey-patch-file/"/>
    <updated>2012-11-16T12:55:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/11/16/show-me-your-monkey-patch-file</id>
    <content type="html"><![CDATA[<p>У меня всегда есть файл <code>config/initializers/_monkey_patching.rb</code>, в который я добавляю
необходимую низкоуровневую функциональность в рейлс и руби. Когда я плохо знал
возможности языка и фреймворка, этот файл был большой. Теперь я его регулярно
пересматриваю и по возможности переписываю код на стандартные механизмы.</p>

<p>Сегодня хочу поделиться с вами, что хранится у меня в этом файле сейчас.</p>

<!-- more -->


<h2>_ASSERT - реал-тайм проверки</h2>

<p>Когда проект разрастается программисты жертвуют компактностью и изяществом в пользу единообразия
и стандартизации. После некоторого размера (я его оцениваю примерно в 10-20 KLOC для руби-подобных
языков) один человек уже не в состоянии удержать в голове все нюансы программы одновременно.
Возникает необходимость доверять коду. Обычно это достигается с помощью написания модулей, классов,
систем с которыми можно взаимодейстовать как с черными ящиками с помощью формальных
интерфейсов.</p>

<p>Мне очень нравится идея разработки программного обеспечения, которая называется &#8220;программирования
по конкракту&#8221;. В википедии написано <a href="http://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">много слов</a> на эту тему,
я предпочитаю программированием по контракту называть такой способ разработки методов и классов,
что они обязуются правильно работать при правильных аргументах. То есть черные ящики должны быть
крепко сколочены.</p>

<p>В С++ крепкость ящиков на нижнем уровне достигается строгой типизацией, вам
нужно достаточно хорошо умаслить
компилятор, чтобы он собрал ваш код, и ассертами - положительными утверждениями,
которые бросают эксепшен если утверждение оказалось ложным.</p>

<p>Выглядит это примерно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Возвращает корень числа `x`.</span>
</span><span class='line'><span class="c1">// Note: аргумент x должен быть неотрицательным.</span>
</span><span class='line'><span class="kt">float</span> <span class="n">sqrt</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_ASSERT</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Math</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eсли мы передадим неправильный
аргумент, то программа разорвет с нами контракт и честно грохнется. По стеку гораздо легче
искать ошибку, чем если бы программа попыталась сохранить статус-кво и продолжила бы работать
с внутренними ошибками и противоречиями.</p>

<p>В руби рантайм-ошибки встречаются гораздо чаще (нет строгой типизации), частичную роль компиляции
выполняют тесты. В качестве ассерт-механизма я обычно использовал стандартные эксепшены:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">raise</span> <span class="s2">&quot;Some msg&quot;</span> <span class="k">if</span> <span class="n">something_wrong</span>
</span></code></pre></td></tr></table></div></figure>


<p>однако недавно завел формальный метод _ASSERT, который теперь использую значительно чаще.
Преимущество отдельного метода заключается в том, что не нужно каждый раз придумывать
сообщение об ошибке. Кроме того контрактные предположения становятся заметными.</p>

<p>Метод совсем простой, так как его значимость не техническая, а идеологическая:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Runtime Assert as in all other languages</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_ASSERT</span><span class="p">(</span><span class="n">condition</span><span class="p">,</span> <span class="n">msg</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">condition</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Runtime Error at </span><span class="si">#{</span><span class="nb">caller</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s1">&#39;&lt;root&gt;&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Each on steroids</h2>

<p>Бывает нужно пройтись по коллекции и особо обработать первый и последние элементы. Если коллекция
анонимная, то стандартными методами не получится отличить последний элемент от своих коллег.
Исторически я использую следующий метод:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Enumerable</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SteroidIter</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:first</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">first?</span><span class="p">;</span> <span class="n">first</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">last?</span><span class="p">;</span> <span class="n">last</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_i</span><span class="p">;</span> <span class="n">index</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Продвинутый #each_with_index с возможностью узнать является ли</span>
</span><span class='line'>  <span class="c1"># текущий элемент первым/последним в коллекции.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># ==== Example</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   [1, 2, 3, 4].each_with_index do |elem, iter|</span>
</span><span class='line'>  <span class="c1">#     if iter.first?</span>
</span><span class='line'>  <span class="c1">#       puts &quot;first&quot;</span>
</span><span class='line'>  <span class="c1">#     elsif iter.last?</span>
</span><span class='line'>  <span class="c1">#       puts &quot;last&quot;</span>
</span><span class='line'>  <span class="c1">#     else</span>
</span><span class='line'>  <span class="c1">#       puts &quot;#{iter.to_i}.#{elem}&quot;</span>
</span><span class='line'>  <span class="c1">#     end</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # =&gt;</span>
</span><span class='line'>  <span class="c1">#   #  first</span>
</span><span class='line'>  <span class="c1">#   #  1.2</span>
</span><span class='line'>  <span class="c1">#   #  2.3</span>
</span><span class='line'>  <span class="c1">#   #  last</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each_on_steroids</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">elem</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">elem</span><span class="p">,</span> <span class="no">SteroidIter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">index</span> <span class="o">==</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Дубликаты</h2>

<p>Несколько раз я сталкивался с задачей найти дублирующиеся элементы в коллекции. Задача довольно
не тривиальная и за 10 секунд я ее решить не смогу (<code>array - array.uniq</code>, который
мне всегда кажется, что должен решать эту задачу, к сожалению не работает). Поэтому родился
такой метод:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Enumerable</span>
</span><span class='line'>  <span class="c1"># Returns all duplication in current collection</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># ==== Example</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   [1, 4, 1, 3, 4, 4, 4].duplications # =&gt; [1, 4]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">duplications</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">}</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Assets Compilation Progress</h2>

<p>У нас ассеты собираются 2 минуты. Это значение находится на границе психологического комфорта,
когда еще не хочется разбираться и оптимизировать, но уже хочется потыкать программу во время
деплоя палкой, чтобы проверить не зависла ли она. Поэтому я немного расширил <code>sprockets</code>
компилятор, заставив его отчитываться после каждых 5 собранных ассетов. Наблюдать за деплоем
теперь стало гораздо занимательнее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Делает компиляцию ассетов более итеративной</span>
</span><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Sprockets</span><span class="p">)</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Sprockets</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">StaticCompiler</span>
</span><span class='line'>      <span class="n">cattr_accessor</span> <span class="ss">:processed</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">processed</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">write_asset_with_logging</span><span class="p">(</span><span class="n">asset</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">processed</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;PROCESSED ASSETS: </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">processed</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">write_asset_without_logging</span><span class="p">(</span><span class="n">asset</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">alias_method_chain</span> <span class="ss">:write_asset</span><span class="p">,</span> <span class="ss">:logging</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот такие монкей-патчи. Несколько совсем уж специфических хаков я выкинул, но все самое
интересное показал. Спасибо за внимание.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ищем Javascript-разработчика]]></title>
    <link href="http://vakhov.me/blog/2012/11/09/frontend-job/"/>
    <updated>2012-11-09T12:48:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/11/09/frontend-job</id>
    <content type="html"><![CDATA[<p>У нас открылась вакансия Javascript-разработчика.</p>

<p>Требования:</p>

<ul>
<li>Javascript (jQuery, Coffee)</li>
<li>CSS3 (SCSS), IE8+, Mobile</li>
<li>Git, знакомство с рейлс</li>
<li>Опыт работы от 2-х лет</li>
</ul>


<p>Офис находится в 5 минутах от метро Арбатская. Проект интересный.</p>

<p>Контакты:<br>
Коломоец Иван, <a href="mailto:kolomoetz@gmail.com">kolomoetz@gmail.com</a>, +7 (915) 012-03-04 <br>
Вахов Алексей, <a href="mailto:vakhov@gmail.com">vakhov@gmail.com</a>, +7 (926) 589-45-37</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 способа автоматического тестирования Javascript]]></title>
    <link href="http://vakhov.me/blog/2012/11/06/javascript-testing/"/>
    <updated>2012-11-06T13:28:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/11/06/javascript-testing</id>
    <content type="html"><![CDATA[<p>С++ я уважал за мощь и строгость, Руби обожаю за работу с строками, массивами и хэшами, но к Javascript всегда относился и продолжаю
относится холодно. Мне не нравится как осуществляется работа с <code>this</code>, смущает обилие операторов и зарезервированных
слов <code>undefined</code>, <code>null</code>, <code>Infinite</code>, <code>Nan</code>, <code>==</code>, <code>===</code>, а также я плохо ориентируются в колбеках. Кроме того, я не прочитал
ни одной книги по Javascript, что конечно же не способствует установлению приятельских отношений с этим языком.</p>

<p>Однако в ближайшие лет 5 вряд ли появится альтернатива для разработки на стороне клиента, поэтому с javascript придется работать еще
очень долго. В проекте, в котором я сейчас работаю, накопилось достаточно большое количество клиентского кода и пришла пора его тестировать
автоматически. Так как тема для меня новая, то я провел несколько эспериментов и
сегодня хочу предложить вашему вниманию 3 простых способа сделать ваш javascript более надежным.</p>

<p>Оговорюсь, что у нас простой интерфейс, однако есть сложные алгоритмические куски кода на javascript. Поэтому наши задачи идеально
подходят под классическое юнит-тестирование, про которое я буду рассказывать сегодня. Как тестировать сложный UI я
пока не знаю, так как с такой задачей еще не сталкивался.</p>

<!--more-->


<h2>Способ 1. ExecJS</h2>

<p>Предположим, что нам нужно протестировать функцию, которая удаляет все элементы массива, совпадающие с заданным:</p>

<figure class='code'><figcaption><span>app/assets/javascript/array.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Удаляет все элементы e из массива</span>
</span><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Автоматические тесты запускаются на сервере после каждого комита, поэтому желательно, что бы js-тесты встроились в этот процесс.
К счастью в любом рейлс-приложении у нас уже есть все необходимые компоненты.
Гем <a href="https://github.com/sstephenson/execjs">execjs</a>, который используется при компилиции coffee-ассетов, можно использовать
для выполнения произвольного кода на сервере.</p>

<p>Добавляем <code>execjs</code> в секцию <code>test</code>:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;execjs&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Создаем спек для тестирования:</p>

<figure class='code'><figcaption><span>spec/javascripts/array_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;array.js&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;implements Array#remove method&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Тестовые случаи</span>
</span><span class='line'>    <span class="n">spec</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">JS</span>
</span><span class='line'><span class="sh">      var r1 = [1, 2, 2, 3].remove(2)</span>
</span><span class='line'><span class="sh">      var r2 = [1, 1, 1, 1].remove(1)</span>
</span><span class='line'><span class="sh">      // ...</span>
</span><span class='line'><span class="no">    JS</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Создаем контекст</span>
</span><span class='line'>    <span class="n">src</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/assets/javascripts/array.js&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">js_context</span> <span class="o">=</span> <span class="no">ExecJS</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">src</span> <span class="o">+</span> <span class="n">spec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Проверка ожиданий</span>
</span><span class='line'>    <span class="n">js_context</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;r1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>    <span class="n">js_context</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;r2&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[]</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Запускаем спеки:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/proj/blog-2-js-testing<span class="o">(</span>1.9.3-p194<span class="o">)[</span>master<span class="o">]</span><span class="nv">$ </span>rspec
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>Finished in 0.32502 seconds
</span><span class='line'>1 example, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>Вуаля, работает! Таким образом уже можно писать простые спеки.</p>

<p>Если файл, который нужно протестировать, написан на coffee-скрипте, то его можно скомпилировать с помощью гема <code>coffee-script</code>,
который также подключен к каждому рейлс-приложению:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;execjs&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;coffee-script&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>компилируем его следующим образом:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">coffee</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/assets/javascripts/array.js&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">src</span> <span class="o">=</span> <span class="no">CoffeeScript</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">coffee</span><span class="p">)</span>
</span><span class='line'>  <span class="n">js_context</span> <span class="o">=</span> <span class="no">ExecJS</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Конечно такого рода код для работы с js-файлами лучше выделить в отдельное место, но для проверки технологии можно оставить и так.</p>

<p>У данного метода тестирования есть много недостатков, главными из которых на мой взгляд являются: смешение js- и руби-кода в одном
файле, а также возможная потеря информации на границе ruby и скрипта (<code>undefined</code>, <code>null</code>, <code>Infinite</code> все перейдут в <code>nil</code>, кроме того
можно проверить только json-совместимые результаты). Главный положительный момент - тестирование органично встраивается
в регулярный прогон тестов и не требует никаких дополнительных настроек.</p>

<h2>Способ 2. Jasmine + ExecJS</h2>

<p>Я слышал положительные отзывы о библиотеке <a href="http://pivotal.github.com/jasmine/">jasmine</a>. Синтаксис выглядит приятно и rspec-подобно.
Поэтому решил модернизировать способ 1, чтобы писать спеки на чистом js (coffee).</p>

<p>Скачиваем файлы <a href="https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/jasmine.js">jasmine.js</a> и <a href="https://github.com/pivotal/jasmine/blob/master/src/console/ConsoleReporter.js">ConsoleReporter.js</a>, помещаем их в <code>vendor/assets/javascripts</code>.</p>

<p>Создаем файл, который будет запускать js-спеки. Он выглядит немного сложно, но так всегда происходит, когда мы начинаем
решать нестандартную задачу на стыке языков.</p>

<figure class='code'><figcaption><span>spec/js_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Запустить js-спеки, используя jasmine и execjs</span>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;JS specs&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assets</span><span class="p">(</span><span class="n">js_files</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">Array</span><span class="p">(</span><span class="n">js_files</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">js_file</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">js_file</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;.coffee&#39;</span>
</span><span class='line'>        <span class="no">CoffeeScript</span><span class="o">.</span><span class="n">compile</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">js_file</span><span class="p">))</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">js_file</span><span class="p">))</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ASSETS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;vendor/assets/javascripts/jasmine.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;vendor/assets/javascripts/ConsoleReporter.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;app/assets/javascripts/array.js&#39;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;spec/javascripts/**/*_spec.js*&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">asset</span><span class="o">|</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;passed </span><span class="si">#{</span><span class="no">Pathname</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">asset</span><span class="p">)</span><span class="o">.</span><span class="n">relative_path_from</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Подкладываем переменную `exports`, которая нужна jasmine.js</span>
</span><span class='line'>      <span class="n">src</span> <span class="o">=</span> <span class="s2">&quot;var exports = {};</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Загружаем жасмин и тестируемый файл</span>
</span><span class='line'>      <span class="n">src</span> <span class="o">+=</span> <span class="n">assets</span><span class="p">(</span><span class="no">ASSETS</span> <span class="o">+</span> <span class="o">[</span><span class="n">asset</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Подключаем jasmine reporter</span>
</span><span class='line'>      <span class="n">src</span> <span class="o">+=</span> <span class="o">&lt;&lt;-</span><span class="no">JS</span>
</span><span class='line'><span class="sh">        var out = &quot;&quot;;</span>
</span><span class='line'><span class="sh">        var env = jasmine.getEnv();</span>
</span><span class='line'><span class="sh">        </span>
</span><span class='line'><span class="sh">        // Собирать вывод мы будем в переменную `out`</span>
</span><span class='line'><span class="sh">        var reporter = new jasmine.ConsoleReporter(function(msg){ out += msg; });</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        // Скажем jasmine не использовать setTimeout и все сделать в один поток</span>
</span><span class='line'><span class="sh">        env.updateInterval = null;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        // Запускаем js-cпеки</span>
</span><span class='line'><span class="sh">        env.addReporter(reporter);</span>
</span><span class='line'><span class="sh">        env.execute();</span>
</span><span class='line'><span class="no">      JS</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">js_context</span> <span class="o">=</span> <span class="no">ExecJS</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Используем assert, чтобы вывод в случае ошибки был понятнее</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="n">js_context</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;out&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">js_specs_passed</span> <span class="o">=</span> <span class="p">(</span><span class="n">out</span> <span class="o">=~</span> <span class="sr">/\d+ specs?, 0 failures/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assert</span> <span class="n">js_specs_passed</span><span class="p">,</span> <span class="n">out</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Пишем наш первый спек с помощью жасмина:</p>

<figure class='code'><figcaption><span>spec/javascripts/array_spec.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;Array&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&quot;</span><span class="err">#</span><span class="s">remove&quot;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nx">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">([])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Запускаем:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/proj/blog-2-js-testing<span class="o">(</span>1.9.3-p194<span class="o">)[</span>master<span class="o">]</span><span class="nv">$ </span>rspec
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>Finished in 0.57251 seconds
</span><span class='line'>2 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>Ура! Спеки пройдены.</p>

<p>Данный способ мне идеологически нравится гораздо больше, рассмотрим его недостатки:</p>

<ul>
<li>Не учитываются зависимости между файлами.</li>
<li>Нет возможности протестировать js, который работает с DOM.</li>
<li>Сложно находить ошибку, когда спеки падают.</li>
<li>Плохая гибкость, так как приходится указывать файлы явно.</li>
</ul>


<h2>Способ 3. ???</h2>

<p>Способ 3 я еще не придумал. Мне любопытно посмотреть на <code>jasmine-gem</code> и совместить его с <a href="http://phantomjs.org/">phantomjs</a>.
Так же интересно поиграть с <a href="https://github.com/jonleighton/poltergeist">полтергейстом</a> от Джона Лейгтона.
Я буду рад, если вы поделитесь своим опытом тестирования javascript, так как тема важная, но мне показалось, что
единого решения пока нет.</p>

<p>До новых встреч!</p>

<h3>Ссылки</h3>

<ul>
<li><a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> - execjs-гем</li>
<li><a href="https://github.com/avakhov/blog-2-js-testing">https://github.com/avakhov/blog-2-js-testing</a> - исходные кода демо приложения</li>
<li><a href="http://railscasts.com/episodes/297-running-javascript-in-ruby">http://railscasts.com/episodes/297-running-javascript-in-ruby</a> - Running JavaScript in Ruby</li>
<li><a href="http://pivotal.github.com/jasmine/">http://pivotal.github.com/jasmine/</a> - jasmine</li>
<li><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/pathname/rdoc/Pathname.html#method-i-relative_path_from">Pathname#relative_path_from</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Рекурсивные mustache-темплейты и SMTRails]]></title>
    <link href="http://vakhov.me/blog/2012/07/30/mustache-recursive-templates-smtrails/"/>
    <updated>2012-07-30T10:14:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/07/30/mustache-recursive-templates-smtrails</id>
    <content type="html"><![CDATA[<p>Последнее время я очень полюбил mustache-темплейты и использую их всегда, когда нужно отрисовать кусок HTML на сервере и потенциально
на клиенте. Причем я не хочу переходить на более продвинутый handlebars, так как мне кажется, что logicless-сущность mustache
помогает создать более изящную архитектуру, лучше спроектировать json&#8217;ы общения клиента и сервера и избежать соблазна сделать
erb-кашу из шаблонов.</p>

<!--more-->


<p>Mustache я начал использовать после прошлогоднего ролика Райана
<a href="http://railscasts.com/episodes/295-sharing-mustache-templates">Sharing Mustache Templates</a> и делал
точно по рейлскасту: подключал вручную все паршиалы, качал mustache.js и т.д. Это немного муторно, но все поменялось,
после того как <a href="https://twitter.com/leopard_me/">Алексей</a> создал прекрасный гем <a href="https://github.com/railsware/smt_rails">smt_rails</a>.
Про <code>smt_rails</code> уже писали несколько раз, смотрите например
<a href="http://vessi.github.com/blog/2012/07/13/niemnogho-o-sovmiestnykh-shablonakh/">статью Михаила Бортника</a>, поэтому повторять зачем он нужен
я не буду, лучше расскажу про mustache-паршиалы и рекурсивные шаблоны, которые в <code>smt_rails</code> очень легко использовать.</p>

<p>Допустим вы хотите отрисовать дерево комментариев, которые сверстаны с помощью вложенных списков примерно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      Comment #1
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>Comment #1.1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>Comment #1.2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>Comment #1.3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>          Comment #1.4
</span><span class='line'>          <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span>Comment #1.4.1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>Comment #1.5<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>Comment #2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>Comment #3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Данный кусок HTML можно отрисовать множеством способов, но предположим что вы еще хотите обновлять
это дерево с помощью json на клиенте. Посмотрите как легко это можно сделать с помощью mustache-паршиалов:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;smt_rails&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 0.2.3&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<div><script src='https://gist.github.com/3206500.js?file='></script>
<noscript><pre><code>&lt;div class=&quot;comments&quot;&gt;
  &lt;ul&gt;
    {{#comments}}
      {{&gt; comment}}
    {{/comments}}
  &lt;/ul&gt;
&lt;/div&gt;</code></pre></noscript></div>




<div><script src='https://gist.github.com/3206505.js?file='></script>
<noscript><pre><code>&lt;li&gt;
  {{text}}

  {{^empty}}&lt;ul&gt;{{/empty}}
    {{#children}}
      {{&gt; comment}}
    {{/children}}
  {{^empty}}&lt;/ul&gt;{{/empty}}
&lt;/li&gt;</code></pre></noscript></div>


<p>Отрисовка комментариев на сервере:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h1&gt;Comments&lt;/h1&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span>
</span><span class='line'>  <span class="n">render</span> <span class="s1">&#39;/comments&#39;</span><span class="p">,</span> <span class="n">mustache</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">comments</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">children</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>          <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.1&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.2&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.3&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.4&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">children</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>              <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.4.1&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>            <span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="n">empty</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #1.5&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">empty</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #2&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">text</span><span class="p">:</span> <span class="s1">&#39;Comment #3&#39;</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="o">[]</span><span class="p">,</span> <span class="n">empty</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Отрисовка комментариев через javascript (код полностью совпадает, только для отрисовки используется вызов
функции <code>SMT['имя шаблона']()</code> с параметрами):</p>

<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// SMT Rails</span>
</span><span class='line'><span class="c1">//= require mustache</span>
</span><span class='line'><span class="c1">//= require_tree ../../templates</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#place&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">SMT</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">](</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">comments</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.1&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.2&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.3&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.4&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.4.1&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>              <span class="nx">empty</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #1.5&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nx">empty</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #2&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Comment #3&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>При реальной работе, конечно не нужно будет писать такие жуткие куски куда, подходящий json можно подготовить с помощью
простого хелпер-метода:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">comments_to_mustache</span><span class="p">(</span><span class="n">comments</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="n">comments</span><span class="p">:</span> <span class="n">comments</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">comment</span><span class="o">|</span> <span class="n">_comment</span><span class="p">(</span><span class="n">comment</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_comment</span><span class="p">(</span><span class="n">comment</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">text</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>    <span class="n">children</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">_comment</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">empty</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Отмечу несколько тонких моментов. В серверной реализации <code>mustache (0.99.4)</code> использование пустого массива <code>children</code> обязательно, иначе
возникнет бесконечный цикл при отрисовке рекурсивного шаблона. Параметр <code>empty</code> необходим, чтобы не отрисовывать пустой список
<code>&lt;ul&gt;&lt;/ul&gt;</code> если нет вложенных комментариев. Этот параметр - обратная сторона logicless-природы mustache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[История одной запятой]]></title>
    <link href="http://vakhov.me/blog/2012/07/17/the-history-of-a-comma/"/>
    <updated>2012-07-17T07:45:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/07/17/the-history-of-a-comma</id>
    <content type="html"><![CDATA[<p>Программисты в повседневной практике часто работают с различными перечислениями. Это могут быть элементы массива,
пары ключ-значения или, например, параметры метода. Существует одна хитрость при определении таких перечислений, которую я
использую уже очень давно и сегодня хочу поделиться с вами.</p>

<!--more-->


<p>В C++ мы использовали следующую запись конструкторов:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">SomeClass</span><span class="o">::</span><span class="n">SomeClass</span><span class="p">(</span><span class="kt">int</span> <span class="n">i_value</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">i_string</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">Base</span><span class="p">(</span><span class="n">i_value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">m_value</span><span class="p">(</span><span class="n">i_value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">m_string</span><span class="p">(</span><span class="n">i_string</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">m_float</span><span class="p">()</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">m_storage</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Мы использовали явные вызовы конструкторов каждого члена класса, даже там где это можно было опустить, чтобы лучше контролировать
деятельность классов. Часто приходится жертвовать теоретическим изяществом ради достижения практических целей. Однако главное
не в этом. Обратите внимание на оформление запятых. Такая конструкция позволяет легко менять инициализаторы
местами и добавлять новые, не боясь получить синтаксическую ошибку. Это экономит немного времени и чуть-чуть нервных клетов.</p>

<p>В мире рейлс дела с перечислениями обстоят еще лучше, так как интерпретатор руби не такой строгий, как компилятор C++.
Можно объявлять массивы:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">123</span><span class="p">,</span>          <span class="c1"># &lt;-- внимание, запятая!</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>хэши:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">key</span><span class="p">:</span> <span class="ss">:value</span><span class="p">,</span>
</span><span class='line'>  <span class="n">anohter</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="c1"># &lt;-- опять запятая!  </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>и вызывать методы:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;abc&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">123</span><span class="p">,</span>          <span class="c1"># &lt;-- и снова она!</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>добавляя запятую в конце последнего члена перечисления. Возможно это синтаксически не совсем изящно, но работает
как ожидается и экономит время на длинных конструкциях.</p>

<p>В кофе-скрипт дела идут настолько замечательно, что запятых не нужно вообще:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">some_method</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">1</span>
</span><span class='line'>  <span class="mi">2</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">array = </span><span class="p">[</span>
</span><span class='line'>  <span class="mi">4</span>
</span><span class='line'>  <span class="mi">5</span>
</span><span class='line'>  <span class="mi">6</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">hash = </span><span class="p">{</span>
</span><span class='line'>  <span class="nv">a: </span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">b: </span><span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Джаваскрипт-интерпретатор в Хроме и Файерфоксе работает достойно:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">array</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">6</span><span class="p">,</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">b</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>И наконец джаваскрипт в интернет-эксплорере выдает ошибку:</p>

<p><img src="http://vakhov.me/images/13-comma/ie.png" title="Sources" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Опасная иллюзия]]></title>
    <link href="http://vakhov.me/blog/2012/07/10/death-illisuion/"/>
    <updated>2012-07-10T08:43:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/07/10/death-illisuion</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/12-illusion/ch.jpg"></p>

<p>Я часто рассказываю в своей интерпретации
историю, которую прочитал в одной из классических книг по программированию, не могу вспомнить в какой.</p>

<p>Основная идея истории заключается в том, что у любого программного обеспечения есть 3 стадии: любительская, когда что-то
работает у программиста на компьютере, профессиональная, когда программное обеспечение
можно установить и люди его будут использовать в повседневной работе, и коробочная, которую
можно устанавливать на многих компьютерах, многих людей. Трудозатраты этих 3-х версий находятся в примерном
отношении 1:10:100, где коэффициент 10 очень сильно зависит от типа проекта. Очень вероятно встретить проект в котором
данное соотношение будет 1:100:10000, но не существует проектов где бы это соотношение было 1:3:9 или еще лучше.</p>

<!--more-->


<p>В мире руби он рейлс программирования, в данной терминологии, любительская версия - это прототип, который почти работает,
профессиональная версия - это живой продакшн, коробочная версия - это гем. На примере первых двух версий я хочу вам рассказать
о самой страшной, по моему мнению, иллюзии, которая, я уверен, погубила очень много проектов. Это иллюзия приводит к главному
бичу программистов - чудовищному срыву сроков.</p>

<p><img src="http://vakhov.me/images/12-illusion/schema.png"></p>

<p>Посмотрите, что происходит в реальной жизни. Отрезок AС соответствует полному времени, необходимому для создания живого продакшена
(исправление всех дефектов, доработок, сглаживание шероховатостей и т.д.). Отрезок AB - это время создания прототипа (любительской
версии). Соотношение длин отрезков как раз соответствует отношению 1:10, которое мы обсуждали в начале рассказа. Точка L - это
состояние проекта, когда у программиста на компьютере &#8220;что-то работает&#8221;. Данная версия деплоится на бету, клиент
нажимает несколько кнопок, и у него создается впечатление что проект &#8220;почти работает&#8221;,
то есть находится как минимум в точке K. Самое страшное, что часто сам программист думает так же. В данном, простом случае, получается
ошибка оценки на порядок (кажется что проект выполнен по крайней мере на 70%, а на самом деле готовность проекта не больше 7%).</p>

<p>Типовой проект обычно проходит по следующей схеме. Программист, наслаждаясь собой и жизнью,
быстро проходит отрезок AL и даже AB, клиент радостно
потирает руки. Оставшийся отрезок BC (90% времени!) проходят в стрессе, конфликтах и постоянных срывов сроков и обещаний. У вас
возникает вопрос: &#8220;Как же избежать такой схемы и не ошибаться в своих оценках?&#8221; С удовольствием отвечаю: &#8220;Я не знаю.&#8221;</p>

<p>Данная проблема очень волнует меня, но cеребрянной пули, которая помогла
бы адекватно оценивать отрезки AB и AC не существует. Тем не менее существует набор методов, которые помогают ошибаться с оценкой не в
двадцать раз, а всего лишь в пять :-)</p>

<p><strong>Контроль времени:</strong> на все возможные &#8220;тёмные&#8221; активности уходит неприлично много времени, гораздо больше, чем кажется.
Написать письмо на три абзаца - 1 час рабочего времени, пост в блог - 3 часа рабочего времени, встреча с клиентом - 5 часов рабочего
времени, разочарование в профессии - бесценно. Когда работаешь на энтузиазме над прототипом, то тёмных активностей гораздо меньше.</p>

<p><strong>Договориться с клиентом об Agile:</strong> то есть брать оплату за фактическое время. На самом деле это полумера, так как клиент все равно
будет требовать каких то оценок и обязательств. И ему будет сложно объяснить, что 20 часов, потраченных на рефакторинг,
и 30 часов на твиттер - это для пользы дела.</p>

<p><strong>Максимальное упрощение и стандартизация кодовой базы:</strong> &#8220;Будь проще и люди потянутся к тебе&#8221; - всегда говорит мой дядя.
Усложненный, запутанный код сильно увеличивает вероятность заниженной оценки.</p>

<p><strong>Автоматизация всего, чего возможно:</strong> если, для того чтобы выкатить проект необходимо зайти на сервер, git pull, выполнить пару рейк
задач, перезапустить демона и обновить базу, то в какой-то момент вы обязательно забудете какой-нибудь шаг. Чтобы из дома открыть
ноутбук, разобраться с паролями, с ошибкой, написать письмо, туда-сюда уходит 2 часа.
Не забывайте, что в неделю у нас максимум 20-40 часов и так легко
бесполезно потратить из них 10%.</p>

<p><strong>Оптимизм:</strong> просто верить, что все будет хорошо.</p>

<p>Надеюсь данные методики, особенно последняя, помогут вам выполнять все проекты в срок и даже немножко раньше :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разные мелочи]]></title>
    <link href="http://vakhov.me/blog/2012/07/02/advices/"/>
    <updated>2012-07-02T08:20:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/07/02/advices</id>
    <content type="html"><![CDATA[<p>3 недели в блог не писал и уже тяжело снова начинать. Так однажды я 2 года спортом не позанимался и тоже лень было возвращаться.
Есть правда хорошое решение - нужно себя заставлять. И вот сегодня я хочу рассказать про разные мелочи,
с которыми столкнулся в свое время.</p>

<!-- more -->


<h2>Kernel.caller</h2>

<p>Вы будете смеятся, но раньше, чтобы вывести стек вызова методов приложения я использовал конструкцию:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">raise</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="nb">p</span> <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span> <span class="c1"># =&gt; [&quot;demo.rb:3:in `some&#39;&quot;, &quot;demo.rb:9:in `&lt;main&gt;&#39;&quot;]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">some</span>
</span></code></pre></td></tr></table></div></figure>


<p>После C++ мне казалось, что это вполне нормально (в C++ попробуйте вывести стек приложения в лог, там не побалуешь). Но это же руби,
здесь можно все, причем очень просто! Случайно в интернете обратил внимание на системный вызов <code>Kernel.caller</code>.
Напечатать цепочку вызовов можно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some</span>
</span><span class='line'>  <span class="nb">p</span> <span class="nb">caller</span> <span class="c1"># =&gt; [&quot;demo.rb:5:in `&lt;main&gt;&#39;&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">some</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Добавление ошибки валидации на :base</h2>

<p>Отображая ошибки валидации с помощью стандартного <code>object.errors.full_messages</code>, мы иногда получаем такие сообщения:
&#8220;Password Укажите пожалуйста пароль&#8221;. Чтобы быстро избавиться от обязательно названия атрибута в начале сообщения, можно добавлять
ошибки валидации следующим образом: <code>object.errros.add(:base, 'Укажите пожалуйста пароль')</code>. <code>full_message</code> не будет
добавлять название атрибута в этом случае - <a href="https://github.com/rails/rails/blob/91f8cf22647e2e102c0897e88faec049f606843f/activemodel/lib/active_model/errors.rb#L287">activemodel/lib/active_model/errors.rb#L287</a>.</p>

<h2>Rescue в одну строку</h2>

<p>Этим шаблоном я еще не воспользовался, но он интригует. Все мы используем конструкции для установки значений по умолчанию:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">some</span> <span class="o">||</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="n">presence</span> <span class="o">||</span> <span class="s2">&quot;start&quot;</span> <span class="c1"># Rails only, обрабатывает nil? и blank?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Оказывается можно так же легко установить дефалтовое значение, если метод вызывает исключение:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">another</span> <span class="k">rescue</span> <span class="s2">&quot;after exception&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Я обычно не вызываю эксепшенов в своем коде, которые где-то нужно обрабатывать. Но с внешними вызовами возможно пригодится.</p>

<h2>IndexBy</h2>

<p>Чего только не придумают руби-программисты, чтобы писать меньше кода. Недавно наткнулся на удивительный метод <a href="http://api.rubyonrails.org/classes/Enumerable.html#method-i-index_by">index_by</a> в рейлс:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Выдержка из документации:</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Convert an enumerable to a hash:</span>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="n">index_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:login</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; { &quot;nextangle&quot; =&gt; &lt;Person ...&gt;, &quot;chade-&quot; =&gt; &lt;Person ...&gt;, ...}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ассерты</h2>

<p>В С++ очень активно используются ассерты для проверки входных параметров, при выполнении каких-то подозрительных действий, для проверки
возвращаемых значений и т.д. Это является частным случаем программирования по контракту. В рейлс, для собственного спокойствия,
я тоже часто вставляю такого рода проверки. Приведу несколько типовых случаев:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 1.</span>
</span><span class='line'><span class="c1"># не обращайте внимание на цепочку if-elseif, не могу себя</span>
</span><span class='line'><span class="c1"># отучить в пользу case.</span>
</span><span class='line'><span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="ss">:some</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">mode</span> <span class="o">==</span> <span class="ss">:another</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;unreacheable: </span><span class="si">#{</span><span class="n">mode</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:key_a</span><span class="p">,</span> <span class="ss">:key_b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3.</span>
</span><span class='line'><span class="k">raise</span> <span class="s2">&quot;wrong </span><span class="si">#{</span><span class="n">state</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="sx">%w[start finish]</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Я обычно не заморачиваюсь внятными сообщения в эксепшенах, так как если ошибка и случится, то по трейсу всегда легко отследить
проблему. Данные конструкции призваны подсказывать программисту, что в коде возник какой-то случай, о
котором раньше не позаботились. Также эти конструкции легко расширяются, когда появляются новые режимы,
ключи или состояния.</p>

<p>Для первого раза думаю хватит. Рад возвращению в онлайн. Раньше мы работали над большим количеством маленьких проектов и я прежде
всего оптимизировал скорость и стандартность разработки. Сейчас у нас есть парочку средних проектов, на несколько человеко-месяцев
(мифических :-) каждый. При увеличении кодовой базы возникают проблемы другого сорта, с которыми я буду сталкиваться, осмыслять
и рассказывать вам. До новых встреч!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Правила и комфорт]]></title>
    <link href="http://vakhov.me/blog/2012/06/05/rules-and-comfort/"/>
    <updated>2012-06-05T09:36:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/06/05/rules-and-comfort</id>
    <content type="html"><![CDATA[<p>Добрый день, дорогие читатели! Я сейчас в отпуске и не в курсе последних рейлс-новостей, поэтому хочу написать пост на тему,
не связанную с программированием.</p>

<p>Однако, чтобы оправдывать тематику блога, отмечу про выход рейлс 3.2.5 из-за двух критических
уязвимостей. Я пробовал их применить на наших проектах, но у меня не получилось их сломать, хакер из меня некудышный, но Егору
Хомякову эти уязвимости нравятся. А раз он доволен - обязательно нужно обновляться, особенно если вы поддерживаете какой-нибудь
крупный проект :) Ну вот про рейлс на сегодня все.</p>

<!-- more -->


<p>Я люблю размышлять про смысл жизни и все такое, благо профессия программиста позволяет сохранять силы на размышления и обеспечивает
материально. Живя в Москве, особенно остро ощущаю насколько сильно, искусственно разогнана жизнь современных людей. Мне нравится
следующая аналогия - мне даже кажется, что я ее придумал сам.</p>

<p>Представьте какой-нибудь ограниченный ресурс, допустим комнату, в которой четыре стула,
и на них хотят отдохнуть пять людей. В первом случае люди заходят степенно, никуда не спешат, но одному человеку придется стоять.
Однако в такой благоприятной обстановке, кто-нибудь, возможно, уступит ему место или предложит сидеть по очереди. Во втором случае люди
пытаются захватить стул как можно быстрее. Математически понятно, что одному человеку все равно места не хватит. А в процессе потасовки
возможно еще один стул сломают, и уже два человека останутся без места. Уровень агрессивности и дискомфорта
будет гораздо выше, но результат такой же, даже хуже.</p>

<p>Реклама, социальное давление провоцируют нас на поведение по второму сценарию, но по-человечески гораздо симпатичнее первый вариант.
Почему же он так редко встречается? Главный недостаток данного сценария, что он очень уязвим для жуликов. Ушлый человек
из второй группы, находясь в первом варианте, будет сидеть на стуле всегда, а то и на двух, посмеивась над остальными. Думаю,
такое поведение вам прекрасно знакомо. Проще всего данную ситуацию проиллюстрировать известным
рисунком про равновесие, первый вариант конечно лучше, но он слишком неустойчивый:</p>

<p><img src="http://vakhov.me/images/11-rules/ravn.png"></p>

<p>Я мало был в других странах, но, по ощущениям, уровень комфорта и спокойствия в европейских странах выше. Мне кажется, местных жителей
силой, для их же блага, загоняют и удерживают в первом сценарии. Однажды в Дрездене мы перешли дорогу на красный цвет.
Машин не было в обе стороны настолько, насколько в принципе позволяет увидеть зрение. Вообще сложно представить более пустую дорогу.
Неприятное, скажу я вам, ощущение переходить, когда все остальные 20 или 30 человек остались ждать зеленого сигнала. Они соблюдали
правила.</p>

<p>Я фанат правил и считаю, что именно они обеспечивают весь прогресс и комфорт. В гипотетической ситуации со стульями достаточно
четырех правил и их соблюдения: не шумите, не спешите, не ломайте мебель, уступайте место. В С++ вообще 2 правила: чтите
Страуструпа и не разыименовывайте нулевые указатели.</p>

<p>В профессиональной деятельности я тоже стараюсь ответственно относится
к правилам и самоограничениям. Вначале я маньячил и работал с утра до позднего вечера, в будни и выходные. Очевидно, что человек,
который работает по 12 часов в день успевает больше, чем тот, который работает стандартные 8. Но таким образом поднимается
общая планка (и подрывается здоровье), поэтому я сейчас в выходные отдыхаю, а в будни стараюсь работать не больше, чем в офисе. К сожалению,
в этот отпуск мне не удалось отказаться от компьютера, я все равно раз в день, в два выхожу в интернет, проверяю
почту, что-то поправляю. Но это показатель, что у нас еще плохо налажена система. Надеюсь, что в следующий отпуск я буду отдыхать
как положено, по правилам.</p>

<p>Желаю вам комфортной и спокойной жизни!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100 комитов в Rails]]></title>
    <link href="http://vakhov.me/blog/2012/05/28/100-commits/"/>
    <updated>2012-05-28T16:37:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/28/100-commits</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/10-100/tort.jpg"></p>

<p>В сентябре 2011, убедив клиента, что мы работаем исключительно на последних версиях рейлс, я начал свой первый
Rails 3 проект. Дополнительная пикантность ситуации была в том, что версию 3.0 зарелизили в августе 2010, однако
мне казалось, что там не могло появиться ничего хорошего, рейлс 2.3 мне казались самодостаточными.</p>

<!-- more -->


<p>Случайно, исследуя создание нового приложения, я нашел, что метод <code>environment</code> в генераторах ставит неправильный отступ
в <code>config/appliction.rb</code>. Так я сделал свой
<a href="https://github.com/rails/rails/commit/e61d6afbab24163d37a73b25262ef73119b99a78">первый комит</a> в рейлс. Потом еще. И еще.
Ощущение причастности к большому сложному открытому проекту оказалось настолько приятным, что в феврале 2012 я добавил
в годовой план цель - достичь к концу года 100 комитов. С радостью сообщаю, что на днях я этой
<a href="http://contributors.rubyonrails.org/contributors/alexey-vakhov/commits">цели достиг</a>.
Вообще 2012 - очень ответственный год, так как непонятно сохранится ли спрос на программистов после конца света. Поэтому желательно
освободиться от всех обязательств как можно раньше, чтобы успеть сделать действительно важные дела.</p>

<p>Возвращаюсь к рейлс, хочу поделиться с вами тем, что я нашел и узнал в процессе работы. Самое главное, что цель
&#8220;N комитов&#8221; - довольно плохая. Она провоцирует на мелкие подтасовки и, выполняя ее,
слишком нервничаешь,
когда комит не принимают или игнорируют. Если гнаться просто за количеством комитов, то можно использовать много мелких хитростей,
например делать док-фиксы, комментируя каждый метод (док-фиксы проходят прямым комитом в <a href="https://github.com/lifo/docrails">lifo/docrails</a>), можно, решая одну проблему, разбивать ее на несколько частей, или найти направление, которое принесет много комитов. По мелочам, можно
забыть сделать <code>git pull --rebase</code> перед комитом опять же док-фиксов. Если вы наблюдаете за мастером, думаю, что не раз видели
подобные штуки.</p>

<p>Но у цели &#8220;N комитов&#8221; есть очень важный нюанс, который делает ее на самом деле хорошей. Не зависимо от того, исправляете ли вы
маленькую опечатку в комментарии, рефакторите метод, исправляете дефект или предлагаете новую функциональность, приходится проделывать
довольно серьезную работу. Необходимо пройтись по истории, запустить тесты, исследовать граничные случаи, провести анализ и так далее.
Вольно или невольно вы изучаете систему очень глубоко и такого рода рутина приучает к методичности. Когда я всерьез увлекся рейлс,
то долгое время вставал в 8 утра и 2-3 часа изучал код, файл за файлом. Сейчас в эти утренние часы я подключил ведение блога,
работу над персональными опен-сорс проектами, изучение новых технологий и подходов.</p>

<p><a href="https://github.com/rails/rails/commit/b4167d3f3e4d25be16e06e71afd1c64a47ca54d7">Один из моих крайних комитов, самый любимый,</a> исправляет
метод <code>Range#sum</code>. Посмотрите, пожалуйста, какую работу пришлось проделать, чтобы найти и исправить 2 ошибки в данном методе. Увидел
этот дефект совершенно случайно, я хотел написать в твиттер про этот метод, что люблю, когда люди продумывают такие нюансы, но что-то
в этом коде мне не понравилось, и я стал разбираться.</p>

<p>Поэтому цель &#8220;N комитов&#8221; вполне хорошая, и если вы сделали 10, 20, 50, 100 или 10000 :) комитов, то независимо ни от чего, это по
настоящему здорово. Вы помогли комьюнити и помогли себе, получая еще большее удовольствие от профессии. Мне кажется, что последнее
время количество русскоязычных контрибьютеров сильно возросло, и это очень хорошо. <a href="http://blog.evtuhovich.ru/">Евтухович Иван</a>
говорил, что гуру рейлс не очень охотно едут в Россию на конференции, из-за недостаточной активности нашего комьюнити. Возможно,
это не единственная причина, но все-таки. Поэтому хочу особо отметить активных русскоязычных коллег: <a href="https://github.com/lest">Сергея Нартымова</a> (Сергей возглавляет русскоязычный <a href="http://contributors.rubyonrails.org/">топ</a>), <a href="https://github.com/bogdan">Богдана Гусева</a>,
<a href="https://github.com/nashby">Василия Ермоловича</a>,
<a href="https://github.com/brainopia">Равиля Байрамгалина</a> и <a href="https://github.com/gazay">Алексея Газиева</a>. Отдельно следует упомянуть
<a href="https://github.com/rails/rails/commit/b83965785db1eec019edf1fc272b1aa393e6dc57">Егора Хомякова</a>, который получил доступ в основной
репозитарий не самым прямолинейным способом.</p>

<p>Некоторое время назад я очень сильно застрял на 80-ти комитах и более 2-х недель ни мог найти ни одной шероховатости
(кстати раскрываю рыбные места - ActionPack и ActiveSupport, но ни в коем случае не ActiveRecord. Я нашел 3 ошибки в AR, но пока не знаю
как их исправить, потому-что код там - гребанный ад, как однажды сказал <a href="https://twitter.com/#!/prepor">Андрей Руденко</a> про бандлер).
К счастью потом дело пошло лучше и я успел поразить цель перед самым отпуском, завтра поеду отдыхать от компьютеров и от рейлс.
Всем удачного программирования!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разработка стандарта кодирования]]></title>
    <link href="http://vakhov.me/blog/2012/05/24/coding-standarts/"/>
    <updated>2012-05-24T10:42:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/24/coding-standarts</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/9-face/alex.png"></p>

<p>Если вам необходимо разработать стандарт кодирования обязательно прислушайтесь к совету Герба Саттера и
Андрея Александреску. Этот совет я нашел в книге по C++, но его можно применять к любому языку программированию
и к жизни вообще:</p>

<!--more-->


<blockquote>
<p>
Скажем кратко: не мелочитесь.
</p>
<footer>
<strong>Герб Саттер, Андрей Александреску</strong>
<cite>Стандарты программирования на&nbsp;C++ (Глава 0. Что не следует стандартизировать)</cite>
</footer>
</blockquote>


<p>Чтобы стало более понятно приведу еще несколько выдержек:</p>

<blockquote>
<ul>
<li>Не следует определять конкретный размер отступа, но следует использовать отступы для подчеркивания структуры программы. Для отступа используйте то количество символов, которое вам нравится, но это количество должно быть одинаково, как минимум, в пределах файла.</li>
<li>Не определяйте конкретную длину строки, но она должна оставлять текст удобочитаемым. Используйте ту длину строки, которая вам по душе, но не злоупотребляйте ею. Исследования показали, что легче всего воспринимается текст, в строке которого находится до десяти слов.</li>
<li>Следует использовать непротиворечивые соглашения об именовании, не слишком мелочно регламентируя его.</li>
</ul>
</blockquote>


<p>По правде говоря Герб и Андрей очень сильно рискуют, говоря, что количество пробелов в отступе не важно.
Это острая тема и нужно обладать сильным духом, чтобы затронуть ее
на вечеринке с коктелями.
В C++ существует 3 фундаментальные школы: 8 пробелов &mdash; кернел си хакеры,
такой огромный отступ удерживает от вложенности больше трех, 4 пробела &mdash; классика С++, 2 пробела &mdash;
неофиты. На прошлой работе проблему размера стандартного отступа разрешили с изяществом
Александра Македонского &mdash; отступ был 3 пробела. Для крупных проектов, где большая вложенность все же
встречается &mdash; это на удивление удобно.</p>

<p>И еще одна цитата, моя любимая (жирным выделил я):</p>

<blockquote>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="c1">// Размещение фигурных скобок</span>
</span><span class="line"><span class="kt">void</span> <span class="n">using_k_and_r_style</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line"><span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">putting_each_brace_on_its_own_line</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">or_putting_each_brace_on_its_own_line_indented</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line"><span class="c1">// ...</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></tbody></table></div></figure>
<p><strong>Все профессиональные программисты могут легко читать и писать в каждом из этих стилей без каких-либо сложностей.</strong> Но следует быть последовательным. Не размещайте скобки как придется или так, что их размещение будет скрывать вложенность областей видимости, и пытайтесь следовать стилю, принятому в том или ином файле.</p>
</blockquote>


<p>Итак, не мелочитесь!</p>

<center><img src="http://vakhov.me/images/9-face/face.png"></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Создание Edge Rails приложения]]></title>
    <link href="http://vakhov.me/blog/2012/05/22/create-edge-application/"/>
    <updated>2012-05-22T09:40:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/22/create-edge-application</id>
    <content type="html"><![CDATA[<p>Если вы нашли какую-нибудь ошибку в рейлс, то нужно проверить, что ее еще не исправили в мастере.
Для этого иногда необходимо создать приложение из edge. В интернете много устаревших статей на эту тему, поэтому
сегодня расскажу, как это делаю я.</p>

<!-- more -->


<p>Простой способ, это сгенерировать пустое приложение на последней стабильной версии рейлс и в гемфайле
исправить запись с rails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># gem &#39;rails&#39;, &#39;3.2.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="s1">&#39;../rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Но обычно это не очень хорошо, так как версии библиотек, которые прописывает стабильная версия рейлс,
отличаются от тех, которые используются в мастере. Также могут измениться опции по умолчанию в различных конфигурационных
файлах. Поэтому приходится дополнительно вручную подправлять настройки.</p>

<p>Лучше создавать приложение прямо из edge. Для этого достаточно клонировать исходники рейлс к себе, запустить <code>bundle</code>, чтобы установить
необходимые гемы и вызвать <code>rails new</code> из исходников:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/rails/rails
</span><span class='line'><span class="nb">pushd </span>rails
</span><span class='line'>  bundle
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'>./rails/railties/bin/rails new demo-app --edge
</span></code></pre></td></tr></table></div></figure>


<p>Опция &#8211;edge обязательная при использовании нестабильных версий рейлс, иначе приложение создатся с еще не зарелизинными версиями
библиотек и будет не рабочим.</p>

<p>Я уже <a href="http://vakhov.me/blog/2012/04/22/rails-templates/">рассказывал</a>, как я создаю новое приложение. По аналогии я создал шаблон, для
нового edge-приложения:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">file_force</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">content</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;therubyracer&#39;</span><span class="p">,</span> <span class="n">platform</span><span class="p">:</span> <span class="ss">:ruby</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:assets</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-footnotes&#39;</span><span class="p">,</span> <span class="n">github</span><span class="p">:</span> <span class="s1">&#39;avakhov/rails-footnotes&#39;</span><span class="p">,</span> <span class="n">branch</span><span class="p">:</span> <span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:development</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:test</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;timecop&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:test</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:test</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;.rspec&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">--colour</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">ENV[&quot;RAILS_ENV&quot;] ||= &#39;test&#39;</span>
</span><span class='line'><span class="sh">require File.expand_path(&quot;../../config/environment&quot;, __FILE__)</span>
</span><span class='line'><span class="sh">require &#39;rspec/rails&#39;</span>
</span><span class='line'><span class="sh">require &#39;rspec/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">Dir[Rails.root.join(&quot;spec/support/**/*.rb&quot;)].each {|f| require f}</span>
</span><span class='line'>
</span><span class='line'><span class="sh">RSpec.configure do |config|</span>
</span><span class='line'><span class="sh">  config.before(:suite) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.strategy = :transaction</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.before(:each) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.start</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.after(:each) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.clean</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.include FactoryGirl::Syntax::Methods</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/factories.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">FactoryGirl.define do</span>
</span><span class='line'><span class="sh">  # factory :demo do</span>
</span><span class='line'><span class="sh">  #   name &#39;name&#39;</span>
</span><span class='line'><span class="sh">  # end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;app/controllers/home_controller.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">class HomeController &lt; ApplicationController</span>
</span><span class='line'><span class="sh">  def index</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;app/views/home/index.html.haml&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">%h1 Home#index</span>
</span><span class='line'><span class="sh">%p Find me in app/views/home/index.html.haml</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/controllers/home_controller_spec.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">require &#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">describe HomeController do</span>
</span><span class='line'><span class="sh">  it &quot;index&quot; do</span>
</span><span class='line'><span class="sh">    get &#39;index&#39;</span>
</span><span class='line'><span class="sh">    response.should be_success</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">head</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s1">&#39;config/routes.rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">file_force</span> <span class="s1">&#39;config/routes.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">#{head.strip}</span>
</span><span class='line'><span class="sh">  root to: &#39;home#index&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="s1">&#39;public/index.html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;bundle install&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;rake db:create db:migrate db:test:prepare&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git ci -amInitial&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Использую шаблон с помощью команды:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./rails/railties/bin/rails new demo-app --edge -m rails-templates/edge-app.rb
</span></code></pre></td></tr></table></div></figure>


<p>По умолчанию будет использоваться рейлс из гитхаба <code>gem 'rails', github: 'rails/rails'</code>, можно поменять вручную на <code>gem 'rails', path: '../rails'</code>, чтобы экспрериментировать со своими изменениями.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS-спрайты на компасе]]></title>
    <link href="http://vakhov.me/blog/2012/05/15/css-sprites/"/>
    <updated>2012-05-15T09:53:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/15/css-sprites</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/8-red/nuke2.jpg"></p>

<p>Идеалогически мне очень нравится технология css-спрайтов, когда мелкие картинки рисуются в одном файле и отображаются
с помощью свойства background-position, экономя коннекты к серверу. Спрайты напоминают мне
первую работу, где я работал с 3D-графикой и дизайнеры размазывали трехмерные модели по текстурам. А также
раньше были спрайтовые монстры. Эх.</p>

<p>Кроме оптимизации отрисовки сайта в браузере (для маленьких и средних проектов это не так уж и важно) спрайты
следует применять для кнопок с картинкой, которая меняется при наведении указатели мыши. Если :hover-состояние
кнопки сделать через отдельный рисунок, то она противно моргнет при первой отрисовке. Я слышал про библиотеку компас,
но обычно просил дизайнера или верстальщика подготовить файл с двумя состояниями. Наконец, недавно,
попробовал использовать спрайты с компасом и хочу рассказать про несколько нюансов, с которыми столкнулся.</p>

<!-- more -->


<p>Самая главная новость - технология работает! Это очень важно, так как иногда библиотеки
перестают работать
(например недавно отвалился haml в рейлс 3.2.3). В нашем случае учебник на официальном сайте актуальный:</p>

<ul>
<li><a href="http://compass-style.org/help/tutorials/spriting/">http://compass-style.org/help/tutorials/spriting/</a></li>
</ul>


<p>Я создал <a href="http://blog-1-css-sprite.herokuapp.com/">простую демку</a> на хероку, итоговый спрайт получился такой:</p>

<p><img src="http://vakhov.me/images/8-red/sprite.png" title="Sprlite" ></p>

<p>Минимальный код, необходимый для работы:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;compass-rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/assets/buttons/*</span>
</span><span class='line'><span class="c1"># Файлы кнопок (red.png и red2.png в моем случае)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/assets/stylesheets/application.css.scss</span>
</span><span class='line'><span class="vi">@import</span> <span class="s2">&quot;buttons/*.png&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">twitter</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">display</span><span class="p">:</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>  <span class="n">width</span><span class="p">:</span> <span class="mi">300</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">height</span><span class="p">:</span> <span class="mi">300</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>  <span class="vi">@include</span> <span class="n">buttons</span><span class="o">-</span><span class="n">sprite</span><span class="p">(</span><span class="n">red</span><span class="p">);</span>    <span class="c1"># red и red2 - имена соответствующих картинок</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="ss">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="vi">@include</span> <span class="n">buttons</span><span class="o">-</span><span class="n">sprite</span><span class="p">(</span><span class="n">red2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/views/home/index.html.haml</span>
</span><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s2">&quot;https://twitter.com/#!/avakhov&quot;</span><span class="p">,</span> <span class="n">class</span><span class="p">:</span> <span class="s1">&#39;twitter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь нюансы:</p>

<p>Возможно я просмотрел где это написано, но библиотека обрабатывает только png-файлы. Для итогового спрайта - это оправдано,
так как необходима картинка
без потери качества, но для исходных картинок мне кажется это излишне. К сожалению когда я попробовал импортировать jpg-файлы, система выдала
не очень информативную ошибку:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span> <span class="n">to</span> <span class="n">import</span> <span class="ow">not</span> <span class="n">found</span> <span class="ow">or</span> <span class="n">unreadable</span><span class="p">:</span> <span class="n">buttons</span><span class="o">/*.</span><span class="n">jpg</span><span class="o">.</span>
</span><span class='line'><span class="no">Load</span> <span class="n">paths</span><span class="p">:</span>
</span><span class='line'>  <span class="no">Sass</span><span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Importer</span><span class="p">(</span><span class="sr">/home/</span><span class="n">alex</span><span class="o">/</span><span class="n">m</span><span class="o">/</span><span class="n">ideas</span><span class="o">/</span><span class="n">blog</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">css</span><span class="o">-</span><span class="n">sprite</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span><span class="p">)</span>
</span><span class='line'>  <span class="sr">/home/</span><span class="n">alex</span><span class="o">/</span><span class="n">m</span><span class="o">/</span><span class="n">ideas</span><span class="o">/</span><span class="n">blog</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">css</span><span class="o">-</span><span class="n">sprite</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span>
</span><span class='line'>  <span class="sr">/home/</span><span class="n">alex</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span><span class="o">-</span><span class="n">ff</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">compass</span><span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">frameworks</span><span class="o">/</span><span class="n">blueprint</span><span class="o">/</span><span class="n">stylesheets</span>
</span><span class='line'>  <span class="sr">/home/</span><span class="n">alex</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span><span class="o">-</span><span class="n">ff</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">compass</span><span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">frameworks</span><span class="o">/</span><span class="n">compass</span><span class="o">/</span><span class="n">stylesheets</span>
</span><span class='line'>  <span class="no">Compass</span><span class="o">::</span><span class="no">SpriteImporter</span>
</span><span class='line'>  <span class="p">(</span><span class="k">in</span> <span class="sr">/home/</span><span class="n">alex</span><span class="o">/</span><span class="n">m</span><span class="o">/</span><span class="n">ideas</span><span class="o">/</span><span class="n">blog</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">css</span><span class="o">-</span><span class="n">sprite</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Также есть ограничения на имена файлов, которые можно использовать для спрайтов. Простые и понятные <code>1.png</code> и <code>2.png</code> также не подходят.
В этот раз описание ошибки было хорошее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sprite</span> <span class="n">file</span> <span class="n">names</span> <span class="n">must</span> <span class="n">be</span> <span class="n">legal</span> <span class="n">css</span> <span class="n">identifiers</span><span class="o">.</span> <span class="no">Please</span> <span class="n">rename</span> <span class="mi">1</span><span class="o">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure>


<p>С первой ошибкой я провозился довольно долго, так как не знал насколько хорошо <code>@import</code> должен вообще работать и сначала думал,
что что-то с путями. Раньше я бы сильно разозлился, но теперь понимаю, что большая часть рабочего времени программиста
проходит в режиме &#8220;что-то где-то работает не так как хочется&#8221;. Сейчаc я сам поддерживаю несколько гемов, сегодня в первый
раз создал демо-проект для поста, и вижу сколько времени уходит на эти, казалось бы не сложные операции. Поэтому, то, что многие программы
работают и работают достойно - это само по себе большое чудо, и, если мои рассказы помогут сэкономить вам немного времени, то буду очень рад.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[И снова руби, после выходных]]></title>
    <link href="http://vakhov.me/blog/2012/05/10/after-holidays/"/>
    <updated>2012-05-10T08:53:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/10/after-holidays</id>
    <content type="html"><![CDATA[<p>После таких длинных праздников тяжело снова браться за работу, все эти буквы, цифры, кнопки.
Однажды, после отпуска, я забыл пароль на рабочий компьютер. В другой раз забыл пин-код на входной двери, причем посреди рабочей недели.
На моей первой работе, чтобы попасть в офис, необходимо было ввести пароль из четырех цифр. Рука настолько привыкла к этому действия,
 что случайно задумавшить, а какой же у нас код, я не смог вспомнить ни одной цифры. Пришлось ждать коллег и потом сдаваться
секретарям. Отдых - это тоже серьезный труд. За праздники не появилось ничего новенького из практики, поэтому расскажу про несколько фишек, которые я припас уже давно.</p>

<!-- more -->


<h2>Массив и Хэш</h2>

<p>В руби 1.9 ошибка при обращении по сломанному индексу к массиву стала более невнятной:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">RUBY_VERSION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;1.8.7&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">][</span><span class="ss">:key</span><span class="o">]</span>
</span><span class='line'><span class="no">TypeError</span><span class="p">:</span> <span class="no">Symbol</span> <span class="n">as</span> <span class="n">array</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">RUBY_VERSION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;1.9.3&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">][</span><span class="ss">:key</span><span class="o">]</span>
</span><span class='line'><span class="no">TypeError</span><span class="p">:</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">convert</span> <span class="no">Symbol</span> <span class="n">into</span> <span class="nb">Integer</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если вы случайно передадите масcив в функцию, которая принимает хэш, то поймаете ошибку <code>TypeError: can't convert Symbol into Integer</code>.
Я один раз довольно долго искал проблему, так как вызов метода и работа с аргументом были окружены дополнительным кодом и я грешил на
другую конструкцию.</p>

<h2>Функция &#8220;притвориться&#8221;</h2>

<p>Во всех сайтах с бэкэндом в модель администратора мы обычно добавляем булевские флажки с правами доступа. Примерно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># model</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_fields</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">string</span> <span class="ss">:username</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boolean</span> <span class="ss">:acl_seo</span>
</span><span class='line'>    <span class="n">boolean</span> <span class="ss">:acl_posts</span>
</span><span class='line'>    <span class="n">boolean</span> <span class="ss">:acl_orders</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># controller</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">layout</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:authenticate_user</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="p">{</span> <span class="k">raise</span> <span class="no">AccessDenied</span> <span class="k">unless</span> <span class="n">current_user</span><span class="o">.</span><span class="n">acl_posts?</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># view</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">current_user</span><span class="o">.</span><span class="n">acl_posts?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= link_to &quot;Posts&quot;, posts_path %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Эта простая и надежная схема верно служит нам уже довольно долго. Мы создаем суперюзеров, чтобы скрыть настройки от клиента, о которых
ему не следуют беспокоится. Клиенты часто просят создать аккаунты с ограниченными правами (в душе мы все параноики и к тому же любим
ущемить чьи-нибудь интересы :-)). Недавно я придумал добавить ещу одну функцию &#8220;притвориться другим пользователем&#8221;. Теперь суперюзер
может выбрать из комбобокса любой аккаунт и залогиниться им. Схематически это реализовано так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">owner_user</span>
</span><span class='line'>    <span class="vi">@owner_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:owner_user_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AdminController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pretend</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;id &lt;&gt; ?&#39;</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:owner_user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="n">sign_in</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stop_pretend</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">owner_user</span>
</span><span class='line'>      <span class="n">sign_in</span> <span class="n">owner_user</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:owner_user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Эта маленькая хитрость позволяет решить сразу же 2 проблемы: всегда можно под любым аккаунтом посмотреть не осталось
ли чего-нибудь лишнего, и можно зайти под клиентом, который говорит, что у него &#8220;все сломалось&#8221; и убедиться, что это действительно так.</p>

<h2>Всегда запоминать меня</h2>

<p>Коллега прислал ссылку на статью <a href="http://robots.thoughtbot.com/post/177133611/always-remember-me">Always remember me</a>, о том
что пора отказаться от галочки &#8220;запомнить меня&#8221;. В принципе я согласен с этой статьей и сам не долюбливаю эту галочку.
Даже если сломался интернет и вы не сможете нажать ссылку &#8220;выйти&#8221;, то всегда можно очистить куки или пользоваться режимом
приватного просмотра.
В рейлс 3.2 реализовать логин без экспирации очень легко:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">.</span><span class="n">permanent</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="c1"># Для чтения permanent указывать не обязательно, а signed - обязательно</span>
</span><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="c1"># =&gt; 123</span>
</span></code></pre></td></tr></table></div></figure>


<p>Мы новые проекты делаем без галочки в бэкэнде, проверяем концепцию.</p>

<p>Хорошей рабочей недели!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Гемы - require и bundler]]></title>
    <link href="http://vakhov.me/blog/2012/05/04/gems-require/"/>
    <updated>2012-05-04T08:43:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/04/gems-require</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://vakhov.me/images/7-gem/gem2.jpg"></p>

<p>Мне не хватит духу написать подробное руководство как создать гем, к тому же я сам не эксперт в этом вопросе, лучше
расскажу сегодня про еще одну ошибку, на которую я потратил пару часов, дойдя даже до отладки. Она
настолько глупая, что не хочется, чтобы еще кто-то терял свое время. Точнее говоря, это даже не ошибка, а заблуждение.</p>

<!--more-->


<p>В одном гемспеке я прописал зависимость от хамла:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">### secret.gemspec</span>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Alexey Vakhov&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;haml&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Этот гем является энджином, в нем есть контроллеры и вьюхи. Все прекрасно работало на тестовом приложении, но когда я прикрутил
его к новому проекту, то хамл-вьюхи перестали подцеплятся. Я заглядывал в Gemfile.lock файл и видел зависимость от хамла, но вьюхи
не работали, не находился обработчик хамл. Так как я был совершенно уверен, что эта схема правильная, то мне пришлось потратить
довольно много времени, чтобы разобраться.</p>

<p>Думаю, вы уже поняли в чем была проблема. Я уже настолько привык к магии бандлера в рейлс, что не задумывался,
как это работает. Однако, когда мы используем бандлер вне рейлс, то написав гем-файл и вставив <code>require "bundler/setup"</code>
мы просто ограничиваем область видимости для <code>require</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rubygems&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/setup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Nokorigi</span> <span class="c1"># =&gt; uninitialized constant Nokogiri (NameError)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># require your gems as usual (Nokorigi прописан в гем-файле)</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;nokogiri&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Nokorigi</span> <span class="c1"># =&gt; OK</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;unicorn&quot;</span> <span class="c1"># =&gt; cannot load such file -- unicorn (LoadError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это пример взят с <a href="http://gembundler.com/">официального сайта бандлера</a>. Рейлс идет дальше и автоматически включает
все гемы из гем-файла (ориентируясь на енвайромент) в проект с помощью <code>Bundler.require</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/application.rb чистого проекта</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Bundler</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="o">*</span><span class="no">Rails</span><span class="o">.</span><span class="n">groups</span><span class="p">(</span><span class="ss">:assets</span> <span class="o">=&gt;</span> <span class="sx">%w(development test)</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Таким образом в моем проекте бандлер включил по умолчанию мой гем, но не включил хамл, так как он не был прописан в гем-файле проекта,
а была только зависимость!
Гемспек используется при установке и в данном случае игнорируется бандлером. В тестовом приложении, на котором я разрабатывал гем,
хамл был включен в гем-файл и поэтому ошибки не было. Чтобы бы больше не попадаться в эту ловушку, во всех гемах я явно включаю
все зависимости в главном файле:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">### secret.gemspec</span>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Alexey Vakhov&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;modularity&#39;</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;nokorigi&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### lib/secret.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;modularity&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokorigi&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;secret/version&#39;</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Практика показывает, что сначала нужно искать ошибки в своем коде, потом в фреймворке, потом в компиляторе, потом в железе, потом &#8230; хм, в мироздании наверное :) Из сложных ситуаций, я ловил один раз крэш руби на домашнем компьютере из-за немного битой памяти. Руби - прожорливый язык и когда залезал в сбойные ячейки, то падал. Я догадался запустить мемтест, хотя никогда с таким не сталкивался. К слову сказать и сама система вела себя немного станно.</p>

<p>Второй случай, может быть вы поможете в нем разобраться. Я все собираюсь запустить что-нибудь в
продакшн на JRuby с мультитредовым рейлс. В MRI пугают GIL (у-у-у-у, страшно. Не знаю что это, но похоже какая-то пакость, которая
не позволяет параллелить программу на несколько ядер) и плохими тредами. Поэтому готовлюсь заранее.</p>

<p>Насколько я понимаю, чтобы
ничего не шлепнулось, необходимо избегать использовать члены класса. Я обернул код из статьи <a href="http://coderrr.wordpress.com/2008/04/10/lets-stop-polluting-the-threadcurrent-hash/">Let’s stop polluting the Thread.current hash</a> в
гем <a href="https://github.com/avakhov/thread_local_accessor">thread_local_accessor</a>, но он (хвала travis-ci) падал на руби 1.9.3-p125
(на p0 работал хорошо) на конструкции <code>ObjectSpace.define_finalizer Thread.current, FINALIZER</code>. Видимо в p125 нельзя прилеплять
финалайзер к <code>Thread.current</code> (я нахожусь на чертовско тонком льду понятий, которые очень слабо понимаю,
поэтому могу сморозить что-нибудь не то).</p>

<p>Я переписал код таким образом, что вроде он должен быть потоко-безопасным и
работает на всех версиях руби. Сейчас проверяю эту библиотеку на живых проектах, пока в однопоточном режиме:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/avakhov/thread_local_accessor/blob/master/lib/thread_local_accessor.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">thread_local_accessor</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">module_eval</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">      def </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">        k = ((Class === self ? self : self.class).object_id.to_s + &#39;_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx">&#39;).to_sym</span>
</span><span class='line'><span class="sx">        if Thread.current.key?(k)</span>
</span><span class='line'><span class="sx">          Thread.current[k]</span>
</span><span class='line'><span class="sx">        else</span>
</span><span class='line'><span class="sx">          </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:default</span><span class="o">].</span><span class="n">inspect</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">        end</span>
</span><span class='line'><span class="sx">      end</span>
</span><span class='line'>
</span><span class='line'><span class="sx">      def </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx">=(val)</span>
</span><span class='line'><span class="sx">        k = ((Class === self ? self : self.class).object_id.to_s + &#39;_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx">&#39;).to_sym</span>
</span><span class='line'><span class="sx">        Thread.current[k] = val</span>
</span><span class='line'><span class="sx">      end</span>
</span><span class='line'><span class="sx">    }</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">class_eval</span> <span class="k">do</span>
</span><span class='line'>      <span class="kp">include</span> <span class="n">m</span>
</span><span class='line'>      <span class="kp">extend</span> <span class="n">m</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вы знаете почему падал предыдущий код и, как вы думаете, новый подход нормальный?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Экономим в честь дня труда]]></title>
    <link href="http://vakhov.me/blog/2012/05/02/gem-github-option/"/>
    <updated>2012-05-02T09:42:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/05/02/gem-github-option</id>
    <content type="html"><![CDATA[<p>Оказывается в гем-файле при указании репозитариев из гитхаба можно использовать краткую форму:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Тоже самое</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-test&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;git://github.com/brynary/rack-test.git&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-test&#39;</span><span class="p">,</span> <span class="n">github</span><span class="p">:</span> <span class="s2">&quot;brynary/rack-test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Узнал из вчерашнего комита Петра: <a href="https://github.com/rails/rails/commit/17f2958d853ef0dbee1aa6fa6d7b89d1ca3d4352">17f2958d85</a>.
После насыщенных праздников в честь дня труда экономия нажатий кнопок очень актуальна.</p>

<!-- more -->


<p>Более того если имя пользователя и название репозитария совпадают можно использовать еще более краткую форму:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Тоже самое</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="n">github</span><span class="p">:</span> <span class="s2">&quot;rails/rails&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="n">github</span><span class="p">:</span> <span class="s2">&quot;rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>При указании источника гемов раньше приходилось выбирать один из 4-х вариантов:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">source</span> <span class="ss">:gemcutter</span>
</span><span class='line'><span class="n">source</span> <span class="ss">:rubyforge</span>
</span><span class='line'><span class="n">source</span> <span class="ss">:rubygems</span>
</span></code></pre></td></tr></table></div></figure>


<p>Естественно я бы посоветовал использовать <code>sourсe :rubygems</code>, так как в нем меньше всего букв. Но в свежей версии
бандлера 1.1.0 можно не указывать явно рубиджемс и гем-файл может состоять только из определений зависимых гемов:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Абсолютно правильный гем-файл</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Сегодня хороший день перейти полностью на руби 1.9, если вы это до сих пор не сделали. Так как экономия на каждой
паре ключ-значение достигает 3 символа:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:key</span> <span class="o">=&gt;</span> <span class="s1">&#39;value&#39;</span><span class="p">}</span> <span class="c1"># 17 символов.</span>
</span><span class='line'><span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="s1">&#39;value&#39;</span><span class="p">}</span>    <span class="c1"># 14 символов!</span>
</span></code></pre></td></tr></table></div></figure>


<p>И наконец самый мудрый и важный совет от мэтра С++:</p>

<blockquote><p><strong>24.2.4. Отказ от программирования</strong><br>Программирование дорого и непредсказуемо по сравнению со многими другими видами деятельности, и полученная программа часто не на 100% надежна. Программирование трудоемко, и &mdash; по многим причинам &mdash; многие серьезные проекты задерживаются из-за неготовности кода. Так почему бы программирование как род деятельности совсем не устранить из процесса?</p><footer><strong>Бьерн Страуструп</strong> <cite>Язык программирования С++ (Третье издание)</cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Таинственные гемы - Prepend Routes]]></title>
    <link href="http://vakhov.me/blog/2012/04/27/prepend-routes/"/>
    <updated>2012-04-27T14:12:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/04/27/prepend-routes</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://vakhov.me/images/7-gem/gem.jpg"></p>

<p>Хочу поделиться интересной ситуацией, которая у меня возникла при разработке гемов. Вообще в любом случае попробуйте написать
гем и обязательно выложите его на рубиджемс, так вы сделаете задачу придумывания имени для следующих коллег более
интересной :)</p>

<p>Если говорить серьезно, я сталкивался с дискуссиями о том, что пространство имен рубиджемс очень сильно замусоренно и
лучше не создавать гемы для своих внутренних нужд. Мне кажется проблема надуманная. Я не выкидываю бумажки из под мороженного
на землю на основании того, что наша планета и так замусоренная, но экономия на именах мне напоминает
шуточною статью, которая рекомендовала беречь GUID&#8217;ы, так как их осталось очень мало. (Если вы программировали под виндовс,
то заметили, что гуиды там используются очень активно. Это смешная шутка, правда?)</p>

<!--more-->


<p>Итак гемы. Вообще наибольший интерес для меня представляют так называемые энджины. Они эмитируют маленький рейлс-проект и позволяют
выносить в гем контроллеры, модели, миграции, ассеты, рауты, все что захочется. Одна из проблема как раз связана с раутами.
Вы можете добавить рауты следующим образом:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/custom_gem/engine.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CustomGem</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/controllers/custom_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CustomController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/routes.rb</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;custom/index&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это будет работать прекрасно во всех случаях, кроме одного, если кто-то использует
раут со звездочкой для мэтчинга по шаблону (например
для статических страниц о компании, контакты и т.д.):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MyApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;*permalink&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;home#page&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В этом случае кастомный раут у гема будет затерт. Я столкнулся с этим в своем форке rails-footnotes, когда контроллер, который
в девелопменте позволяет посмотреть исходный руби-файл прямо в браузере, перестал работать. Есть очень простая, но недокументированная
возможность - метод <code>prepend</code> <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/route_set.rb#L306">action_dispatch/routing/route_set.rb#L306</a>, с помощью которого можно поместить раут на самый верх:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 1-й вариант (НЕ ПРАВИЛЬНО)</span>
</span><span class='line'><span class="c1"># ------------</span>
</span><span class='line'><span class="c1"># Вот этот вариант НЕ ЗАРАБОТАЛ! Не знаю почему, мне лень стало разбираться.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/routes.rb</span>
</span><span class='line'><span class="c1"># Заменяем draw на prepend</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">prepend</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;custom/index&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 2-й вариант (рабочий)</span>
</span><span class='line'><span class="c1"># ------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/routes.rb - удаляем вообще</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lib/custom_gem/engine.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CustomGem</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Engine</span>
</span><span class='line'>    <span class="n">initializer</span> <span class="s1">&#39;custom&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>      <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span> <span class="ss">:after_initialize</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">prepend</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">get</span> <span class="s1">&#39;custom/index&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>С необходимостью расширять рауты (именно расширять, а не делать маунтед-енджин) я сталкивался всего два раза. В обоих случаях я сделал
как в варианте 2. Первый вариант выглядит привлекательнее, но у меня пока не дошли руки разобраться почему он не работает.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Подарки]]></title>
    <link href="http://vakhov.me/blog/2012/04/25/tips/"/>
    <updated>2012-04-25T13:59:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/04/25/tips</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://vakhov.me/images/6-perfo/perf.jpg"></p>

<p>Сенека в письмах Луцилию в каждое письмо старался вставить цитату древних мыслителей, он называл это подарком.
К сожалению цитаты древних программистов выглядят так, как на рисунке справа и я не могу воспользоваться этим же способом.
Вместо этого в каждую запись я стараюсь включить код или случай из своей практики.</p>

<p>Сегодня обилие информации в открытом доступе
потенциально позволяет любому специалисту создать проект любого уровня, тайных знаний практически нет. Самым дефицитным
ресурсом является личное время. И если вы потратите целый день на поиск какой-нибудь ошибки, то выпуск проекта мечты также отложится
на этот самый день. Но чем больше случаев из практики вы знаете, тем больше вероятность, что в повседневной деятельности вы распознаете
ошибку или особенность и сэкономите драгоценное время. Сегодняшний пост я хочу посвятить различным мелочам, которые у меня накопились и
может быть что-то вам тоже пригодиться.</p>

<!--more-->


<h2>Упасть на первом сломанном спеке</h2>

<p>Когда я мечтал пропатчить <code>test/unit</code>, чтобы он падал на первом сломанном тесте. Так как скучно смотреть
на множество ошибок, которые часто вызваны одной причиной. В <code>rSpec</code> такая возможность есть в
стандартной поставке, ничего патчить не нужно:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rspec --fail-fast
</span><span class='line'>rspec --fail-fast -b <span class="c"># -b(--backtrace) - еще и вывести полный трейс ошибки</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Блоки текста с красивыми отступами</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">do_some</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">CMD</span>
</span><span class='line'><span class="sh">rake db:migrate</span>
</span><span class='line'><span class="sh">rake db:test:prepare</span>
</span><span class='line'><span class="no">CMD</span>
</span><span class='line'>      <span class="nb">system</span> <span class="n">cmd</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Раньше я делал примерно так, когда мне нужно было вставить большие куски текста. Коллега подсказал метод <a href="http://api.rubyonrails.org/classes/String.html#method-i-strip_heredoc">strip_heredoc</a> из рейлс, который позволяет вернуть коду необходимую красоту:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">do_some</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">CMD</span><span class="o">.</span><span class="n">strip_heredoc</span>
</span><span class='line'><span class="sh">        rake db:migrate</span>
</span><span class='line'><span class="sh">        rake db:test:prepare</span>
</span><span class='line'><span class="no">      CMD</span>
</span><span class='line'>      <span class="nb">system</span> <span class="n">cmd</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Фильтры в контроллерах запускаются в области видимости контроллера</h2>

<p>Мне кажется, что я где-то прочитал, что блочные фильтры в контроллере нужно писать так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="k">do</span> <span class="o">|</span><span class="n">controller</span><span class="o">|</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Access Denied&quot;</span> <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">port</span> <span class="o">==</span> <span class="mi">3000</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Но оказывается параметр <code>controller</code> не нужен. Из-за особенностей реализации фильтров через AS-колбеки <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/callbacks.rb#L337">activesupport/lib/active_support/callbacks.rb#L337</a> код вызывается как обычный
метод, поэтому можно написать так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Access Denied&quot;</span> <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">port</span> <span class="o">==</span> <span class="mi">3000</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Параметр size в image_tag</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">image_tag</span><span class="p">(</span><span class="s1">&#39;image.jpg&#39;</span><span class="p">,</span> <span class="n">size</span><span class="p">:</span> <span class="s1">&#39;70x25&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># =&gt; &lt;img alt=&quot;Image&quot; height=&quot;25&quot; src=&quot;/assets/image.jpg&quot; width=&quot;70&quot; /&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это штришок тоже почему-то ускользнул от меня, я долгое время использовал явные <code>:width</code> и <code>:height</code> (кстати вы всегда
&#8216;ширина&#8217; и &#8216;высота&#8217; пишете правильно с первой попытки? :-))</p>

<h2>Использование хэлпер методов вне контроллера</h2>

<p>Не всегда удается развести всю логику строго по MVC, поэтому всегда можно подхачить, например вот так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:first</span><span class="p">,</span> <span class="ss">:second</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:content_tag</span><span class="p">,</span> <span class="ss">:safe_join</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;ApplicationController.helpers&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="c1"># Конечно заносить элементы оформления в модель не очень хорошо,</span>
</span><span class='line'>    <span class="c1"># я бы даже сказал совсем не хорошо. Но для этого нам и нужны</span>
</span><span class='line'>    <span class="c1"># интуиция, опыт и лень, чтобы отличить добро от зла.</span>
</span><span class='line'>    <span class="n">safe_join</span> <span class="o">[</span><span class="n">content_tag</span><span class="p">(</span><span class="ss">:b</span><span class="p">,</span> <span class="n">first</span><span class="p">),</span> <span class="n">second</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39; &amp;mdash; &#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%p</span><span class="p">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">full_name</span>  <span class="c1"># =&gt; &lt;p&gt;&lt;b&gt;Alexey&lt;/b&gt; &amp;mdash; Vakhov&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вообще я поддерживаю разумные хаки. Бизнес-логику обязательно нужно хачить. Я всегда сначала во вьюхе буду создавать длинную
колбаску <code>@products.rejected(&amp;:disabled?).select{|p| p.price &gt; 1000}.reverse</code>. И только когда она станет совсем неприличной,
я вынесу ее с длинным, стремным именем в <code>ApplicationHelper</code> и начну мусорить там. Возможно это и нарушает академические
стандарты, но зато все скажут спасибо при поддержке. Так как, чтобы поправить вьюху, нужно будет заглянуть всего в один файл.</p>

<p>А если вы увидите что-нибудь типа <code>@products.render_me(self)</code>, в контроллере окажется, что <code>@products</code> это декоратор, в декораторе
<code>render_me</code> реализован через родительский класс и пачку миксинов. Вообщем после 4-го уровня абстракции кэш вашей
памяти переполнится окончательно. К тому же руби все равно не переплюнуть C++ в плане абстракции. Простой код должен
выглядеть просто, сложный - сложно.</p>

<h2>Обход двух и более массивов одного размера</h2>

<p>Глубинный эстетизм кода мне тоже не чужд, поэтому когда мне пришлось написать пару раз что-то похожее на:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array_a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">array_b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">array_a</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">array_b</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">array_a</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">ind</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">array_b</span><span class="o">[</span><span class="n">ind</span><span class="o">]</span>
</span><span class='line'>    <span class="c1"># do something with a &amp; b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>несимметричность данного решения меня раздражала. И в рейлс я случайно заметил кусочек, который почему-то не пришел в голову раньше:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">array_a</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">array_b</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">array_a</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">ind</span><span class="o">|</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">array_a</span><span class="o">[</span><span class="n">ind</span><span class="o">]</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">array_b</span><span class="o">[</span><span class="n">ind</span><span class="o">]</span>
</span><span class='line'>    <span class="c1"># do something with a &amp; b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Второй вариант мне нравится сильно больше. Не удивлюсь, если в руби есть еще более
симметричный способ обойти несколько массивов одновременно,
ведь API руби - безгранично.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Автоматизация создания нового приложения с помощью рейлс-темплейтов]]></title>
    <link href="http://vakhov.me/blog/2012/04/22/rails-templates/"/>
    <updated>2012-04-22T11:28:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/04/22/rails-templates</id>
    <content type="html"><![CDATA[<p>Рейлс уже очень давно поддерживает темплейты при создании нового приложения. До недавнего времени я недооценивал мощь этого инструмента.
Сегодня я хочу расскать, как я использую темплейты сейчас и привести несколько хитростей из личной практики.</p>

<!--more-->


<p>Если вы писали генераторы, то вы уже знакомы с темплейтами, так как они построены на том же коде, что и генераторы.
В любом случае вот этих 3 ссылок достаточно, чтобы узнать всю необходимую информацию:</p>

<ul>
<li><a href="http://m.onkey.org/rails-templates">http://m.onkey.org/rails-templates</a></li>
<li><a href="http://guides.rubyonrails.org/generators.html">http://guides.rubyonrails.org/generators.html</a></li>
<li><a href="http://rdoc.info/github/wycats/thor/master/Thor/Actions.html">http://rdoc.info/github/wycats/thor/master/Thor/Actions.html</a></li>
</ul>


<p>Иван Евтухович удачно заметил на конференции, что нужная степень автоматизации, это когда все автоматизировано до безобразия.
Я абсолютно согласен с данным утверждением и стараюсь автоматизировать именно до этой степени, а иногда даже чуточку больше.</p>

<p>Любая автоматизация, это маленькая локальная инновация. И кроме уменьшения сроков выполнения и увеличения качества
конкретной задачи у нее есть неочевидный, но очень важный эффект - <em>автоматизация влияет на повседневные шаблоны
поведения программиста и на конечный результат</em>. Поясню на примерах. Agile кроме уменьшения сроков и увеличения
отзывчивости девелопмента помогает создавать
легкие, изящные приложения, которые не получится разработать обычными методами. Гитхаб и рубиджемс помогли нам получить
огромное количество интересного кода, который раньше не был бы открытым, даже не из-за желания скрыть свои наработки, а
из-за сложности публикации и поддержки своего опен-сорса. Гит показал нам, как здорово создавать ветки и делать маленькие комиты.
Раньше нам казалось, что ветки не нужно создавать часто, но оказывается это было не потому-что сама идея веток - бесполезна, а
потому-что сложности создания и мержа уничтожали все потенциальные приемущества. Автоматизация (как и выбор правильных
инструментов) помогает взглянуть на старые подходы к работе под другим углом, выработать и использовать новые навыки, и, в конечном
итоге, получить принципиально другой результат.</p>

<p>Вернемся к теме сегодняшней беседы.
В повседневной практике довольно редко приходится создавать новое приложение, обычно это приходится делать
только в начале нового проекта. Но в любом случае у каждого программиста сформирован
набор гемов и начальных настроек, которые бы он хотел использовать в любом проекте независимо от размера и назначения.
У меня тоже есть такой набор, каждый раз я его применял вручную, поэтому гем-файлы всех проектов выглядят чуть-чуть
по разному. Но вообще я всегда создавал новый проект с неохотой, потому-что нужно было добавить поддержку хамл,
спеки, удалить index.html, настроить базу и сделать еще много всяких маленьких скучных правок. Кроме того я люблю возиться
с исходниками рейлс и часто у меня возникает вопрос, как работает та или иная функциональность.
Было бы удобно иметь всегда рабочий стенд, на котором можно быстро проверять свои гипотезы. Я пробовал использовать
для этого пустой sandbox-проект, но он очень быстро приходил в негодность, плюс иногда еще хочется посмотреть как это работало
например в 3.0 или даже в 2.3. Можно конечно еще делать так: создать пустое приложение <code>rails new ...</code>, добавить therubyracer, bundle install, настроить базу, bundle install, фух - не хватает haml, bundle install, опс - хочу автомиграции, я к ним привык - добавить, bundle install - да ну в качель эту идею и рейлс целиком, пусть работают как хотят&#8230;</p>

<p>Сейчас я создаю пустое приложение несколько раз за день. Так как, чтобы проверить как работает тот или иной код в чистых рейлс достаточно 3-х простых команд:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new demo-app -m &lt;путь-до-темплейта&gt; <span class="c"># у меня есть заготовки для 3.0, 3.1 и 3.2</span>
</span><span class='line'><span class="nb">cd </span>demo-app
</span><span class='line'>rails s   <span class="c"># привычное и прекрасное окружение запущено</span>
</span><span class='line'>
</span><span class='line'><span class="c"># hack, hack, hack</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> rm -fr demo-app
</span></code></pre></td></tr></table></div></figure>


<p>В заключение приведу свой основной темплейт-файл, который я обычно использую:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Можно использовать просто команду `file`, но в этом случае</span>
</span><span class='line'><span class="c1"># при попытке переписать существующий файл, система спросит:</span>
</span><span class='line'><span class="c1"># &quot;уверенны ли вы?&quot; Конечно уверены! Мы же создаем проект с</span>
</span><span class='line'><span class="c1"># нуля и не хотим лишний раз нажимать ентер.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">file_force</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">content</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_force</span> <span class="s1">&#39;Gemfile&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">source &#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">gem &#39;rails&#39;, &#39;3.2.3&#39;</span>
</span><span class='line'><span class="sh">gem &#39;pg&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">gem &#39;haml&#39;</span>
</span><span class='line'><span class="sh">gem &#39;jquery-rails&#39;</span>
</span><span class='line'><span class="sh">gem &#39;unicorn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">group :assets do</span>
</span><span class='line'><span class="sh">  gem &#39;sass-rails&#39;,   &#39;~&gt; 3.2.3&#39;</span>
</span><span class='line'><span class="sh">  gem &#39;coffee-rails&#39;, &#39;~&gt; 3.2.1&#39;</span>
</span><span class='line'><span class="sh">  gem &#39;therubyracer&#39;, :platform =&gt; :ruby</span>
</span><span class='line'><span class="sh">  gem &#39;uglifier&#39;, &#39;&gt;= 1.0.3&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">group :development do</span>
</span><span class='line'><span class="sh">  gem &#39;rails-footnotes&#39;, git: &#39;git://github.com/avakhov/rails-footnotes.git&#39;, branch: &#39;custom&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">group :test do</span>
</span><span class='line'><span class="sh">  gem &#39;factory_girl_rails&#39;</span>
</span><span class='line'><span class="sh">  gem &#39;timecop&#39;</span>
</span><span class='line'><span class="sh">  gem &#39;database_cleaner&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">group :development, :test do</span>
</span><span class='line'><span class="sh">  gem &#39;rspec-rails&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_force</span> <span class="s1">&#39;.gitignore&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">/.bundle</span>
</span><span class='line'><span class="sh">/log/*.log</span>
</span><span class='line'><span class="sh">/tmp</span>
</span><span class='line'><span class="sh">/public/assets</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;README.md&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh"># Project</span>
</span><span class='line'>
</span><span class='line'><span class="sh">TODO: description</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;.rspec&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">--colour</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">ENV[&quot;RAILS_ENV&quot;] ||= &#39;test&#39;</span>
</span><span class='line'><span class="sh">require File.expand_path(&quot;../../config/environment&quot;, __FILE__)</span>
</span><span class='line'><span class="sh">require &#39;rspec/rails&#39;</span>
</span><span class='line'><span class="sh">require &#39;rspec/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">Dir[Rails.root.join(&quot;spec/support/**/*.rb&quot;)].each {|f| require f}</span>
</span><span class='line'>
</span><span class='line'><span class="sh">RSpec.configure do |config|</span>
</span><span class='line'><span class="sh">  config.before(:suite) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.strategy = :transaction</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.before(:each) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.start</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.after(:each) do</span>
</span><span class='line'><span class="sh">    DatabaseCleaner.clean</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  config.include FactoryGirl::Syntax::Methods</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/factories.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">FactoryGirl.define do</span>
</span><span class='line'><span class="sh">  # factory :demo do</span>
</span><span class='line'><span class="sh">  #   name &#39;name&#39;</span>
</span><span class='line'><span class="sh">  # end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;app/controllers/home_controller.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">class HomeController &lt; ApplicationController</span>
</span><span class='line'><span class="sh">  def index</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;app/views/home/index.html.haml&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">%h1 Home#index</span>
</span><span class='line'><span class="sh">%p Find me in app/views/home/index.html.haml</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;spec/controllers/home_controller_spec.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">require &#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">describe HomeController do</span>
</span><span class='line'><span class="sh">  it &quot;index&quot; do</span>
</span><span class='line'><span class="sh">    get &#39;index&#39;</span>
</span><span class='line'><span class="sh">    response.should be_success</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Нам не нужны примеры роутов, мы и так все знаем!</span>
</span><span class='line'><span class="n">head</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s1">&#39;config/routes.rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">file_force</span> <span class="s1">&#39;config/routes.rb&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span>
</span><span class='line'><span class="sh">#{head.strip}</span>
</span><span class='line'><span class="sh">  root to: &#39;home#index&#39;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">CODE</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Скрипт темплейта запускается в директории</span>
</span><span class='line'><span class="c1"># созданного проекта:</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="s1">&#39;public/index.html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="s1">&#39;README.rdoc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># И мы можем запускать даже шелл-команды</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;bundle install&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;rake db:create db:migrate db:test:prepare&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git ci -amInitial&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>После выполения этого темплейта, создается приложение с базой, с главной страницей (можно подключить
devise, которому нужен <code>root_path</code>) и зелеными спеками.
Можно вызвать команду <code>rails g scaffold post title:string &amp;&amp; rake db:migrate</code> и экспериментировать
с моделями. Scaffold-генератор создает много файлов стоит сказать, если он нам не понравится
мы удалим его с помощью <code>git checkout . &amp;&amp; git clean -df</code>, а может создадим чистый проект заново, с темплейтами - это просто!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Booter 1.0.0.rc1]]></title>
    <link href="http://vakhov.me/blog/2012/04/17/booter-rc1/"/>
    <updated>2012-04-17T18:23:00+04:00</updated>
    <id>http://vakhov.me/blog/2012/04/17/booter-rc1</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://vakhov.me/images/5-booter/burger.jpg">
С радостью сообщаю, что на прошлой неделе зарелизился бутер 1.0.0.rc1, первый релиз-кандидат <a href="https://github.com/boshie/booter">https://github.com/boshie/booter</a>. Он пока еще без кунжута, но уже довольно питательный :-)</p>

<p>Для меня эта библиотека очень важна, так как это мой первый настоящий опер-сорс.</p>

<!-- more -->


<p>История появления гема очень простая. Я люблю использовать твиттеровский бутстрап для прототипов и
бэкендов. Сначала использовал его напрямую, потом написал простой форм-билдер. Затем
вынес стили и билдер в отдельный гем, чтобы шарить между проектами. Я не стал использовать simple_form или
любую другую обертку, так как мне были нужны пару простых фич и я не хотел тянуть в проекты
большие многофункциональные библиотеки.</p>

<p>Долгое время гем состоял из 3-х файлов и находился в версии
0.2, но пару недель назад <a href="https://github.com/alexesDev">Алексей Юрченко</a> прислал мне пулриквест под
номером 1. Первый для меня, как мейнтейнера гема, и первый для него, как для контрибьютера опен сорс.
Я принял изменения, которые он предложил, чтобы использовать библиотеку в своем проекте,
и решил сделать из бутера
полноценный гем. Я понимаю, что бутер не завоюет мир, но зато мы
прошли практически все фазы, принятые у современного программного обеспечения, своего
рода боевое крещение.</p>

<p>Бутер покрыт спеками, которые запускаются на трависе. Он представляет из себя полноценный енджин:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Booter</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Поддерживается <a href="http://semver.org/">семантическая версионность</a>. Оказывается когда я первый
раз  читал этот
документ, то не заметил важныe пункты про версию 1.0.0, после которой API становится публичным:</p>

<blockquote><p>Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.</p></blockquote>




<blockquote><p>Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is dependent on this public API and how it changes.</p></blockquote>


<p>Таким образом, если гем стал 1.0 и автор придерживается семантических версий, то API этого гема
можно считать стабильным.</p>

<p>Для бутера создано на Хероку <a href="http://growing-cloud-6915.heroku.com">демонстрационное приложение</a>
(работает оно еще не совсем хорошо).
В <a href="https://github.com/boshie/booter#readme">ридми</a> описаны примеры
использования библиотеки. Другими словами, полный джентельменский набор.
Сейчас мы доделываем фичи, которые хотим включить в 1.0, но релиз-кандидат тоже рабочий,
он работает в нескольких проектах.</p>

<p>Разрабатывать гем довольно интересно. Если в проект нужно добавлять изменения как можно быстрее и
сразу же выкатывать на продакшн, то гем разрабатывается в более спокойном режиме, так как
всегда нужно думать об уже существующих проектах, чтобы не потерять совместимость, не
сделать слишком общее решение или наоборот слишком частное. Более того внести
маленькое, сиюминутное изменение в гем сильно дороже, чем в обычный проект, так как нужно
потестировать, присвоить новую версию,
выложить на rubygems.</p>

<p>Поэтому сам процесс разработки гема настраивает на накопление изменений и временные
хаки до релиза следующих стабильных версий. Хаки делать очень просто, обычно у всех
гемов есть константа <code>VERSION</code>, которую можно проверить и бросить эксепшн если появилась
новая версия и вы обновили свой гем-файл.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">raise</span> <span class="s2">&quot;Remove code below&quot;</span> <span class="k">if</span> <span class="no">Booter</span><span class="o">::</span><span class="no">VERSION</span> <span class="o">!=</span> <span class="s1">&#39;1.0.0.rc1&#39;</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Думаю вы помните, что рейлс, по-моему 2.3.13, не получились,
так как что-то отвалилось в процессе релиза и после этого сразу же вышли 2.3.14. Мне кажется, что
коре тим постарается больше так не делать, потому-что это слишком большой стресс.
Cейчас даже есть документ, в котором описано как релизить рельсы правильно: <a href="https://github.com/rails/rails/blob/master/RELEASING_RAILS.rdoc">https://github.com/rails/rails/blob/master/RELEASING_RAILS.rdoc</a>.</p>

<p>Кстати создать скелет нового гема можно двумя способами <code>bundle gem &lt;имя-гема&gt;</code> или
<code>rails plugin new &lt;имя-гема&gt;</code>.
Первый вариант годится для низкоуровневых библиотек. <code>rails plugin new</code> же создает помимо прочего dummy-приложение для тестирования
енджинов, и является современной заменой гема enginex, который создал Жозе Валим для своей
книги &#8220;Crafting Rails Applications&#8221;.</p>
]]></content>
  </entry>
  
</feed>
