<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Tech addicted</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Cherry Pick для постгресса</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/pg_pick/main.jpg&quot; /&gt;
          &lt;p&gt;В гите есть забавная команда &lt;code&gt;cherry-pick&lt;/code&gt;, с помощью которой можно один или несколько комитов перенести из одной
ветки в другую. Вообще в гите много забавных команд, кто например знает про &lt;code&gt;git rerere&lt;/code&gt;? И сколько раз вы ее использовали
в повседневной практике? Я такую команду не знаю, ни разу не использовал, и даже желания нет. И вообще мне про 
нее рассказал &lt;a href=https://twitter.com/timurminulin&gt;Тимур Минулин&lt;/a&gt;, думаю он ее тоже не использует, уж больно она экзотичная.&lt;/p&gt;

&lt;p&gt;Так вот черри пик. А иногда возникает потребность перенести несколько записей из одной базы данных в другую, например для тестирования
нужна маленькая часть большой таблицы. Это сделать очень просто с помощью одной шел команды:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;psql db1 -c&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY (SELECT * from table where id in (1,2)) TO STDOUT&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  psql db2 -c&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY table FROM stdin&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Таким образом можно переносить записи по произвольному запросу (конечно схемы таблиц должны совпадать),
что в некоторых ситуациям помогает сэкономить много времени.&lt;/p&gt;

        </description>
        <pubDate>Fri, 30 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/30/pg_pick/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/30/pg_pick/index.html</guid>
      </item>
    
      <item>
        <title>Самая лучшая реалтайм аналитика</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ga/main.jpg&quot; /&gt;
          &lt;p&gt;Никогда бы не поверил, что самым лучшим инструментом проверки работоспособности сайта прямо сейчас является гугл аналитика,
а именно вкладка &lt;code&gt;Real-Time&lt;/code&gt;.
Более отзывчивого инструмента я не знаю, при любом подозрении в первую очередь смотрим именно туда. Начиная с некоторого
трафика любая значительная неровность на графике на 100% означает, что с сайтом проблемы.&lt;/p&gt;

&lt;p&gt;Например так выглядит добавление колонки с дефалтовым значением в достаточно большую таблицу (мониторинг завопил, команда &amp;quot;под ружье&amp;quot;,
пока разобрались в чем проблема, начали чинить, колонка уже добавилась, но шрам остался).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/ga/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;В архивах также нашел такой график, не помню в чем была проблема, но чуть-чуть пользователей зацепило, помню что вовремя успели
остановить деструктивное действие.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/ga/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;И вообще гугл аналитика шикарный инструмент. Там конечно много кнопочек и вкладочек, но умелые люди творят с ними просто чудеса.&lt;/p&gt;

        </description>
        <pubDate>Thu, 29 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/29/ga/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/29/ga/index.html</guid>
      </item>
    
      <item>
        <title>Стресс выбора из хороших решений</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/stress/main.jpg&quot; /&gt;
          &lt;p&gt;В &lt;a href=http://www.mann-ivanov-ferber.ru/books/sse/funky-business/&gt;бизнесе в стиле фанк&lt;/a&gt; есть пример, когда ведущий журнал
по потребительству заявил, что все марки машин технически хороши, выбирайте себе по цвету, сервису, красоте и финансовым возможностям.
Мне кажется в веб-разработке тоже давно пора заявить, что все технологие хорошие, выбирайте те, у которых звездочек на гитхабе
больше &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Это так и есть, современный веб можно написать в конечные сроки на любом популярном языке и фреймворке, конечно
с разной степенью комфорта.&lt;/p&gt;

&lt;p&gt;Обратной стороной этого изобилия является невротизм выбора. Читал у одного психолога, что выбор из нескольких хороших вариантов -
это большой стресс для человека. Именно поэтому всевозможным депрессиям и расстройствам подвержены больше жители развитых обществ.
Удивительно, что выбор есть или не есть, менее травмирующий для психики, чем выбор чего бы такого поесть и чего бы этакого купить.&lt;/p&gt;

&lt;p&gt;Вопрос моды в разработке сейчас играет большую роль и порождает много споров и стресса. У нас есть даже внутренняя шутка, что поздно учить
&amp;lt;имя технологии&amp;gt;, так как она уже у всех неделю в продакшене. Мне кажется, что выход тут такой же
как и в потребительском стрессе, признать,
что самые лучшие и модные ботинки, те, которые согревают ноги прямо сейчас, а самая правильная и прогрессивная технология - та, которая
решает ваши сегодняшние задачи (но по сторонам поглядывать &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;).&lt;/p&gt;

        </description>
        <pubDate>Wed, 28 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/28/stress/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/28/stress/index.html</guid>
      </item>
    
      <item>
        <title>Когда пора комментировать</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/comments/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я работал C++-разработчиком в &lt;a href=http://www.cqg.com&gt;CQG&lt;/a&gt; у нас было забавное правило, которым пользуюсь до сих пор.
В новом коде было необходимо документировать только классы и функции (а их нужно было документировать всегда, для большой кодовой
базы это необходимо), но сам код практически не документировался. Потому-что новый код всегда чистенький, гладенький и в целом
понятный. Но когда идет вставка кода в уже существующий метод, хорошим тоном было описать кто и зачем этот фрагмент
вставил.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... много кода &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// av: fix of #342987. Иногда внешний сервис возвращает 1, но при этом ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ... еще много кода&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Формально эту информацию можно достать с помощью &lt;code&gt;git blame&lt;/code&gt; (ну не &lt;code&gt;git&lt;/code&gt; на самом деле, гита тогда еще не было),
однако тогда приходится делать много лишних кликов, прыгать по истории и вникать во все комиты, в которых менялся данный файл.
Фактически же такие комменарии очень
сильно помогают разобраться в конкретном файле. И чем больше рубцов, тем более легаси код.&lt;/p&gt;

        </description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/27/comments/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/27/comments/index.html</guid>
      </item>
    
      <item>
        <title>С Синатрой мне не по пути</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/sinatra/main.jpg&quot; /&gt;
          &lt;p&gt;Так получилось, что с Синатрой у меня так и не сложилось. Я раз пять пробовал запускать на нем различные легкие приложения, а
потом понимал, что что-то как-то неютно (привет, &lt;code&gt;ActiveSupport&lt;/code&gt;). Ой, и в базу нужно сходить (добавим &lt;code&gt;ActiveRecord&lt;/code&gt;). Еще недурно было бы
пару писем отправить (ура, есть же &lt;code&gt;ActionMailer&lt;/code&gt;). В этот момент появляется первое подозрение, что что-то здесь не так.
И потом нужно добавить пару форм, авторизацию, а сессии из коробки не работают, и csrf нет
и вообще пора приложение переводить на рейлс и ловить кайф. Возвращаться в рейлс с других технологий - всегда в
кайф, там все как-то просто берет и работает.&lt;/p&gt;

&lt;p&gt;У нас сейчас минимум два таких приложения крутится, которые побывали синатрой и превратились в рейлс. Я общался - 
у многих так. Говорят, что где-то там, у кого-то синатра приложения работают и все довольны, но в живой природе пока не встречал.&lt;/p&gt;

        </description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/26/sinatra/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/26/sinatra/index.html</guid>
      </item>
    
      <item>
        <title>Емейл-маркетинг в жизни простого инженера</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/email/main.jpg&quot; /&gt;
          &lt;p&gt;Большинство инструментов маркетинга требуют добавления в домен SPF-записи. И через некоторое
время получается примерно такая конструкция:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dig +short -t txt mailchimp.com
&lt;span class=&quot;c&quot;&gt;# v=spf1 include:servers.mcsv.net include:mail.zendesk.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# include:_spf.google.com include:_lp.mailchimp.com ip4:50.22.164.201&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ip4:205.201.140.14 ip4:205.201.132.14 ~all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Однако важно помнить одну деталь - при проверки этой записи сервер по спецификации должен
сделать не больше 10 DNS запросов (информацию легко найти в интернете по ключевым словам
&lt;code&gt;spf: too many DNS lookups&lt;/code&gt;), иначе репутация письма будет сильно испорчена. Мы один раз
случайно &lt;code&gt;_spf.google.com&lt;/code&gt; поставили на последнее место для одного из доменов, эта запись вылетела из лимита и письма, отправленные
просто из gmail-интерфейса, стали часто попадать в спам.&lt;/p&gt;

&lt;p&gt;Необходимое количество запросов легко посчитать вручную, раскрыв spf-запись каждого перечисленного
адреса, или с помощью какого-нибудь скрипта. Однако самый лучшим способом проверить качество не только
SPF-записей, а всех настроек в принципе, это отправить письмо из каждого используемого сервиса
на специальный адрес, например который предложит &lt;a href=https://www.mail-tester.com/&gt;www.mail-tester.com&lt;/a&gt;.
Именно
с помощью него мы быстро вычислили свою проблему с гмейлом.&lt;/p&gt;

&lt;p&gt;Конечно профессиональный маркетолог вам это все сам расскажет, но если вы продемонстрирует свои
знания SPF и предложите проверить письма через мейл тестер, то он точно будет при встрече будет
первым подавать руку.&lt;/p&gt;

&lt;p&gt;Хорошего дня вам, высокой конверсии и нулевого баунс рейта!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/email/spam.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

        </description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/23/email/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/23/email/index.html</guid>
      </item>
    
      <item>
        <title>Устои шатал</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/redo/main.jpg&quot; /&gt;
          &lt;p&gt;В книге &lt;a href=https://www.ozon.ru/context/detail/id/27190925/&gt;Закон малинового варенья и еще 103 секрета консалтинга&lt;/a&gt;, которую мне
подарил замечательный друг Андрей Рынкевич, есть глава о важности развития способности мыслить парадоксально. Найти в старом, что-то
новое, увидеть нестандартное решение, придумать что-то свежее можно только попав в условия парадокса. Для меня парадокс граничит
с провокацией, которая также помогает выйти за границы сложившегося, расшатать устои. Я люблю подвергать сомнению
привычные схемы, проверяя их прочность с помощью юмора и, да что уж тут скрывать, легкого троллинга.&lt;/p&gt;

&lt;p&gt;Правда иногда получается не очень хорошо. Например несколько лет назад, на выступлении в институте системного программирования
я сказал, что мы ничего не тестируем. Эти слова с укором мне уже напомнили разные внешние люди раз 10
(а сколько еще смолчали). Хотя на самом
деле автоматическое тестирование реально всего лишь один из фильтров качества, к тому же не самый лучший (бац, меня
окончательно выгоняют со всех элитных вечеринок с коктейлями).&lt;/p&gt;

&lt;p&gt;Из литературы можно узнать (читал давно, со ссылками беда &lt;img class=&#39;emoji&#39; title=&#39;:disappointed:&#39; alt=&#39;:disappointed:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f61e.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), что самый лучший фильтр качества,
который отлавливает больше всего ошибок -
это формальная инспекция кода. Но если мы хотим чтобы в продакшен проходило скажем 1 из 100 ошибок, нам придется ставить
несколько фильтров: ревью, ручное тестирование, юнит-тесты, интеграционное тестирование, альфы, беты и так далее, прилично удорожая
производство. Саппорт, мониторинг это
тоже фильтры, но уже в продакшене. Но нигде нет правила, что нужны именно автотесты, который встроены в рейлс и другие
веб фреймворки. Их вполне в некоторых условиям можно заменить
чем нибудь другим (подозреваю, что выгонят даже с привокзальных вечеринок).&lt;/p&gt;

&lt;p&gt;На докладе я не врал, первые версии Учи.ру действительно
были без тестов. Мы сделали не меньше пяти разных вариантов, ходили в школы, постоянно все переделывали, тестировали
вручную и снова в школы. И я
рад, что мы прорвались. Компания растет, задачи все интереснее и если бы не срезали углы, не факт, что получилось бы.&lt;/p&gt;

&lt;p&gt;Для меня важность наличия тестов в привычном понимании находится месте на третьем в приоритетах,
а полный ковередж месте на десятом. Однако считаю, что CI обязательно,
стопроцентно должен
быть подключен в каждом продакшене с первых же комитов, чтобы если кто-то хочет написать тесты, мог это безболезненно
сделать. На первых двух местах конечно же общая организация процессов и структура проекта. Если главный мотив реализации совпадает
с бизнесом, кода не очень много, он прост и прямолинеен, то это прекрасный задел. Вот, что например говорит DHH, наш дорогой:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&amp;quot;A bad design with a complete test suite is still a bad design&amp;quot;, &lt;a href=&quot;https://twitter.com/richhickey&quot;&gt;@richhickey&lt;/a&gt;&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href=&quot;https://twitter.com/dhh/status/461212841807462400&quot;&gt;April 29, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Таким образом я и Дэвид. Или Дэвид и я, как будет менее провокационно? &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; Мы вообщем с Дэвидом считаем, что хороший дизайн приложения
важнее покрытия тестами. А что такое хороший дизайн? Хм. Кто знает.&lt;/p&gt;

&lt;p&gt;PS: Чтобы пост был не совсем бесполезным поделюсь, что мы используем &lt;a href=https://circleci.com/&gt;CirleCI&lt;/a&gt; - хороший, стабильный CI,
есть бесплатный план с одним контейнером. Вообще я эпизодично пользовался и семафором, и трависом, и вексором, и дженкинсом,
они сейчас все хорошие.
Но для нас CircleCI - проверенно хорош.&lt;/p&gt;

        </description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/22/redo/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/22/redo/index.html</guid>
      </item>
    
      <item>
        <title>Шоты</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/shots/main.jpg&quot; /&gt;
          &lt;p&gt;Для каждой новой ветки, каждого продакшена у нас автоматически
выкатываются тестовые стенды со своими адресами, которые мы называем шотами. На каждый
пуш они соответственно обновляются, когда удаляется ветка - шот тоже удаляется. Это делает кастомный руби-скрипт,
который я написал практически
сразу, как начал работать в Учи.ру. Конечно он с тех пор немного поменялся, но на самом деле не сильно.&lt;/p&gt;

&lt;p&gt;Основная идея была в том, что бы ни в коем случае не показывать результат с машины разработчика.
Эта идея сохранилась до сих пор. Все внутренние
демки и тестированием мы всегда делаем на шотах. Работоспособность шота дает высокую гарантию, что ветка после мержа будет работать
и на продакшене, код не потеряется в случае поломки жесткого диска, да и вообще кто знает какое там окружение на локальной машине.&lt;/p&gt;

&lt;p&gt;Теперь откуда корни. Саму идею я взял из стартапа компании &lt;a href=&quot;http://evrone.ru&quot;&gt;Evrone&lt;/a&gt;, к сожалению не могу его
нагуглить, а название &amp;quot;шот&amp;quot; с митапа &lt;a href=https://badoo.com/&gt;Баду&lt;/a&gt;, на котором как-то был. Очень приятное и звучное.&lt;/p&gt;

&lt;p&gt;Шоты у нас все любят и знают, что они значат. Что на них можно можно безопасно менять что хочется, но также к ним
нужно относится со всей ответвенностью, так как одобренный
шот напрямую попадает на продакшен.
Поэтому когда Хероку, по-моему в
этом году, написала как здорово создавать тестовые версии продакшенов из девелоперских веток (по-моему у них это называется Heroku
Pipelines, но точно не скажу, не пользовался), я только ухмыльнулся - конечно здорово, мы так уже четыре года делаем &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;.&lt;/p&gt;

        </description>
        <pubDate>Wed, 21 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/21/shots/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/21/shots/index.html</guid>
      </item>
    
      <item>
        <title>Два принципа</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/two-principe/main.jpg&quot; /&gt;
          &lt;p&gt;В жизни я стараюсь следовать двум принципам:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;телефон не должен звонить;&lt;/li&gt;
&lt;li&gt;&lt;a href=https://www.artlebedev.ru/kovodstvo/sections/167/&gt;метод прогрессивного джипега&lt;/a&gt; Артемия Лебедева.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Первый принцип означает, что с работы не должно быть звонков в нерабочее время, а для этого
нужно либо все хорошо наладить, либо, что еще надежнее, скрывать свой номер телефона. Второй способ
у нас почему-то не одобряется, поэтому я стараюсь идти по первому пути &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Ну а метод прогрессивного джипега - по-моему абсолютно гениальный способ выполнения многих дел,
особенно в IT. Если задача сделана за пару дней с нулевой прожаркой, ее не надо согласовывать, планировать,
утверждать и так далее. Можно просто показать и обсудить результат. Получая быстро конечные формы решения, можно
практически полностью ускользнуть из лап бюрократии, которая есть в любой, даже самой хорошей компании.&lt;/p&gt;

        </description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/20/two-principe/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/20/two-principe/index.html</guid>
      </item>
    
      <item>
        <title>Как заходить на сайт</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/visit/main.jpg&quot; /&gt;
          &lt;p&gt;Вообще разработчик вряд ли будет профессионально знать все тонкости командной строки
(например я каждый раз ищу в интернете, как сделать
в цикл или проверку условия на баш-скрипте и есть подозрение, что каждый раз нахожу новый вариант),
но некоторые хитрости знать очень полезно. Например
как можно зайти на сайт, если кажется, что что-то работает не так.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl -v https://yandex.ru&lt;/code&gt; - даст много полезной информации о сертификате, заголовках, редиректах и так далее.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ab -c10 -n100 https://yandex.ru/&lt;/code&gt; - зайти громко, полезно если вы хотите увидеть факт запроса в логах (научил меня этому приему &lt;a href=http://evtuhovich.ru&gt;Иван Евтухович&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openssl s_client -connect yandex.ru:443&lt;/code&gt; - выводит цепочку сертификатов, пригодится если есть подозрение, что установлен неправильный сертификат (из копилки непревзойденного &lt;a href=https://twitter.com/whitew1nd&gt;Юрия Игнатова&lt;/a&gt; из Express42, вообще Юра умеет писать из головы такие хитрые openssl-команды, что я даже не пытаюсь повторить).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Таким образом отладку любого ендпойнта обычно начинаю с одной из этих команд. Конечно
еще помогает &lt;code&gt;curl&lt;/code&gt; во всех его других проявлениях, но нужные опции,
кроме пожалуй &lt;code&gt;-H&lt;/code&gt;, &lt;code&gt;-X&lt;/code&gt; я читаю в мане или гуглю.&lt;/p&gt;

        </description>
        <pubDate>Mon, 19 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/19/visit/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/19/visit/index.html</guid>
      </item>
    
  </channel>
</rss>
