<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Блог, милый блог. Новая история каждый будний день.</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Четвертое тело</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/4_tela/main.jpg&quot; /&gt;
          &lt;p&gt;Одна из проблем терраформа, как я писал, заключается в том, что вы работаете с тремя сущностями:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tf-скрипты — это то, что вы хотите видеть;&lt;/li&gt;
&lt;li&gt;файл состояния — это то, как выглядит инфраструктура по мнению Terraform;&lt;/li&gt;
&lt;li&gt;реальное состояние дел — как на самом деле выглядит инфраструктура.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как небесной механике задача &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D1%82%D1%80%D1%91%D1%85_%D1%82%D0%B5%D0%BB&quot;&gt;трех тел&lt;/a&gt; в аналитическом виде не решается, так и терраформ со своими тремя сущностями
оставляет повод для беспокойства, а что если кто-то ручками заведет
сервер или dns-запись? Не со злобы, а просто так вышло. Этот сервер или эта запись не попадет в состояния терраформа. Раздражает.&lt;/p&gt;

&lt;p&gt;Чтобы вернуть себе полное чувство контроля над инфра, я ввел в систему четвертую сущность - написал специальный руби-скрипт (99%
проблем в жизни решается специальным руби-скриптом кстати &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), который запускаю ручками время от времени. Этот скрипт скачивает
все DNS-записи, полную структуру опенстека (сети, диски, сервера) и сравнивает результат с файлами состояния. Если различий
нет, то значит, каждый объект управляется терраформом и соответственно лежит в красивом виде в репозитарии as a code. Это очень приятно
осознавать.&lt;/p&gt;

        </description>
        <pubDate>Wed, 23 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/23/4_tela/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/23/4_tela/index.html</guid>
      </item>
    
      <item>
        <title>Array True</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/array_true/main.jpg&quot; /&gt;
          &lt;p&gt;Я читаю довольно много блогов и разных статей, обычно авторы описывают как делать правильно и красиво, поэтому я люблю
рассказывать
как делать не правильно, но быстро и эффективно. Писать про костыли и хаки - совершенно безконкурентное занятие.
Когда мне говорят, что это испортит кодовую базу, я отвечаю, что всегда
нужно рассматривать еще вариант, а вдруг не испортит. Нужно быть оптимистом &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Ну и потроллить маленько всегда
приятно, это расширяет сознание.&lt;/p&gt;

&lt;p&gt;Так вот, в рейлс many-to-many в принципе принято делать через доп-таблицу. Но если вы отважный хакер, без стыда и совести,
то можно сделать так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;products&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;owner_ids&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В модели:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;owners&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@owners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Во вьюхе формы:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-slim&quot; data-lang=&quot;slim&quot;&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:owner_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;select2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Честно скажу, я не вижу ничего особо криминального так делать даже в серьезном продакшене (если джойны не нужны и таблицы маленькие).
Но у меня уже большая деформация,
так как рейлс-фич уже давно не писал, а разобраться могу, если жизнь заставит, практически в любом коде. В вопросах стиля себе
уже не доверяю. Но написать такой many-to-many в режиме хакантона имхо проще классического (у нас давно работает в одной утилитке).
Прокатит это или нет - 50 на 50.&lt;/p&gt;

        </description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/22/array_true/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/22/array_true/index.html</guid>
      </item>
    
      <item>
        <title>Управляем «Виртуальным приватным облаком» с помощью Terraform</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/terraform_plus_selectel/main.jpg&quot; /&gt;
          &lt;p&gt;По предложению сотрудников Селектела написал &lt;a href=&quot;https://blog.selectel.ru/gostevoj-post-upravlyaem-virtualnym-privatnym-oblakom-s-pomoshhyu-terraform/&quot;&gt;гостевой пост про терраформ&lt;/a&gt;. Уф, непросто это было, не помню когда в последний раз что-то подобное по объему писал.
Потратил около 15-20 часов и еще время, которые потратили сотрудники на правку и вычитку. Спасибо 
&lt;a href=&quot;https://blog.selectel.ru/author/yemelianov/&quot;&gt;Андрею Емельянову&lt;/a&gt;, за помощь в
оформлении статьи как по целостности и стилю, так и по грамотности.&lt;/p&gt;

&lt;p&gt;Терраформ, как вы уже заметили, сейчас мой фаворит, но как и с любым другим инструментом 5% времени нужно потратить на его
изучение и 95% - на внедрение в повседневные процессы компании. У нас, я считаю, мы уже внедрили, даже провели внутреннюю мини-конферецию
по использованию. Есть еще серия хитростей, как можно облегчить использование, которые я не успел раскрыть в статье, буду потихоньку
рассказывать.&lt;/p&gt;

        </description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/21/terraform_plus_selectel/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/21/terraform_plus_selectel/index.html</guid>
      </item>
    
      <item>
        <title>Тайм менеджмент</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/timeman/main.jpg&quot; /&gt;
          &lt;p&gt;Пришло время говорить о самой важной вещи - личной продуктивности. Как и у любого уважаемого блоггера у меня
есть свои секретики (кручусь-с как говорится &lt;img class=&#39;emoji&#39; title=&#39;:stuck_out_tongue_winking_eye:&#39; alt=&#39;:stuck_out_tongue_winking_eye:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f61c.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;). Что изучал:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GTD, Архангельский&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Обе книги - классика. Интересно, занимательного, но очень сложно. Честно говоря я вроде и не рискнул хоть что-то попробовать. Очень, очень сложно. А, есть еще жесткая жесть - система Любищева.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ozon.ru/context/detail/id/3373340/&quot;&gt;Тайм-менеджмент для системных администраторов&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Книжка классная, мне
понравилась. Из нее прижилось, что нужно записывать, все что обещал пока шел по офису.
Очень здорово, что там показан тайм менеджмент не вообще в широком смысле,
а в конкретном случае для работы, когда часто отвлекают, а надо
еще и проекты поделать.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/snfocus/pomodoro-technique-illustrated&quot;&gt;Pomodoro Technique Illustrated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Честно купил электронную книгу и прочитал. Сама система никак не прижилась, хотя регулярные перерывы я, конечно, стараюсь
делать. Запомнил оттуда бинарный тудулист. Это тудулист в котором одна задача (или ноль). Вспоминаю
эту идею в минуты когда не знаю, что делать прямо сейчас.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Максим Дорофеев - &lt;a href=&quot;http://mnogosdelal.ru/slidecasts/dovedenie-del-do-kontsa/&quot;&gt;Доводить дела до конца&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Честно говоря все видосы я не досмотрел до конца, хотя хотел &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;, но мне очень понравился докладчик и три принципа
(формулировки, списки,
регулярные обзоры) я использую. Действительно удобно держать список крупных задач, но не разбивать их на 100 мелких сразу же,
а отколоть одну задачку, потому вторую и так потихоньку двигаться.&lt;/p&gt;

&lt;p&gt;В качестве софтовой поддержки своей системы эффективности уже два года использую &lt;a href=&quot;https://todoist.com&quot;&gt;тудуист&lt;/a&gt; и нещадно
троллю Тимура. Когда я спросил какую тудушницу скачать, он сказал, что конечно вундерлист,
но есть еще тудуист, там функционал плохой. Я выбрал
тудуист и всегда говорю, что Тимур посоветовал.&lt;/p&gt;

&lt;p&gt;Но вообще эффективно получается работать, когда нравится то, что делаешь, и неэффективно когда не нравится.&lt;/p&gt;

        </description>
        <pubDate>Fri, 18 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/18/timeman/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/18/timeman/index.html</guid>
      </item>
    
      <item>
        <title>Кладовка и натянутый трос</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/kladovka/main.jpg&quot; /&gt;
          &lt;p&gt;Вообще идеальный код должен быть как натянутый трос - удаление любой строчки должно что-нибудь ломать.
Такой код легко поддерживать и развивать. В реальной жизни естественно так не получается, поэтому
приходится пользоваться метафорой кладовки. Ну такая, кладовка обычная, в которую закидываешь что-нибудь
наверх и быстро-быстро закрываешь. Все понимают как это выглядит? А когда открывашь, то надо
как японский воин одну руку держать над головой, вторую перед собой и быть готовым ко всему.
Так и с кодом.
Не бывает плохого кода, бывает ситуация, когда его плохо засунули в пыльный угол.&lt;/p&gt;

&lt;p&gt;Чемпион по удобству засовывания - это конечно SCSS. Обожаю его. Досточно завернуть все вот это,
что накопилось в какое-нибудь &lt;code&gt;body.legacy5 { ... }&lt;/code&gt;, проставить нужный класс в лайауте или вьюхах
и начать новую жизнь даже с теми же стилями.&lt;/p&gt;

&lt;p&gt;В рейлс нужно помнить, что если лайаут стал совсем плох, всегда можно начать новый, перетащив
туда только то-что нужно. Лайаутом можно управлеть на любом уровне - для всего приложения, для
контроллера, для набора экшена или даже в методе &lt;code&gt;render&lt;/code&gt;, поэтому можно тихонечко переходить
на новый лайаут и в финале удалить старого монстра (хотя новый в этот момент может оказаться
не лучше, но хотя бы понятно что делать).&lt;/p&gt;

&lt;p&gt;И напоследок в Рейлс - очень удобно организовывать неймспейсы. Практически любой код можно
аккуратно засунуть в какое-нибудь &lt;code&gt;Legacy2::&lt;/code&gt; и потихоньку вытеснять из проекта. Я когда-то давно
даже писал пост, какая магия Рейлс создает неймспейс &lt;code&gt;Foo::Bar::&lt;/code&gt;, если файл лежит например в
&lt;code&gt;app/components/foo/bar/some_file.rb&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/17/kladovka/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/17/kladovka/index.html</guid>
      </item>
    
      <item>
        <title>Для хранения йобибайта данных возьмите 1024 зебибайтных диска</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/mib/main.jpg&quot; /&gt;
          &lt;p&gt;Как известно &lt;strong&gt;йобибайт&lt;/strong&gt; - это &lt;code&gt;2**80&lt;/code&gt; по версии МЭК. Зебибайт, Пебибайт, Тебибайт - все это есть, в &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D0%B3%D0%B0%D0%B1%D0%B0%D0%B9%D1%82&quot;&gt;википедии&lt;/a&gt; написано (или более точная версия в &lt;a href=&quot;http://lurkmore.to/%D0%99%D0%BE%D0%B1%D0%B8%D0%B1%D0%B0%D0%B9%D1%82&quot;&gt;лурке&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Но вообще эта тема стремных обозначений величин меня всегда раздражала. Наверняка есть какая-то большая
история почему пропускную способность меряют в битах, но домашний бытовой интернет для сидения в контактике и качания фильмов
зачем мерять в битах в секунду? Никогда не понимал этого прикола, всегда в голове делил на 10 и все тут.&lt;/p&gt;

&lt;p&gt;Так вот, вообще есть хинт (кто-то мне рассказал), что маленькое &lt;code&gt;b&lt;/code&gt; - это биты, а большое &lt;code&gt;B&lt;/code&gt; - байты. Поэтому &lt;code&gt;MiB&lt;/code&gt; или &lt;code&gt;MB&lt;/code&gt; - это
мегабайты, а &lt;code&gt;Mb&lt;/code&gt;, извините, уже мегабиты. А &lt;code&gt;мега-&lt;/code&gt; или &lt;code&gt;меби-&lt;/code&gt; уже без разницы, никогда не сталкивался с ситуацией, где бы это было важно.&lt;/p&gt;

        </description>
        <pubDate>Wed, 16 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/16/mib/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/16/mib/index.html</guid>
      </item>
    
      <item>
        <title>Рефакторинг</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/refactoring/main.jpg&quot; /&gt;
          &lt;p&gt;Рефакторинг тема как известно тонкая, поэтому сразу скажу - к переписыванию работающего продакшен-кода я отношусь
отрицательно, как бы это не называлось. Правило &amp;quot;работает - не трогает&amp;quot; достаточно хорошо проверено временем.&lt;/p&gt;

&lt;p&gt;Сейчас постараюсь пояснить, как мыслю. Представьте, что мы на оси времени находимся
в точке &lt;code&gt;А&lt;/code&gt;. Единственная объективная реальность - это тот код, который сейчас находится на продакшене
(этим кстати мне нравится гитхаб-флоу, мастер - всегда в продакшене, в ветках -
что хочешь то и делаешь, дело личное, точка опасности - мерж пул реквеста в мастер). Так вот в точке
&lt;code&gt;А&lt;/code&gt;, глядя на наш продакшен, мы видим проблемы кода и всегда примерно понимаем как выглядит точка &lt;code&gt;B&lt;/code&gt;, 
в которой сегодняшний функционал был бы &amp;quot;идеально&amp;quot; выражен в коде.&lt;/p&gt;

&lt;p&gt;Я уверен, что большая ошибка начинать движение в точку &lt;code&gt;B&lt;/code&gt; (в принципе это и есть рефакторинг -
изменение кодовой базой без изменения функционала). Время то движется вперед
и вы оказываетесь в точке &lt;code&gt;C&lt;/code&gt; с устаревшим кодом (&amp;quot;идеальным&amp;quot; кодом на момент &lt;code&gt;A&lt;/code&gt;). В процессе движения
выяснится, что точка &lt;code&gt;B&lt;/code&gt; - тоже не совсем хороша. В голове - идея была хорошая, а в
реализации оказалось не очень. Тогда начинаете движение в точку &lt;code&gt;B&amp;#39;&lt;/code&gt;, потом в &lt;code&gt;B&amp;#39;&amp;#39;&lt;/code&gt; и так далее. Поэтому переписывание
продакшен кода в моей системе ценности - в большинстве случаев ошибка, это работа на прошлое.&lt;/p&gt;

&lt;p&gt;Что я предлагаю вместо этого. Допустим мы продолжим пилить новые фичи как сегодня. То наш код
шатко-валко, вместе с нами, доползет до точки &lt;code&gt;C&lt;/code&gt;. И для этого горемыки, так же будет
&amp;quot;идеальный&amp;quot; код - точка &lt;code&gt;D&lt;/code&gt;. Естественно это не точка (как и впрочем все остальные точки - не точки), это
облачко возможных хороших реализаций той системы, которая будет в момент &lt;code&gt;C&lt;/code&gt;.
Так вот я твердо уверен, что &lt;strong&gt;нужно менять не сегодняшний работающий код, а менять
привычки, которые приведут проект в более здоровую точку &lt;code&gt;D&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;У меня есть такая аналогия. Допустим человек решил привести себя в форму. Можно поступить хирургически, радикально. Быстро - но
много побочных эффектов, жесткий отходняк. Либо человек меняет привычки: разбирается с режимом дня,
правильно питается, регулярно занимается в зале.
То есть
по факту он ведет себя уже, прямо сейчас, как здоровый человек, но сегодняшнее состояние пока не очень.&lt;/p&gt;

&lt;p&gt;Поэтому, как бы код не был плох, я считаю,
что нужно прежде всего разобраться какие привычки довели его до такого состояния и что нужно поменять, чтобы привести его
со временем в порядок.&lt;/p&gt;

        </description>
        <pubDate>Tue, 15 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/15/refactoring/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/15/refactoring/index.html</guid>
      </item>
    
      <item>
        <title>Убить Базу Билла</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/kill-db/main.jpg&quot; /&gt;
          &lt;p&gt;У нас каждую ночь в спец енвайроменте поднимаются все продакшены базы из бэкапов. Это приследует несколько
целей: проверить, что в принципе из бэкапов можно восстановится, а так же аналитики делают
некоторые ad hoc запросы без доступа на продакшен и привлечения программистов.&lt;/p&gt;

&lt;p&gt;Для экономии места сохраняются две или три самых свежих базы, а остальные удаляются. Стандартный
&lt;code&gt;dropdb&lt;/code&gt; не удалит базу, если к ней остались коннекшены, в интернетах советуют рестартить постгрес
целиком, но это немного овер даже для тестовой базы. Решение, которое мне больше всего нравится, выглядит
так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;psql &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; -c&lt;span class=&quot;s1&quot;&gt;&amp;#39;SELECT pg_terminate_backend(pid) FROM pg_stat_activity&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            WHERE pid &amp;lt;&amp;gt; pg_backend_pid();&amp;#39;&lt;/span&gt;
dropdb &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вроде работает хорошо.&lt;/p&gt;

        </description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/14/kill-db/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/14/kill-db/index.html</guid>
      </item>
    
      <item>
        <title>Подготовка компьютера к работе</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/prepare-pc/main.jpg&quot; /&gt;
          &lt;p&gt;Когда-то давно я настраивал винду и линукс под себя, ставил нескучные обои и делал кучу тонких настроек под себя. А потом, в какой-то момент
стал наоборот любить максимально стандартные настройки. Более того где-то раз в год я переставляю OS с нуля и проверяю какими вредными
привычками или лишним софтом оброс за это время. Во время облаков, смузи и тотального джаваскрипта так можно делать. Документы у меня в гугл
драйв, фотошоп не нужен (да и то вроде сейчас легко по подписке ставится), настройки вима - на гитхабе, а больше ничего и не надо для счастья.&lt;/p&gt;

&lt;p&gt;Кроме того я написал скриптец, который накатывает необходимые файлы и ключи. Текст его не буду приводить, это просто портянка на баше (не на руби,
так как в момент запуска на свежей машине, руби может еще и не быть). Он берёт шифрованный архив с дропбокса и раскадывает все возможные &lt;code&gt;.bash_profile&lt;/code&gt;,
&lt;code&gt;.gitconfig&lt;/code&gt;, &lt;code&gt;vpn&lt;/code&gt;-ключи и прочее. Шифрование сделал по типу ансибловловского &lt;code&gt;vault.key&lt;/code&gt;, чтобы магия сработало рядом со скриптом синхронизации нужно положить файл
с ключом.&lt;/p&gt;

&lt;p&gt;Благодаря привычке работать на стандартной конфигурации я совершенно спокойно перехожу с рабочего компьютера на домашний и обратно
(главное не забывать часто комититься, чтобы файлы не зависли между небом и землей), могу работать в убунту, как живой, так и в виртуалке. На телефоне я стараюсь привыкать
только к тем приложениям, которые есть и на iOS, и на андроиде.&lt;/p&gt;

&lt;p&gt;Вообщем борюсь с вендор локом на бытовом уровне. А сколько времени вам понадобится, чтобы продолжить работу на чистом компьютере (с хорошим интернетом мне - меньше часа)?&lt;/p&gt;

        </description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/11/prepare-pc/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/11/prepare-pc/index.html</guid>
      </item>
    
      <item>
        <title>Философское</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/phil/main.jpg&quot; /&gt;
          &lt;p&gt;Всем привет! Блог у меня окончательно превращается в жежешечку. Ну а что вы хотели, про все утилиты я уже рассказал, что мог, новые
появляются не каждый день и тем более использовать я их начинаю не каждый день, ссылки всякие постить не люблю. То есть для блога
остаются только истории из жизни, какие-то профессиональные приемы и мысли. Вот когда первые две категории заканчиваются, начинаются
посты третьего типа. Так что терпите, мыслить люблю &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;.&lt;/p&gt;

&lt;p&gt;Зато не люблю нравоучения и обобщения, как от других, так и от себя, поэтому большая просьба
относится к моим словам именно как историям и мыслям, за жирными скобками именно моего конкретного опыта. Как я могу разбираться
в разработке в целом? Или как надо что-то делать и как не надо? (или кто любой другой?) Я за 12 лет работал всего в трех компаниях. А даже если бы в двадцати? Любое
мнение - субъективное (и это не ругательство, так как означает, что и означает - мнение выраженное субъектом, в мире есть всего пару объективных вещей, там
типа законов Ньютона и прочего, да и то).&lt;/p&gt;

&lt;p&gt;Так вот, еще я не люблю &amp;quot;так положено&amp;quot; или &amp;quot;авторитет так говорит&amp;quot;, проверяю все на свой вкус, самые крепкие знания получаются. Вот откуда я знаю по тысяча и
одно падение продакшена? Гхм. Знаю, ронял &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. И миграции под нагрузкой, и правку кода ручками на продакшене,
и настройка iptables на удаленном сервере, много попробовал
за хипстерскую юность компании и много где отхватил. Так, что могу сказать, гуру не врут (а где-то кстати и врут, мир меняется, принципы тоже, надо проверять).
И опять, что одним хорошо, другим может не подойти. Везде контекст, везде конкретика.&lt;/p&gt;

        </description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/10/phil/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/10/phil/index.html</guid>
      </item>
    
  </channel>
</rss>
