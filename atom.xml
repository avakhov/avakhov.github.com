<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Tech addicted</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Архитектура проводов</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/provod/main.jpg&quot; /&gt;
          &lt;p&gt;В жизни есть вещи, про которые не принято говорить на
конференциях. Простые, топорные, но крайне рабочие схемы. Одна из таких схем - 
это архитектура проводов (название - мое &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;).&lt;/p&gt;

&lt;p&gt;Думаю вы замечали, что в любом офисе, на улице, в подъездах
и еще много где
скапливается огромное
количество проводов. Никто не хочет разбираться нужен ли каждый конкретный провод или нет,
всегда проще сверху протянуть новый. Такой принцип достаточно хорошо и долго работает, хотя
выглядит это, конечно, не очень.&lt;/p&gt;

&lt;p&gt;Аналогичный подход используется в некоторых очень важных местах программного кода, когда
ключевый метод вызывается много где, но при этом все равно продолжает развиваться и
сохраняет обратную совместимость. В
этом случае для поддержки нового функционала добавляют новые параметры и обкладывают
легаси код условиями, чтобы на старых параметрах код работал как раньше.&lt;/p&gt;

&lt;p&gt;Такой подход я встречал в больших и страшных C++-приложениях.
Такой прием за четыре года разработки &lt;a href=&quot;https://uchi.ru&quot;&gt;Учи.ру&lt;/a&gt; мы использовали один раз,
но со всей душой. Метод принимает 48 параметров (в виде ключей хэша, но все-таки).&lt;/p&gt;

&lt;p&gt;Главное, при использовании архитектуры проводов, важно помнить, что в один прекрасный день
придется срезать все провода и проложить их заново (кстати в случае нашего метода-рекордсмена
мы как раз этим занимаемся).&lt;/p&gt;

        </description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/01/provod/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/01/provod/index.html</guid>
      </item>
    
      <item>
        <title>Троешники рулят</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/tri/main.jpg&quot; /&gt;
          &lt;p&gt;В школе я был многие годы, пожалуй, отличником. К счатью без красного диплома, но все таки в
основном были пятерки.
В институте в зачетке уже было 90% четверок. И только во взрослой жизни я наконец
скатился на тройки.&lt;/p&gt;

&lt;p&gt;Для меня троешник - это человек, который специализируется в одном-двух направлениях, 
а на остальные кладет &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Поэтому,
в школьных аналогиях, у него
за год выходит
2-3 пятерки по его любимым предметам, а остальные тройки. Такой ребенок образцово переходит
из класса в класс, как-то там сдает русский язык с биологией и большую часть времени занимается тем,
что ему
нравится.&lt;/p&gt;

&lt;p&gt;Сейчас у меня очень узкие интересы, каждый день читаю твиттер, пачку рсс, статьи, книги,
на 99% вокруг IT и совершенно не интересуюсь политикой, спортом, сортами вина и многими другими
вещами. Кино я люблю кассовое, чтобы было смешно и тупо, совершенно колхозные вкусы. На совещаниях
частенько сижу в телефоне, рисую каракули или просто скучаю. Много раз не приходил на внутренние
встречи, опаздывал на собеседования, пропадал в интернете и ленился. В быту
я совершенно бесполезен, даже не буду об этом говорить.&lt;/p&gt;

&lt;p&gt;Но те вещи, которые меня цепляют, сейчас это в основном всякие штуки, связанные с
организацией разработки в целом,
я готов делать и думать о них круглые сутки. За это, как кажется, мне
прощают слабости в других вопросах.&lt;/p&gt;

&lt;p&gt;Так жить гораздо приятнее -
концентрироваться на интересном и спихивать все остальное, лишь бы отстали.
Троешники рулят. Когда я стал
троешником, я стал по настоящему счастлив.&lt;/p&gt;

        </description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/31/tri/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/31/tri/index.html</guid>
      </item>
    
      <item>
        <title>Магия руби</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ruby/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я изучаю что хранится в базе данных, то очень люблю использовать рейлсовые конструкции
примерно такого вида &lt;code&gt;User.&amp;lt;...&amp;gt;.group(:region).count&lt;/code&gt;.
Однако для рубишных массивов не знал изящного решения, как посчитать сколько раз встречается
каждый элемент, и много раз писал примерно так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_h&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {1=&amp;gt;2, 2=&amp;gt;1, 3=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Выглядит не очень красиво.&lt;/p&gt;

&lt;!--- &lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt; ---&gt;

&lt;p&gt;Наш коллега &lt;a href=&quot;https://github.com/vbelov&quot;&gt;Владислав Белов&lt;/a&gt; предложил
отличный вариант
(правда нужны руби &amp;gt;= 2.2):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:itself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {1=&amp;gt;2, 2=&amp;gt;1, 3=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Красота &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;

        </description>
        <pubDate>Tue, 30 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/30/ruby/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/30/ruby/index.html</guid>
      </item>
    
      <item>
        <title>Новая блестящая идея</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/i_have_idea/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я придумываю новую блестящую идею (на мой вкус естественно &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), то первым делом захожу
в интернет и ищу статьи от тех, кто уже сделал что-то подобное.&lt;/p&gt;

&lt;p&gt;Если не получается найти похожее, то практически наверняка идея не очень хорошая.
Ну действительно, что можно в разработке придумать такого, что
не пришло в голову кому-нибудь еще?&lt;/p&gt;

&lt;p&gt;А вот реализация любой идеи - это уже дело полностью индивидуальное.
Написать программу, даже на 100 строк, можно совершенно бесчисленно-комбинаторным числом способов.&lt;/p&gt;

        </description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/29/i_have_idea/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/29/i_have_idea/index.html</guid>
      </item>
    
      <item>
        <title>Красота кода</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/beauty/main.jpg&quot; /&gt;
          &lt;p&gt;После того как я поработал в проекте из нескольких десятков миллионов строк на C++, представления
о красоте
програмного кода у меня сильно поменялись. Чисто технически невозможно сделать так, чтобы на таких
масштабах сотни
разработчиков создавали &amp;quot;красивый код&amp;quot; с точки зрения перфекционизма.
Я долго думал над метафорой, которая бы точнее
описывала мое сегодняшнее отношение к данному вопросу, пока нашел только такую.&lt;/p&gt;

&lt;!--- &lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt; ---&gt;

&lt;p&gt;Красота кода (для меня) - это красота кирпича и бетана. Каждый кирпич
вблизи не идеальный, в нем дырки разных размеров, потертости и сколы. Однако собранные вместе,
они складываются в роскошные здания или кучу у дороги.&lt;/p&gt;

&lt;p&gt;Для меня верх индустриальной экономии и организации -
павильоны Икеи. Я только на третий раз заметил, что в шоу руме нет потолка, над декоративной
решеткой много метров пустого технического простанства. На пятое посещение понял,
что стрелочки на полу рисуются
с помощью мощных сфокусированных прожекторов.&lt;/p&gt;

&lt;p&gt;Причем сам по себе большой железный ангар не самое красивое решение. Я бы, например, не хотел бы жить
в железном ангаре, ни в маленьком, ни в большом. Но в случае Икеи - это суровый ход,
который очень здорово подходит для их задач.&lt;/p&gt;

&lt;p&gt;Сейчас, для меня код любого достаточно большого программного
продукта - это такая же брутальная штука, как железный ангар Икеи,
с большим количеством технических помещений,
вентилей, решеток и прочих не очень красивых с привычной точки зрения вещей.&lt;/p&gt;

&lt;p&gt;Поэтому последнее время я редко думаю, как правильно
назвать метод, сколько пробелов поставить или что лучше ООП или ФП. Лучше и правильнее то, что позволяет
создать суровую, индустриальную красоту в каждом конкетном взятом проекте.&lt;/p&gt;

        </description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/26/beauty/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/26/beauty/index.html</guid>
      </item>
    
      <item>
        <title>Маленькая тайна грепа</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/grep-it/main.jpg&quot; /&gt;
          &lt;p&gt;Есть вещи, которые очень легко гуглятся, но иногда в голову не приходит их гуглить. Например
я всегда считал, что такая конструкция, вполне нормальная практика:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ps auxww | grep ruby | grep -v grep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Чтобы найти процесс с руби, нужно сначала исключить процесс с грепом, который ищет процесс с руби. Ну
вы понимаете.&lt;/p&gt;

&lt;p&gt;Совершенно случайно наткнулся на изящное решение проблемы, не помню где:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ps auxww | grep [r]uby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В таблице процессов отображается &lt;code&gt;grep [r]uby&lt;/code&gt;, а ищем мы регексп, в котором
первая буква &lt;code&gt;r&lt;/code&gt; и потом строка &lt;code&gt;uby&lt;/code&gt;. Таким образом процесс самого грепа не попадает в поиск. 
Теперь я ищу только так.&lt;/p&gt;

        </description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/25/grep-it/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/25/grep-it/index.html</guid>
      </item>
    
      <item>
        <title>Крон, Великий и Ужасный</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/cron/main.jpg&quot; /&gt;
          &lt;p&gt;Я очень уважаю крон-задачи, это простой и надежный способ запускать регулярные
задания.&lt;/p&gt;

&lt;p&gt;Но каждый раз когда мне нужно в кроне запустить допустим руби-скрипт, я делаю это правильно минимум
с третьего-пятого раза. Например так публикуется новый пост в блог:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PATH=/root/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
23 7 * * 1-5 cd /root/blog &amp;amp;&amp;amp; (echo STARTED_`date &amp;quot;+\%Y-\%m-\%d__\%H-\%M-\%S&amp;quot;` &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; NOCACHE=1 ./publish next &amp;amp;&amp;amp; echo FINISHED_`date &amp;quot;+\%Y-\%m-\%d__\%H-\%M-\%S&amp;quot;`) &amp;gt;&amp;gt; /root/crontab.log 2&amp;gt;&amp;amp;1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Успешно запустил я его только через час. Преклоняюсь перед теми, кто умеет это
делать с первой попытки. Такие люди вообще есть?&lt;/p&gt;

        </description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/24/cron/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/24/cron/index.html</guid>
      </item>
    
      <item>
        <title>Большие апдейты</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/blob/main.jpg&quot; /&gt;
          &lt;p&gt;Один долгий руби процесс у нас пишет логи своего выполнения в базу.&lt;/p&gt;

&lt;p&gt;Сделано было просто и прямолинейно, создали колонку &lt;code&gt;log:text&lt;/code&gt; в таблице скажем &lt;code&gt;jobs&lt;/code&gt; и вот такой
метод логирования:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;safe!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Конструкция исправно работала пару лет и вдруг закончилось дисковое пространство на боксе с базой.
Добавили.
Через некоторое время снова закончилось. Начали разбираться.&lt;/p&gt;

&lt;p&gt;Оказалось, что кто-то добавил отладочной информации и количество записей в лог резко выросло.
Поле &lt;code&gt;log&lt;/code&gt; стало занимать 2-3 мегабайта, новые строки добавляются примерно раз в секунду,
а Postgres устроен так, что UPDATE = INSERT + DELETE, DELETE же не сразу же
освобождает место. То есть мы стали со скоростью несколько мегабайт в секунду забивать диск,
автовакуум не успевал чистить.&lt;/p&gt;

&lt;p&gt;Починили легко. Вынесли лог в отдельную модель и вместо обновления теперь создаем
новую строку в таблице. Добавили пару индексов для скорости доступа и все стало хорошо - 
место на диске заканчиваться перестало. Это решение успешно работает до сих пор.&lt;/p&gt;

        </description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/23/blob/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/23/blob/index.html</guid>
      </item>
    
      <item>
        <title>Переписывать нельзя модифицировать</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/refactoring/main.jpg&quot; /&gt;
          &lt;p&gt;В какой-то книжке прочитал, что программу дешевле переписать с нуля, если нужно модифицировать более 30% исходников.&lt;/p&gt;

&lt;p&gt;С этим я согласен, но еще больше люблю
сделать рабочий каркас в любом случае с чистого листа (в случае рейлс - это начать
новое приложение). И потом перетаскивать куски старого кода, постоянно проверяя, что приложение запускается.
Таким образом генеральное флоу выполнения программы оказывается под контролем и явно видны точки, где управление передается в легаси.&lt;/p&gt;

&lt;p&gt;В качесте приятного бонуса половина кода теряется, как и положено при любом хорошем переезде, новое
приложение становится
гораздо свежее старого.&lt;/p&gt;

        </description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/22/refactoring/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/22/refactoring/index.html</guid>
      </item>
    
      <item>
        <title>Лига лени в гит-конфиге</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/lazy-git/main.jpg&quot; /&gt;
          &lt;p&gt;Чем старше я, тем ленивей становлюсь. Боюсь представить, что будет дальше.&lt;/p&gt;

&lt;p&gt;Недавно в моем &lt;code&gt;.gitconfig&lt;/code&gt; появилась команда, которую я стараюсь использовать пореже... Но она такая клевая... &lt;img class=&#39;emoji&#39; title=&#39;:heart_eyes_cat:&#39; alt=&#39;:heart_eyes_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f63b.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[alias]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# перенес на несколько строк для наглядности, в оригинале она у меня в одной&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;!(git add -A . &amp;amp;&amp;amp; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        git commit -amsaved_at_`date +%Y-%m-%d__%H:%M:%S` &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        git pull --rebase &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        echo &amp;quot;&amp;quot; &amp;amp;&amp;amp; git log -1 --stat) || git pull --rebase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Команда комитит и пушит все что есть, а также подтягивает свежие изменения.&lt;/p&gt;

&lt;!--- Я люблю регулярные сохранения, например блог сохраняю после каждой записи и почти после каждой правки, уже на автомате. А кого можно обмануть десяти командами `git -amfix` подряд? ---&gt;

&lt;p&gt;Название алиаса от слова &lt;code&gt;sYnc&lt;/code&gt;. Букву &lt;code&gt;s&lt;/code&gt; я не стал использоваться, чтобы
не путать с &lt;code&gt;git st&lt;/code&gt; =&amp;gt; &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Fri, 19 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/19/lazy-git/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/19/lazy-git/index.html</guid>
      </item>
    
  </channel>
</rss>
