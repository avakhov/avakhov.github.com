<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Блог, милый блог. Новая история каждый будний день.</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Пальцем по стеклу</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/palec/main.jpg&quot; /&gt;
          &lt;p&gt;Очень не люблю слово &amp;quot;баг&amp;quot;. Мне кажется, что там где баг, там и глюк, и где-то рядом &amp;quot;программисты -
пид*расы&amp;quot;. &amp;quot;Дефект&amp;quot; лишено негативного смысла в моем сознании. Если стол с дефектом - не обязательно
это столяр ошибся, может грузчики уронили (у нас все работает, это админы не правильно окружение
настроили). Баги - программисты плохо кодят, дефекты - это часть процессов, приоритеты, триаж и осмысленное управление.&lt;/p&gt;

&lt;p&gt;&amp;quot;Хотелки&amp;quot; и &amp;quot;плюшки&amp;quot;. Ыыыы. Не перевариваю. По-моему это унижение всех. Если бизнес вместо
требований, подкрепленных знанием рынка, метриками, опытом и интуицией выдает &amp;quot;хотелки&amp;quot;, то пусть
делают их &amp;quot;компьютерщики&amp;quot;, они стоят друг друга.&lt;/p&gt;

&lt;p&gt;А вот написание по-русски и адаптация терминов ухо мне не режет, просто стараюсь приспособится
кому как нравится. Ну сиквел - так сиквел, а эскюель - значит эскюель.
Даже &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot;&gt;википедия говорит&lt;/a&gt;, что неважно как. Все равно как 15 лет
назад я проносил лен-гэ-тэ-ха в голове, так и произношу, другого способа правильно написать
&lt;code&gt;length&lt;/code&gt; я не знаю.&lt;/p&gt;

&lt;p&gt;Да пребудет с вами раби.&lt;/p&gt;

        </description>
        <pubDate>Wed, 30 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/30/palec/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/30/palec/index.html</guid>
      </item>
    
      <item>
        <title>Бюрократия</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/kach/main.jpg&quot; /&gt;
          &lt;p&gt;Сегодня покачаю лодку в другую сторону для разнообразия.
Вообще я всегда за такое фри, креатив и отсутствие отчетов, но однако есть секретное оружие, которое
решает все проблемы разработки и не только, это - бюрократия.
Если что-то не ладится - значит не хватает формализма.&lt;/p&gt;

&lt;p&gt;Эту силу я познал в &lt;a href=&quot;http://www.cqg.com/&quot;&gt;CQG&lt;/a&gt;, где были очень сильные и формальные процессы,
так как работа
идет с большими деньгами. Если задача была чуть более сложная, чем совсем очевидная, она всегда была
у простого разработчика одна. Максимум три. И когда задача всего одна, все равно нужно же как-то
отчитываться, что по ней сделал. Даже если было непонятно ничего, то можно было как минимум
пообщаться с постановщиком задачи, тимлидом, архитектором, человеком из матрицы компетенций, написать
несколько писем и пару документов. И чудо, если сделать это даже в самой безнадежной и сложной
проблеме, она сдвинется с места. И будет медленно двигаться.&lt;/p&gt;

&lt;p&gt;Естественно обратная сторона любого формального процесса - это стоимость. Когда разработчик
три недели пишет HLD - это довольно дорого, и компании стараются организовать дела так, чтобы
можно было &amp;quot;чик, чик и в продакшен&amp;quot;.
Баланс между формализмом и процессной свободой зависит от многих факторов и мне кажется немножко
является искусством. В продуктовой компании, конечно, формализма может быть меньше, если фича
успешная - ТЗ и вроде как не нужно, а провальная - не поможет. В разработке на заказ начинает
играть аджайл, спринты, постоянная визуализация результата.&lt;/p&gt;

&lt;p&gt;Также из формализма в легкость двигаться сложно, вон как крупным компаниям тяжело, а попасть в формализм
легко.
При любом усложнении системы, будет возрастать количество дефектов, разных непонятных ситуаций
 и естественным желанием будет внедрить регулирование: не катить по пятницам, проверять
каждую строчку кода минимум двумя специалистами и так далее. Назад уже будет сложно, если появится
много правил.
Поэтому бюрократия пускай мощное оружие и совершенное, но пользоваться им стоит аккуратно.&lt;/p&gt;

        </description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/29/kach/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/29/kach/index.html</guid>
      </item>
    
      <item>
        <title>ConcourseCI - отличная идея, подозрительная реализация</title>
        <description>
          
          &lt;p&gt;По совету коллеги изучил СoncourseCI, CI нового поколения. Идея - просто бомба, пайплайны, которые 
собираются в модных yaml-файлах (кстати у ямл-файлов второе рождение, в рейлс они помню были
очень давно, потом все захватил JSON и вот снова ямл, который на самом деле включает
в себя JSON) и позволяют делать потенциально любые операции с вашими
исходниками: релизить, версионировать, деплоить, выкладывать на S3 и все остальное, что может пригодится
для CI/CD. &lt;/p&gt;

&lt;p&gt;Но вот реализация, уж на что я спокоен ко всякому, но это, друзья, перебор. Докер контейнер, в котором
бинарь на го в 250 мегабайт, который при установки выстреливает из себя пучок других бинарей и докер
демон, который запускает докеры, в которых собираются докеры. Ну вообщем эта вся конструкция
без проблем запускается, прилично работает на тестовых примерах и
в принципе собрал пару пайплайнов, которые потенциально могли бы нам
пригодится, но психологически работать с такой системой не очень приятно. Не понятно как подлезть к
конкретному контейнеру когда что-то пойдет не так, невнятная работа с кэшированием.
Можно, конечно, все решить, если жизнь заставит,
но добровольно пока в это ввязываться не хочу.&lt;/p&gt;

&lt;p&gt;СoncourseCI, уверен, - будущее, и поиграть с ним точно стоит, освежает мышление. С внедрением
спешить не будут, подожду 
более простую реализацию или попробую еще раз попозднее.&lt;/p&gt;

        </description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/28/cc/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/28/cc/index.html</guid>
      </item>
    
      <item>
        <title>Процессы для обычных людей</title>
        <description>
          
          &lt;p&gt;Мне очень интересны процессы разработки ПО, все-таки эта тема имеет прямое отношение к сегодняшней деятельности, но в то же время
не могу сказать, что являюсь фанатом какой-то методики. Недавно понял, что не хватает большинству статей и книг по процессам -
признания факта, что человек слаб, а обстоятельства непредсказуемые. И это, я уверен, не отдельный момент, а в принципе постоянное явление.
Мне кажется процессный тупик, это когда люди решили, что описали весь мир в его многообразии или до сих пор верят, что смогут, добавив
еще пару пунктов в регламент.&lt;/p&gt;

&lt;p&gt;Чтобы все было по процессам, даже в ЧП, мы стараемся использовать самые мягкие версии правил. Например не принято комитить в
мастер, но если очень надо - то можно. Или у нас сейчас нельзя создавать или менять боксы руками (все через терраформ), но если
очень хочется, то пожалуйста. Есть процедуры как загнать ручные изменения обратно в состояние. В целом желательно фиксить эксепшены сразу,
рекомендуется реагировать на предупреждения мониторинга, будет лучше не забывать оплатить домены и сертификаты вовремя (а то будет,
как иногда бывает).&lt;/p&gt;

&lt;p&gt;Такие мягкие правила невозможно нарушить, поэтому мы 100%-процессная команда. А степень мягкости можно уже варьировать по обстоятельствам.
Живой
продакшен - вообще не надо ломать, а внутренние поддерживаются по принципу &amp;quot;что упало у студента, то упало на газетку&amp;quot;.&lt;/p&gt;

&lt;p&gt;Мне кажется такой подход хорошо сочетается
с жизнью. Мы все знаем и соблюдаем, что нельзя, скажем, переходить дорогу на красный свет, или выпивать во вторник, но бывает такая
ситуация или такой жизненный этап, что и нужно. Программирование - это же и есть жизнь. Просто другая грань. Здесь все также.&lt;/p&gt;

        </description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/25/slab/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/25/slab/index.html</guid>
      </item>
    
      <item>
        <title>Постпрограммистическое общество</title>
        <description>
          
          &lt;p&gt;Есть фраза, что &amp;quot;информация самое ценное, что есть&amp;quot; или как-то так. Мне кажется по-крайней мере в разработке это уже не совсем так.
Информации сейчас очень много, самой разной. И часто более ценно - уметь с этой информацией работать и своевременно использовать.
Я как вспомню, как мало было книг по C++ 10 лет назад, не было StackOverflow, ужас. Сейчас конечно с информацией полный порядок.&lt;/p&gt;

&lt;p&gt;Недавно понял, что мы живем не только в постинформационном обществе, но и в постпрограммистическом. Сейчас на самом деле
совершенно не важно, какой софт или архитектуру использовать прямо сейчас (ну-ка, что круче Scala, Ruby, Go или Elixir? Давайте
решим прямо сейчас &lt;img class=&#39;emoji&#39; title=&#39;:trollface:&#39; alt=&#39;:trollface:&#39; src=&#39;https://assets.github.com/images/icons/emoji/trollface.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), важна
способность к изменениям.&lt;/p&gt;

&lt;p&gt;Единственный параметр, который меня тревожит больше всего, это некий коэффициент готовности меняться.
Я не знаю как выразить его явно, это вопрос ощущений, но он включает в себя и величину легаси, и вопросы CI/CD,
количество и возраст компонент, гибкость команды - фактическую и психологическую, скорость разворачивания приложений,
степерь централизации управления, готовность к масштабированию
и многое другое.&lt;/p&gt;

&lt;p&gt;В постпрограммистическом обществе важно, не то где ты находишься сейчас, а как умеешь передвигаться.&lt;/p&gt;

        </description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/24/history/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/24/history/index.html</guid>
      </item>
    
      <item>
        <title>Четвертое тело</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/4_tela/main.jpg&quot; /&gt;
          &lt;p&gt;Одна из проблем терраформа, как я писал, заключается в том, что вы работаете с тремя сущностями:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tf-скрипты — это то, что вы хотите видеть;&lt;/li&gt;
&lt;li&gt;файл состояния — это то, как выглядит инфраструктура по мнению Terraform;&lt;/li&gt;
&lt;li&gt;реальное состояние дел — как на самом деле выглядит инфраструктура.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как небесной механике задача &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D1%82%D1%80%D1%91%D1%85_%D1%82%D0%B5%D0%BB&quot;&gt;трех тел&lt;/a&gt; в аналитическом виде не решается, так и терраформ со своими тремя сущностями
оставляет повод для беспокойства, а что если кто-то ручками заведет
сервер или dns-запись? Не со злобы, а просто так вышло. Этот сервер или эта запись не попадет в состояния терраформа. Раздражает.&lt;/p&gt;

&lt;p&gt;Чтобы вернуть себе полное чувство контроля над инфра, я ввел в систему четвертую сущность - написал специальный руби-скрипт (99%
проблем в жизни решается специальным руби-скриптом кстати &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), который запускаю ручками время от времени. Этот скрипт скачивает
все DNS-записи, полную структуру опенстека (сети, диски, сервера) и сравнивает результат с файлами состояния. Если различий
нет, то значит, каждый объект управляется терраформом и соответственно лежит в красивом виде в репозитарии as a code. Это очень приятно
осознавать.&lt;/p&gt;

        </description>
        <pubDate>Wed, 23 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/23/4_tela/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/23/4_tela/index.html</guid>
      </item>
    
      <item>
        <title>Array True</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/array_true/main.jpg&quot; /&gt;
          &lt;p&gt;Я читаю довольно много блогов и разных статей, обычно авторы описывают как делать правильно и красиво, поэтому я люблю
рассказывать
как делать не правильно, но быстро и эффективно. Писать про костыли и хаки - совершенно безконкурентное занятие.
Когда мне говорят, что это испортит кодовую базу, я отвечаю, что всегда
нужно рассматривать еще вариант, а вдруг не испортит. Нужно быть оптимистом &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Ну и потроллить маленько всегда
приятно, это расширяет сознание.&lt;/p&gt;

&lt;p&gt;Так вот, в рейлс many-to-many в принципе принято делать через доп-таблицу. Но если вы отважный хакер, без стыда и совести,
то можно сделать так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;products&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;owner_ids&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В модели:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;owners&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@owners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Во вьюхе формы:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-slim&quot; data-lang=&quot;slim&quot;&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:owner_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;select2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Честно скажу, я не вижу ничего особо криминального так делать даже в серьезном продакшене (если джойны не нужны и таблицы маленькие).
Но у меня уже большая деформация,
так как рейлс-фич уже давно не писал, а разобраться могу, если жизнь заставит, практически в любом коде. В вопросах стиля себе
уже не доверяю. Но написать такой many-to-many в режиме хакантона имхо проще классического (у нас давно работает в одной утилитке).
Прокатит это или нет - 50 на 50.&lt;/p&gt;

        </description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/22/array_true/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/22/array_true/index.html</guid>
      </item>
    
      <item>
        <title>Управляем «Виртуальным приватным облаком» с помощью Terraform</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/terraform_plus_selectel/main.jpg&quot; /&gt;
          &lt;p&gt;По предложению сотрудников Селектела написал &lt;a href=&quot;https://blog.selectel.ru/gostevoj-post-upravlyaem-virtualnym-privatnym-oblakom-s-pomoshhyu-terraform/&quot;&gt;гостевой пост про терраформ&lt;/a&gt;. Уф, непросто это было, не помню когда в последний раз что-то подобное по объему писал.
Потратил около 15-20 часов и еще время, которые потратили сотрудники на правку и вычитку. Спасибо 
&lt;a href=&quot;https://blog.selectel.ru/author/yemelianov/&quot;&gt;Андрею Емельянову&lt;/a&gt;, за помощь в
оформлении статьи как по целостности и стилю, так и по грамотности.&lt;/p&gt;

&lt;p&gt;Терраформ, как вы уже заметили, сейчас мой фаворит, но как и с любым другим инструментом 5% времени нужно потратить на его
изучение и 95% - на внедрение в повседневные процессы компании. У нас, я считаю, мы уже внедрили, даже провели внутреннюю мини-конферецию
по использованию. Есть еще серия хитростей, как можно облегчить использование, которые я не успел раскрыть в статье, буду потихоньку
рассказывать.&lt;/p&gt;

        </description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/21/terraform_plus_selectel/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/21/terraform_plus_selectel/index.html</guid>
      </item>
    
      <item>
        <title>Тайм менеджмент</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/timeman/main.jpg&quot; /&gt;
          &lt;p&gt;Пришло время говорить о самой важной вещи - личной продуктивности. Как и у любого уважаемого блоггера у меня
есть свои секретики (кручусь-с как говорится &lt;img class=&#39;emoji&#39; title=&#39;:stuck_out_tongue_winking_eye:&#39; alt=&#39;:stuck_out_tongue_winking_eye:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f61c.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;). Что изучал:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GTD, Архангельский&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Обе книги - классика. Интересно, занимательного, но очень сложно. Честно говоря я вроде и не рискнул хоть что-то попробовать. Очень, очень сложно. А, есть еще жесткая жесть - система Любищева.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ozon.ru/context/detail/id/3373340/&quot;&gt;Тайм-менеджмент для системных администраторов&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Книжка классная, мне
понравилась. Из нее прижилось, что нужно записывать, все что обещал пока шел по офису.
Очень здорово, что там показан тайм менеджмент не вообще в широком смысле,
а в конкретном случае для работы, когда часто отвлекают, а надо
еще и проекты поделать.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/snfocus/pomodoro-technique-illustrated&quot;&gt;Pomodoro Technique Illustrated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Честно купил электронную книгу и прочитал. Сама система никак не прижилась, хотя регулярные перерывы я, конечно, стараюсь
делать. Запомнил оттуда бинарный тудулист. Это тудулист в котором одна задача (или ноль). Вспоминаю
эту идею в минуты когда не знаю, что делать прямо сейчас.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Максим Дорофеев - &lt;a href=&quot;http://mnogosdelal.ru/slidecasts/dovedenie-del-do-kontsa/&quot;&gt;Доводить дела до конца&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Честно говоря все видосы я не досмотрел до конца, хотя хотел &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;, но мне очень понравился докладчик и три принципа
(формулировки, списки,
регулярные обзоры) я использую. Действительно удобно держать список крупных задач, но не разбивать их на 100 мелких сразу же,
а отколоть одну задачку, потому вторую и так потихоньку двигаться.&lt;/p&gt;

&lt;p&gt;В качестве софтовой поддержки своей системы эффективности уже два года использую &lt;a href=&quot;https://todoist.com&quot;&gt;тудуист&lt;/a&gt; и нещадно
троллю Тимура. Когда я спросил какую тудушницу скачать, он сказал, что конечно вундерлист,
но есть еще тудуист, там функционал плохой. Я выбрал
тудуист и всегда говорю, что Тимур посоветовал.&lt;/p&gt;

&lt;p&gt;Но вообще эффективно получается работать, когда нравится то, что делаешь, и неэффективно когда не нравится.&lt;/p&gt;

        </description>
        <pubDate>Fri, 18 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/18/timeman/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/18/timeman/index.html</guid>
      </item>
    
      <item>
        <title>Кладовка и натянутый трос</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/kladovka/main.jpg&quot; /&gt;
          &lt;p&gt;Вообще идеальный код должен быть как натянутый трос - удаление любой строчки должно что-нибудь ломать.
Такой код легко поддерживать и развивать. В реальной жизни естественно так не получается, поэтому
приходится пользоваться метафорой кладовки. Ну такая, кладовка обычная, в которую закидываешь что-нибудь
наверх и быстро-быстро закрываешь. Все понимают как это выглядит? А когда открывашь, то надо
как японский воин одну руку держать над головой, вторую перед собой и быть готовым ко всему.
Так и с кодом.
Не бывает плохого кода, бывает ситуация, когда его плохо засунули в пыльный угол.&lt;/p&gt;

&lt;p&gt;Чемпион по удобству засовывания - это конечно SCSS. Обожаю его. Досточно завернуть все вот это,
что накопилось в какое-нибудь &lt;code&gt;body.legacy5 { ... }&lt;/code&gt;, проставить нужный класс в лайауте или вьюхах
и начать новую жизнь даже с теми же стилями.&lt;/p&gt;

&lt;p&gt;В рейлс нужно помнить, что если лайаут стал совсем плох, всегда можно начать новый, перетащив
туда только то-что нужно. Лайаутом можно управлеть на любом уровне - для всего приложения, для
контроллера, для набора экшена или даже в методе &lt;code&gt;render&lt;/code&gt;, поэтому можно тихонечко переходить
на новый лайаут и в финале удалить старого монстра (хотя новый в этот момент может оказаться
не лучше, но хотя бы понятно что делать).&lt;/p&gt;

&lt;p&gt;И напоследок в Рейлс - очень удобно организовывать неймспейсы. Практически любой код можно
аккуратно засунуть в какое-нибудь &lt;code&gt;Legacy2::&lt;/code&gt; и потихоньку вытеснять из проекта. Я когда-то давно
даже писал пост, какая магия Рейлс создает неймспейс &lt;code&gt;Foo::Bar::&lt;/code&gt;, если файл лежит например в
&lt;code&gt;app/components/foo/bar/some_file.rb&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/11/17/kladovka/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/11/17/kladovka/index.html</guid>
      </item>
    
  </channel>
</rss>
