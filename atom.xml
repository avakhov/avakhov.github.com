<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Tech addicted</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Волшебная палочка</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/progress/main.jpg&quot; /&gt;
          &lt;p&gt;Я очень не люблю когда скрипт долго работает и ничего не выводит в консоль, хочется потыкать его
палочкой и узнать жив ли он еще. В качестве такой палочки обычно использую что-нибудь такое:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] processed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;где вместо 100 подбираю параметр, при котором строка печатается раз в несколько секунд. Если
известно общее количество записей, которые нужно обработать, еще нагляднее будет
вывести &lt;code&gt;&amp;quot;#{count} of #{total}&amp;quot;&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Thu, 08 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/08/progress/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/08/progress/index.html</guid>
      </item>
    
      <item>
        <title>Соколиный глаз</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ux/main.jpg&quot; /&gt;
          &lt;p&gt;После нескольких лет работы в вебе, у меня появилось немного вкуса и наблюдательности. Могу различить
несколько видов шрифтов, сразу же вижу когда забыли паддинга добавить и всякие другие штуки.
Каждый раз удивляюсь и радуюсь этому.&lt;/p&gt;

&lt;p&gt;Раньше я был суровым серверным разработчиком, с соответствующими представлениями о прекрасном.
Первый культурный шок вызвал наш генеральный
директор четыре года назад. Он между делом сказал:
&amp;quot;о, у скайпа иконка поменялась, была выпуклая, а стала плоская&amp;quot;. Я
у него спросил: &amp;quot;ты это специально высматриваешь?&amp;quot; Он ответил, что просто в глаза бросилось. &amp;quot;Что за
неведомая магия&amp;quot; - подумал я тогда. А теперь сам вижу.&lt;/p&gt;

&lt;p&gt;А вы замечаете когда у хрома закладки с прямоугольничков меняются на клинышек? Или кнопка закрытия
вкладки была жирненькая, а стала тоненькая? Или шрифт в iOS поменялся?&lt;/p&gt;

        </description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/07/ux/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/07/ux/index.html</guid>
      </item>
    
      <item>
        <title>Любви к руби пост</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ruby2/main.jpg&quot; /&gt;
          &lt;p&gt;Мне очень нравится как руби работает со строками, хэшами, массивами и строками.
Каждый раз испытываю наслаждение,
когда могу сделать что-то полезное, написав всего несколько строк.&lt;/p&gt;

&lt;p&gt;Как-то раз парсил страничку нашей внутренней вики
и в цикле сделал так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{https://github.com\S*}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Подобные конструкции и гораздо более длинные пишу по несколько штук в день. Божественно.&lt;/p&gt;

        </description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/06/ruby2/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/06/ruby2/index.html</guid>
      </item>
    
      <item>
        <title>Мифическая серебряная пуля</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/bullet/main.jpg&quot; /&gt;
          &lt;p&gt;С одной стороны удивительно, как быстро развиваются технологии и мгновенно устаревают знания,
с другой стороны не менее удивительно, что некоторые статьи и книги смотрятся очень актуально до
сих пор.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%80%D0%B5%D0%B1%D1%80%D1%8F%D0%BD%D0%BE%D0%B9_%D0%BF%D1%83%D0%BB%D0%B8_%D0%BD%D0%B5%D1%82&quot;&gt;Серебряной пули нет&lt;/a&gt; написана в 1986 году, когда мне было 2 года.
&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%B8%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%87%D0%B5%D0%BB%D0%BE%D0%B2%D0%B5%D0%BA%D0%BE-%D0%BC%D0%B5%D1%81%D1%8F%D1%86&quot;&gt;Мифический человеко-месяц&lt;/a&gt; - 1975!
&lt;a href=&quot;https://ru.wikipedia.org/wiki/Design_Patterns&quot;&gt;Паттерны проектирования&lt;/a&gt; разрабатывались
с семидисятых годов, хотя изданы только в 1994 (свежачок).&lt;/p&gt;

&lt;!-- И напоследок фото первых ламберсексуалов: --&gt;

&lt;!-- ![](/assets/2/bullet/Ken_n_dennis.jpg) --&gt;

        </description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/05/bullet/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/05/bullet/index.html</guid>
      </item>
    
      <item>
        <title>Прожорливый JSON</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/1gb_json/main.jpg&quot; /&gt;
          &lt;p&gt;Часто промежуточные результаты каких-нибудь долгих вычислений, которые нужно сделать один раз, сохраняю в JSON. Например
могу пройтись по всем записям в большой таблице,
посчитать серию параметров, сохранить в JSON, скачать файл
локально и потом
считать какие-нибудь агрегированные данные.&lt;/p&gt;

&lt;p&gt;Однажды, считая большой отчет, наткнулся на необычайную прожорливость &lt;code&gt;JSON.load&lt;/code&gt; на сравнительно небольших данных.&lt;/p&gt;

&lt;p&gt;Промоделируем ситуацию (размер занимаемой памяти на вашем компьютере может отличаться, но
я проверил на маке и на линуксе). Сгенерируем json-файл:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;strng&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 26 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 54 MB&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;big.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь его прочитаем:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;big.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 57 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1600 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
массив, который в руби занимает 15 мегабайт, после восстановления раздувается в 100 раз (при использовании
библиотеки &lt;code&gt;oj&lt;/code&gt; в 50 раз). Самое противное в этой ситуации, что json на 1 гигабайт сохранить вы сможете,
а прочитать уже нет - памяти не хватит. Особенно неприятно об этом узнать
после нескольких часов вычислений.&lt;/p&gt;

&lt;p&gt;Чтобы обойти эту проблему можно использовать пару &lt;code&gt;Marshal.dump/load&lt;/code&gt;, которая работает гораздо быстрее и не занимает лишней памяти.
Однако marshal-файл не получится посмотреть глазами, нормально хранить в системе контроля версии или погрепать. Поэтому универсального решения не существует, все зависит от задачи. 
Просто помните, когда сохраняете большой JSON-файл, а хватит ли
вам духа и оперативной памяти, чтобы его прочитать?&lt;/p&gt;

        </description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/02/1gb_json/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/02/1gb_json/index.html</guid>
      </item>
    
      <item>
        <title>Архитектура проводов</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/provod/main.jpg&quot; /&gt;
          &lt;p&gt;В жизни есть вещи, про которые не принято говорить на
конференциях. Простые, топорные, но крайне рабочие схемы. Одна из таких схем - 
это архитектура проводов (название - мое &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;).&lt;/p&gt;

&lt;p&gt;Думаю вы замечали, что в любом офисе, на улице, в подъездах
и еще много где
скапливается огромное
количество проводов. Никто не хочет разбираться нужен ли каждый конкретный провод или нет,
всегда проще сверху протянуть новый. Такой принцип достаточно хорошо и долго работает, хотя
выглядит это, конечно, не очень.&lt;/p&gt;

&lt;p&gt;Аналогичный подход используется в некоторых очень важных местах программного кода, когда
ключевый метод вызывается много где, но при этом все равно продолжает развиваться и
сохраняет обратную совместимость. В
этом случае для поддержки нового функционала добавляют новые параметры и обкладывают
легаси код условиями, чтобы на старых параметрах код работал как раньше.&lt;/p&gt;

&lt;p&gt;Такой подход я встречал в больших и страшных C++-приложениях.
Такой прием за четыре года разработки &lt;a href=&quot;https://uchi.ru&quot;&gt;Учи.ру&lt;/a&gt; мы использовали один раз,
но со всей душой. Метод принимает 48 параметров (в виде ключей хэша, но все-таки).&lt;/p&gt;

&lt;p&gt;Главное, при использовании архитектуры проводов, важно помнить, что в один прекрасный день
придется срезать все провода и проложить их заново (кстати в случае нашего метода-рекордсмена
мы как раз этим занимаемся).&lt;/p&gt;

        </description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/01/provod/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/01/provod/index.html</guid>
      </item>
    
      <item>
        <title>Троешники рулят</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/tri/main.jpg&quot; /&gt;
          &lt;p&gt;В школе я был многие годы, пожалуй, отличником. К счатью без красного диплома, но все таки в
основном были пятерки.
В институте в зачетке уже было 90% четверок. И только во взрослой жизни я наконец
скатился на тройки.&lt;/p&gt;

&lt;p&gt;Для меня троешник - это человек, который специализируется в одном-двух направлениях, 
а на остальные кладет &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Поэтому,
в школьных аналогиях, у него
за год выходит
2-3 пятерки по его любимым предметам, а остальные тройки. Такой ребенок образцово переходит
из класса в класс, как-то там сдает русский язык с биологией и большую часть времени занимается тем,
что ему
нравится.&lt;/p&gt;

&lt;p&gt;Сейчас у меня очень узкие интересы, каждый день читаю твиттер, пачку рсс, статьи, книги,
на 99% вокруг IT и совершенно не интересуюсь политикой, спортом, сортами вина и многими другими
вещами. Кино я люблю кассовое, чтобы было смешно и тупо, совершенно колхозные вкусы. На совещаниях
частенько сижу в телефоне, рисую каракули или просто скучаю. Много раз не приходил на внутренние
встречи, опаздывал на собеседования, пропадал в интернете и ленился. В быту
я совершенно бесполезен, даже не буду об этом говорить.&lt;/p&gt;

&lt;p&gt;Но те вещи, которые меня цепляют, сейчас это в основном всякие штуки, связанные с
организацией разработки в целом,
я готов делать и думать о них круглые сутки. За это, как кажется, мне
прощают слабости в других вопросах.&lt;/p&gt;

&lt;p&gt;Так жить гораздо приятнее -
концентрироваться на интересном и спихивать все остальное, лишь бы отстали.
Троешники рулят. Когда я стал
троешником, я стал по настоящему счастлив.&lt;/p&gt;

        </description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/31/tri/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/31/tri/index.html</guid>
      </item>
    
      <item>
        <title>Магия руби</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ruby/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я изучаю что хранится в базе данных, то очень люблю использовать рейлсовые конструкции
примерно такого вида &lt;code&gt;User.&amp;lt;...&amp;gt;.group(:region).count&lt;/code&gt;.
Однако для рубишных массивов не знал изящного решения, как посчитать сколько раз встречается
каждый элемент, и много раз писал примерно так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_h&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {1=&amp;gt;2, 2=&amp;gt;1, 3=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Выглядит не очень красиво.&lt;/p&gt;

&lt;!--- &lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt; ---&gt;

&lt;p&gt;Наш коллега &lt;a href=&quot;https://github.com/vbelov&quot;&gt;Владислав Белов&lt;/a&gt; предложил
отличный вариант
(правда нужны руби &amp;gt;= 2.2):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:itself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {1=&amp;gt;2, 2=&amp;gt;1, 3=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Красота &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:cat:&#39; alt=&#39;:cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f431.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;

        </description>
        <pubDate>Tue, 30 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/30/ruby/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/30/ruby/index.html</guid>
      </item>
    
      <item>
        <title>Новая блестящая идея</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/i_have_idea/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я придумываю новую блестящую идею (на мой вкус естественно &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;), то первым делом захожу
в интернет и ищу статьи от тех, кто уже сделал что-то подобное.&lt;/p&gt;

&lt;p&gt;Если не получается найти похожее, то практически наверняка идея не очень хорошая.
Ну действительно, что можно в разработке придумать такого, что
не пришло в голову кому-нибудь еще?&lt;/p&gt;

&lt;p&gt;А вот реализация любой идеи - это уже дело полностью индивидуальное.
Написать программу, даже на 100 строк, можно совершенно бесчисленно-комбинаторным числом способов.&lt;/p&gt;

        </description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/29/i_have_idea/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/29/i_have_idea/index.html</guid>
      </item>
    
      <item>
        <title>Красота кода</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/beauty/main.jpg&quot; /&gt;
          &lt;p&gt;После того как я поработал в проекте из нескольких десятков миллионов строк на C++, представления
о красоте
програмного кода у меня сильно поменялись. Чисто технически невозможно сделать так, чтобы на таких
масштабах сотни
разработчиков создавали &amp;quot;красивый код&amp;quot; с точки зрения перфекционизма.
Я долго думал над метафорой, которая бы точнее
описывала мое сегодняшнее отношение к данному вопросу, пока нашел только такую.&lt;/p&gt;

&lt;!--- &lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt; ---&gt;

&lt;p&gt;Красота кода (для меня) - это красота кирпича и бетана. Каждый кирпич
вблизи не идеальный, в нем дырки разных размеров, потертости и сколы. Однако собранные вместе,
они складываются в роскошные здания или кучу у дороги.&lt;/p&gt;

&lt;p&gt;Для меня верх индустриальной экономии и организации -
павильоны Икеи. Я только на третий раз заметил, что в шоу руме нет потолка, над декоративной
решеткой много метров пустого технического простанства. На пятое посещение понял,
что стрелочки на полу рисуются
с помощью мощных сфокусированных прожекторов.&lt;/p&gt;

&lt;p&gt;Причем сам по себе большой железный ангар не самое красивое решение. Я бы, например, не хотел бы жить
в железном ангаре, ни в маленьком, ни в большом. Но в случае Икеи - это суровый ход,
который очень здорово подходит для их задач.&lt;/p&gt;

&lt;p&gt;Сейчас, для меня код любого достаточно большого программного
продукта - это такая же брутальная штука, как железный ангар Икеи,
с большим количеством технических помещений,
вентилей, решеток и прочих не очень красивых с привычной точки зрения вещей.&lt;/p&gt;

&lt;p&gt;Поэтому последнее время я редко думаю, как правильно
назвать метод, сколько пробелов поставить или что лучше ООП или ФП. Лучше и правильнее то, что позволяет
создать суровую, индустриальную красоту в каждом конкетном взятом проекте.&lt;/p&gt;

        </description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/26/beauty/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/26/beauty/index.html</guid>
      </item>
    
  </channel>
</rss>
