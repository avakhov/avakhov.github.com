<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Tech addicted</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Маленькая тайна грепа</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/grep-it/main.jpg&quot; /&gt;
          &lt;p&gt;Есть вещи, которые очень легко гуглятся, но иногда в голову не приходит их гуглить. Например
я всегда считал, что такая конструкция, вполне нормальная практика:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ps auxww | grep ruby | grep -v grep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Чтобы найти процесс с руби, нужно сначала исключить процесс с грепом, который ищет процесс с руби. Ну
вы понимаете.&lt;/p&gt;

&lt;p&gt;Совершенно случайно наткнулся на изящное решение проблемы, не помню где:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pa auxww | grep [r]uby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В таблице процессов отображается &lt;code&gt;grep [r]uby&lt;/code&gt;, а ищем мы регексп, в котором
первая буква &lt;code&gt;r&lt;/code&gt; и потом строка &lt;code&gt;uby&lt;/code&gt;. Таким образом процесс самого грепа не попадает в поиск. 
Теперь я ищу только так.&lt;/p&gt;

        </description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/25/grep-it/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/25/grep-it/index.html</guid>
      </item>
    
      <item>
        <title>Крон, Великий и Ужасный</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/cron/main.jpg&quot; /&gt;
          &lt;p&gt;Я очень уважаю крон-задачи, это простой и надежный способ запускать регулярные
задания.&lt;/p&gt;

&lt;p&gt;Но каждый раз когда мне нужно в кроне запустить допустим руби-скрипт, я делаю это правильно минимум
с третьего-пятого раза. Например так публикуется новый пост в блог:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PATH=/root/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
23 7 * * 1-5 cd /root/blog &amp;amp;&amp;amp; (echo STARTED_`date &amp;quot;+\%Y-\%m-\%d__\%H-\%M-\%S&amp;quot;` &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; NOCACHE=1 ./publish next &amp;amp;&amp;amp; echo FINISHED_`date &amp;quot;+\%Y-\%m-\%d__\%H-\%M-\%S&amp;quot;`) &amp;gt;&amp;gt; /root/crontab.log 2&amp;gt;&amp;amp;1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Успешно запустил я его только через час. Преклоняюсь перед теми, кто умеет это
делать с первой попытки. Такие люди вообще есть?&lt;/p&gt;

        </description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/24/cron/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/24/cron/index.html</guid>
      </item>
    
      <item>
        <title>Большие апдейты</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/blob/main.jpg&quot; /&gt;
          &lt;p&gt;Один долгий руби процесс у нас пишет логи своего выполнения в базу.&lt;/p&gt;

&lt;p&gt;Сделано было просто и прямолинейно, создали колонку &lt;code&gt;log:text&lt;/code&gt; в таблице скажем &lt;code&gt;jobs&lt;/code&gt; и вот такой
метод логирования:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;safe!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Конструкция исправно работала пару лет и вдруг закончилось дисковое пространство на боксе с базой.
Добавили.
Через некоторое время снова закончилось. Начали разбираться.&lt;/p&gt;

&lt;p&gt;Оказалось, что кто-то добавил отладочной информации и количество записей в лог резко выросло.
Поле &lt;code&gt;log&lt;/code&gt; стало занимать 2-3 мегабайта, новые строки добавляются примерно раз в секунду,
а Postgres устроен так, что UPDATE = INSERT + DELETE, DELETE же не сразу же
освобождает место. То есть мы стали со скоростью несколько мегабайт в секунду забивать диск,
автовакуум не успевал чистить.&lt;/p&gt;

&lt;p&gt;Починили легко. Вынесли лог в отдельную модель и вместо обновления теперь создаем
новую строку в таблице. Добавили пару индексов для скорости доступа и все стало хорошо - 
место на диске заканчиваться перестало. Это решение успешно работает до сих пор.&lt;/p&gt;

        </description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/23/blob/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/23/blob/index.html</guid>
      </item>
    
      <item>
        <title>Переписывать нельзя модифицировать</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/refactoring/main.jpg&quot; /&gt;
          &lt;p&gt;В какой-то книжке прочитал, что программу дешевле переписать с нуля, если нужно модифицировать более 30% исходников.&lt;/p&gt;

&lt;p&gt;С этим я согласен, но еще больше люблю
сделать рабочий каркас в любом случае с чистого листа (в случае рейлс - это начать
новое приложение). И потом перетаскивать куски старого кода, постоянно проверяя, что приложение запускается.
Таким образом генеральное флоу выполнения программы оказывается под контролем и явно видны точки, где управление передается в легаси.&lt;/p&gt;

&lt;p&gt;В качесте приятного бонуса половина кода теряется, как и положено при любом хорошем переезде, новое
приложение становится
гораздо свежее старого.&lt;/p&gt;

        </description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/22/refactoring/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/22/refactoring/index.html</guid>
      </item>
    
      <item>
        <title>Лига лени в гит-конфиге</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/lazy-git/main.jpg&quot; /&gt;
          &lt;p&gt;Чем старше я, тем ленивей становлюсь. Боюсь представить, что будет дальше.&lt;/p&gt;

&lt;p&gt;Недавно в моем &lt;code&gt;.gitconfig&lt;/code&gt; появилась команда, которую я стараюсь использовать пореже... Но она такая клевая... &lt;img class=&#39;emoji&#39; title=&#39;:heart_eyes_cat:&#39; alt=&#39;:heart_eyes_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f63b.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[alias]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# перенес на несколько строк для наглядности, в оригинале она у меня в одной&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;!(git add -A . &amp;amp;&amp;amp; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        git commit -amsaved_at_`date +%Y-%m-%d__%H:%M:%S` &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        git pull --rebase &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        echo &amp;quot;&amp;quot; &amp;amp;&amp;amp; git log -1 --stat) || git pull --rebase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Команда комитит и пушит все что есть, а также подтягивает свежие изменения.&lt;/p&gt;

&lt;!--- Я люблю регулярные сохранения, например блог сохраняю после каждой записи и почти после каждой правки, уже на автомате. А кого можно обмануть десяти командами `git -amfix` подряд? ---&gt;

&lt;p&gt;Название алиаса от слова &lt;code&gt;sYnc&lt;/code&gt;. Букву &lt;code&gt;s&lt;/code&gt; я не стал использоваться, чтобы
не путать с &lt;code&gt;git st&lt;/code&gt; =&amp;gt; &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Fri, 19 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/19/lazy-git/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/19/lazy-git/index.html</guid>
      </item>
    
      <item>
        <title>Бдительность не бывает лишней</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/alarm/main.jpg&quot; /&gt;
          &lt;p&gt;Как-то раз я копировал postgres-базу с продакшена на тестовый сервер.&lt;/p&gt;

&lt;p&gt;Продакшен работал уже на версии 9.4 и там даже добавили таблицу с jsonb-колонкой, тестовый сервер был
все еще 9.3. Этот факт у меня был где-то на краю сознания, поэтому я решил проверить как перенеслась
эта таблица.&lt;/p&gt;

&lt;p&gt;Правильный ответ - таблица никак не перенеслась, она просто не создалась.
Наверняка &lt;code&gt;pg_restore&lt;/code&gt; об этом
написал, но обычно его вывод выглядит примерно так, поэтому я не заметил:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/alarm/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Мораль это истории такова: не стоит терять бдительность при переносе базы, мало ли что.&lt;/p&gt;

        </description>
        <pubDate>Thu, 18 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/18/alarm/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/18/alarm/index.html</guid>
      </item>
    
      <item>
        <title>Как помыть слона</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/watch-the-slon/main.jpg&quot; /&gt;
          &lt;p&gt;Иногда накатывает настроение, когда кажется что все плохо, куча критичных проблем, невыполненных обещаний и непонятно за что хвататься.&lt;/p&gt;

&lt;p&gt;В такие моменты обычно вспоминаю замечательную книгу &lt;a href=&quot;http://uibook2.usethics.ru&quot;&gt;Дизайн пользовательского интерфейса. Искусство мыть слона&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Чтобы хорошо вымыть слона, очень полезно начинать с самой
грязной его части, иначе к концу мытья грязь успеет снова распространиться по слону.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Поэтому я выписываю все нерешенные вопросы в список, нахожу самый гнусный и стараюсь
решить его хотя бы чуть-чуть. Обычно отпускает.&lt;/p&gt;

        </description>
        <pubDate>Wed, 17 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/17/watch-the-slon/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/17/watch-the-slon/index.html</guid>
      </item>
    
      <item>
        <title>Коварный backtick или как определить размер используемой памяти</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/back-tick/main.jpg&quot; /&gt;
          &lt;p&gt;В одном жирненьком руби-воркере мы логировали размер памяти, которую расходует процесс, с
помощью команды &lt;code&gt;&amp;#96;ps -o rss -p #{$$}&amp;#96;&lt;/code&gt;. Такой способ легко найти в интернете и он обычно работает.&lt;/p&gt;

&lt;p&gt;Однако сам &lt;code&gt;Kernel#`&lt;/code&gt; сделан так, что он форкает руби процесс,
соответственно на доли секунды резервируя еще столько же памяти, сколько
процесс занимает уже. Наш воркер в ходе работы раздувался до 2.5-3GB и начал падать на 4GB оперативной памяти.&lt;/p&gt;

&lt;p&gt;Я подсмотрел как сделано в ньюрелике (файл &lt;code&gt;new_relic/agent/samplers/memory_sampler.rb&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;proc_status_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/proc/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/status&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_status_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_nonblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/RSS:\s*(\d+) kB/i&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_f&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На линуксе вместо запуска &lt;code&gt;ps&lt;/code&gt; лучше использовать информацию из раздела &lt;code&gt;/proc&lt;/code&gt;.
Такой способ не требует
избыточной памяти и работает у нас
по сей день.&lt;/p&gt;

        </description>
        <pubDate>Tue, 16 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/16/back-tick/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/16/back-tick/index.html</guid>
      </item>
    
      <item>
        <title>Когда все слишком хорошо</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/deploy/main.jpg&quot; /&gt;
          &lt;p&gt;Давно заметил такой факт, что если выкатка сложная, то я сразу же открываю все
инструменты мониторинга и жду ошибок. Одна, две, три проблемы - фикс
и я спокоен. Но если проблем нет, то становится очень страшно.&lt;/p&gt;

&lt;p style=&quot;text-align:center;font-size:110%&quot;&gt;&lt;b&gt;Может быть сломалось вообще все?!?!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Большие изменения означают, что у задачи очень много факторов, все комбинации которых невозможно
отследить самым тщательным тестированием и код ревью. Я уверен, что при любом сложном 
деплое что-то должно сломаться. По мелочи. Или по крупному. Обязательно должно.&lt;/p&gt;

&lt;p&gt;И когда действительно сломалось, то как бы не наивно это звучало, я становлюсь
сильно спокойнее. Молния же не попадает в одно место дважды? &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;&lt;/p&gt;

&lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt;

&lt;p&gt;Расскажу пару историй из жизни.&lt;/p&gt;

&lt;p&gt;Мы оптимизировали тормозной кусок кода, который сильно нагружал базу.
Выкатили и сразу смотрим заббикс. Немного ожидания и... Красота!
База работает великолепно, CPU уменьшилось в 10 раз, все ровненько, гладенько. Чудесно.&lt;/p&gt;

&lt;p&gt;Захожу на сайт - ошибка 500
в кабинете ученика на всех страницах. Естественно нагрузка тут же снизилась на порядок, база
отдыхает. Хотфиксим, катим, ждем немного пока трафик вернется и заббикс отрисует новые данные.
Вот теперь ок.
База нагружена, но чтение с диска уменьшилось раза в полтора, как мы и планировали.&lt;/p&gt;

&lt;p&gt;Коллега проводит штатное нагрузочное тестирование, получает великолепные результаты.
Четыре сервера выдают столько
rps, сколько в прошлый раз выдавали двенадцать. Коллега радуется как хорошо настроил ферму. Подозрительно.&lt;/p&gt;

&lt;p&gt;Через неделю
проводим тестирование заново и выясняем, что в прошлом запуске сломалась авторизация.
Нагрузка тестировала как здорово NGINX отдает 302 на &lt;code&gt;if current_user.nil?&lt;/code&gt;.
Чиним, и совсем другая история - 
пора бежать докупать сервера.&lt;/p&gt;

&lt;p&gt;Поэтому я давно решил, если все слишком хорошо, это очень и очень плохо.&lt;/p&gt;

        </description>
        <pubDate>Mon, 15 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/15/deploy/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/15/deploy/index.html</guid>
      </item>
    
      <item>
        <title>Как можно документировать схему базу данных</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/doc-db/main.jpg&quot; /&gt;
          &lt;p&gt;Когда проект начал расти я почувствовал, что очень сильно не хватает комментариев к схеме
базы данных. В живом приложении появляются таинcтвенные таблицы, какие-то флаги, json-ны и
прочие неведомые вещи, иногда хочется узнать, что они означают.&lt;/p&gt;

&lt;p&gt;Конечно некоторые поля в моделях очевидны, в &lt;code&gt;Student#name&lt;/code&gt; в принципе очевидно что хранится,
но какое-нибудь &lt;code&gt;Group#migrated_from_old_db2&lt;/code&gt; (название вымышленое) нуждается в объяснении - кто, когда,
зачем это мигрировал и что такое старая база (вторая). &lt;/p&gt;

&lt;p&gt;Я завел файл &lt;code&gt;doc/db.md&lt;/code&gt;, в котором описал все таблицы и колонки, которые были на тот момент и
попросил коллег поддерживать его. Конечно никто поддерживать не стал. И не из вредности,
а потому-что при программировании приходится и так помнить тысячу вещей. Документирование
изменений схемы не входило в обязательные рутины работы.&lt;/p&gt;

&lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt;

&lt;p&gt;Решил проблему просто - написал тест, который падает, если в файле &lt;code&gt;doc/db.md&lt;/code&gt; нет описания для
какой-нибудь колонки. Формат файла очень простой, он легко парсится и красиво выглядит в интерфейсе
гитхаба:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# uchi.ru db schema

## schools

Школы.

| column | description |
|--:|--:|
| name | Название |
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Все таблицы и колонки легко вытянуть с помощью &lt;code&gt;AR::Base.connection.tables&lt;/code&gt; и 
&lt;code&gt;AR::Base.connection.columns&lt;/code&gt;. Вуаля! Мержить пул реквест на красных тестах нельзя.
Но тесты падают, если схема обновилась, а &lt;code&gt;doc/db.md&lt;/code&gt; нет!&lt;/p&gt;

&lt;div class=&quot;hr&quot;&gt;&amp;middot;&amp;middot;&amp;middot;&lt;/div&gt;

&lt;p&gt;Теперь все базы данных у нас документированы, а файл &lt;code&gt;doc/db.md&lt;/code&gt; в каждом репозитарии один из ключевых
при изучении приложения с которым работаешь первый раз или давно не работал. Поддерживать
такую документацию легко и естественно, в итоге она гораздо информативнее стандартного 
файла &lt;code&gt;db/schema.rb&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Fri, 12 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/12/doc-db/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/12/doc-db/index.html</guid>
      </item>
    
  </channel>
</rss>
