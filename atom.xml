<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Vakhov</title>
    <description>Tech addicted</description>
    <link>http://vakhov.me</link>
    <atom:link href="http://vakhov.me/atom.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Блогомашина</title>
        <description>
          
          &lt;p&gt;Как говаривал Будда есть две сложные вещи: начать что-то делать и продолжить это делать регулярно. Так и
с блогом, мне нравится его писать, нравится результат, но как сделать так чтобы не забросить?&lt;/p&gt;

&lt;p&gt;Расскажу как мотивирую себя писать дальше. Вообще я решил писать блог ровно год, по посту каждый
будний день, а потом подумать, что делать дальше (делаем ставки, продержусь или нет &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;).
У меня нет силы воли
в смысле &amp;quot;буду вставать в шесть утра, обливаться холодной водой, кросс, потом два поста в блог&amp;quot;. Нет.
Скорее накануне такой здоровой новой жизни я приму пивка, будет повод 
обязательно какой-нибудь хороший,
и проснусь часиков в одиннадцать. Вместо силы воли - я стараюсь создать правильные условия, которые
помогают двигаться в желаемом направлении.&lt;/p&gt;

&lt;p&gt;Каждый день, после работы, делаю несколько простых вещей:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;смотрю комментарии и отвечаю если есть&lt;/li&gt;
&lt;li&gt;вычитываю посты в очереди&lt;/li&gt;
&lt;li&gt;пишу два новых поста&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В тудуисте у меня есть проект с идеями для блога, который я постоянно пополняю. Потом спец-скриптом
беру случайную идею и либо пишу пост по ней, либо выкидываю из списка. Так как идеи - штуки
ценные, то стараюсь все-таки писать. Каждый новый пост генерируется с параметром &lt;code&gt;read = 3&lt;/code&gt;, что
означает, что его нужно вычитать минимум три раза. При каждой вычитке я уменьшаю цифру на единицу, пока
она не станет равной 0. Раз в неделю для всех постов в очереди отрисовываю картинки, сканирую их и
раскрашиваю. Все. То есть такой самый настоящий конвейер.&lt;/p&gt;

&lt;p&gt;Генри Форд - красавчик! Кстати &lt;a href=&quot;http://www.lookatme.ru/mag/live/wrong-beliefs/209093-ignorance-ford-assembly&quot;&gt;умные люди в интернете говорят&lt;/a&gt;,
что &amp;quot;Форд не изобретал конвейер, а впервые организовал поточное производство&amp;quot;. Не совсем понимаю
в чем разница &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;, но eсли бы не блог - стал бы
я это вообще гуглить?&lt;/p&gt;

        </description>
        <pubDate>Tue, 13 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/13/blogo-engine/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/13/blogo-engine/index.html</guid>
      </item>
    
      <item>
        <title>Виму преданности пост</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/vim/main.jpg&quot; /&gt;
          &lt;p&gt;Я серьезно работал всего в двух редакторах: Visual Studio и Vim, причем последние лет 6 -
только вим, так как C++ уже давно
не занимаюсь. К виму у меня особое отношение, нельзя сказать, что я его люблю или нет, просто по другому уже не могу. Слишком привыкли
пальцы к командам, давно уже отлажены конфигурационные файлы и собран набор необходимых плагинов.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avakhov/dotvim&quot;&gt;https://github.com/avakhov/dotvim&lt;/a&gt; - работа с любым новым компьютером начинается с запуска
инсталяционного скрипта из ридми-файла, несколько томительных секунд, и я готов к работе (ок-ок, я работаю
не только в виме, еще есть криптованный
архив с файлом &lt;code&gt;install.sh&lt;/code&gt;, копирующим все необходимые дот-файлы и ключи).&lt;/p&gt;

&lt;p&gt;Я пробовал и текстмейт, и саблайм, и атом, но не прижились. Не те ощущения. Более того, в глубине души я верю, что в виме код получается
красивее, так как он весь такой цифровой и конкретный. Использование мышки в редакторе делает код более аналоговым и расхлябанным
(аудиофилы поймут).&lt;/p&gt;

&lt;p&gt;Вот он мой родной, любимый &lt;img class=&#39;emoji&#39; title=&#39;:heart:&#39; alt=&#39;:heart:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/2764.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2/vim/vim.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

        </description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/12/vim/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/12/vim/index.html</guid>
      </item>
    
      <item>
        <title>Не очень программист</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/too_dev/main.jpg&quot; /&gt;
          &lt;p&gt;Когда я уходил из системной С++-разработки в веб-разработку на руби, настроение было
очень паршивое. Было ощущение будто бы сорвали разом две лычки. К тому времени я прочитал все
ключевые книги Страуструпа, Александреску, Мейерса и других уважаемых товарищей, разбирался
в шаблонах, умных указателях, паттернах и прочих сложных вещах. Язык руби казался слишком примитивном -
на этом же может писать любой школьник!&lt;/p&gt;

&lt;p&gt;Через полгода или год я встретился с бывшими коллегами, к тому времени уже сделав несколько
простых сайтов на рейлс и даже их немножко продав, и в ходе беседы окончательно убедился в правильности
своего решения. Они обсуждали как кто-то оптимизировал алгоритм переворачивания строки, сделал
это неправильно и дефект даже дошел до продакшена. Я понял, что мне больше неинтересно
заниматься такими низкоуровневыми вещами, в веб-разработке мы гораздор ближе к задачам бизнеса,
результаты получаются быстрее, мотивация в виде довольных или рассерженных клиентов
сильно ярче.&lt;/p&gt;

&lt;p&gt;С тех пор для меня бизнес-ориентированность задач, при всей мерзости этого сочетания, очень
важный показатель. Если приходится заниматься чем-то, что никто из живых людей не увидит, я сержусь.&lt;/p&gt;

        </description>
        <pubDate>Fri, 09 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/09/too_dev/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/09/too_dev/index.html</guid>
      </item>
    
      <item>
        <title>Волшебная палочка</title>
        <description>
          
          &lt;p&gt;Я очень не люблю когда скрипт долго работает и ничего не выводит в консоль, хочется потыкать его
палочкой и узнать жив ли он еще. В качестве такой палочки обычно использую что-нибудь такое:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] processed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;где вместо 100 подбираю параметр, при котором строка печатается раз в несколько секунд. Если
известно общее количество записей, которые нужно обработать, еще нагляднее будет
вывести &lt;code&gt;&amp;quot;#{count} of #{total}&amp;quot;&lt;/code&gt;.&lt;/p&gt;

        </description>
        <pubDate>Thu, 08 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/08/progress/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/08/progress/index.html</guid>
      </item>
    
      <item>
        <title>Соколиный глаз</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ux/main.jpg&quot; /&gt;
          &lt;p&gt;После нескольких лет работы в вебе, у меня появилось немного вкуса и наблюдательности. Могу различить
несколько видов шрифтов, сразу же вижу когда забыли паддинга добавить и всякие другие штуки.
Каждый раз удивляюсь и радуюсь этому.&lt;/p&gt;

&lt;p&gt;Раньше я был суровым серверным разработчиком, с соответствующими представлениями о прекрасном.
Первый культурный шок вызвал наш генеральный
директор четыре года назад. Он между делом сказал:
&amp;quot;о, у скайпа иконка поменялась, была выпуклая, а стала плоская&amp;quot;. Я
у него спросил: &amp;quot;ты это специально высматриваешь?&amp;quot; Он ответил, что просто в глаза бросилось. &amp;quot;Что за
неведомая магия&amp;quot; - подумал я тогда. А теперь сам вижу.&lt;/p&gt;

&lt;p&gt;А вы замечаете когда у хрома закладки с прямоугольничков меняются на клинышек? Или кнопка закрытия
вкладки была жирненькая, а стала тоненькая? Или шрифт в iOS поменялся?&lt;/p&gt;

        </description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/07/ux/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/07/ux/index.html</guid>
      </item>
    
      <item>
        <title>Любви к руби пост</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/ruby2/main.jpg&quot; /&gt;
          &lt;p&gt;Мне очень нравится как руби работает со строками, хэшами, массивами и строками.
Каждый раз испытываю наслаждение,
когда могу сделать что-то полезное, написав всего несколько строк.&lt;/p&gt;

&lt;p&gt;Как-то раз парсил страничку нашей внутренней вики
и в цикле сделал так:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{https://github.com\S*}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Подобные конструкции и гораздо более длинные пишу по несколько штук в день. Божественно.&lt;/p&gt;

        </description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/06/ruby2/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/06/ruby2/index.html</guid>
      </item>
    
      <item>
        <title>Мифическая серебряная пуля</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/bullet/main.jpg&quot; /&gt;
          &lt;p&gt;С одной стороны удивительно, как быстро развиваются технологии и мгновенно устаревают знания,
с другой стороны не менее удивительно, что некоторые статьи и книги смотрятся очень актуально до
сих пор.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%80%D0%B5%D0%B1%D1%80%D1%8F%D0%BD%D0%BE%D0%B9_%D0%BF%D1%83%D0%BB%D0%B8_%D0%BD%D0%B5%D1%82&quot;&gt;Серебряной пули нет&lt;/a&gt; написана в 1986 году, когда мне было 2 года.
&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%B8%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%87%D0%B5%D0%BB%D0%BE%D0%B2%D0%B5%D0%BA%D0%BE-%D0%BC%D0%B5%D1%81%D1%8F%D1%86&quot;&gt;Мифический человеко-месяц&lt;/a&gt; - 1975!
&lt;a href=&quot;https://ru.wikipedia.org/wiki/Design_Patterns&quot;&gt;Паттерны проектирования&lt;/a&gt; разрабатывались
с семидисятых годов, хотя изданы только в 1994 (свежачок).&lt;/p&gt;

&lt;!-- И напоследок фото первых ламберсексуалов: --&gt;

&lt;!-- ![](/assets/2/bullet/Ken_n_dennis.jpg) --&gt;

        </description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/05/bullet/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/05/bullet/index.html</guid>
      </item>
    
      <item>
        <title>Прожорливый JSON</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/1gb_json/main.jpg&quot; /&gt;
          &lt;p&gt;Часто промежуточные результаты каких-нибудь долгих вычислений, которые нужно сделать один раз, сохраняю в JSON. Например
могу пройтись по всем записям в большой таблице,
посчитать серию параметров, сохранить в JSON, скачать файл
локально и потом
считать какие-нибудь агрегированные данные.&lt;/p&gt;

&lt;p&gt;Однажды, считая большой отчет, наткнулся на необычайную прожорливость &lt;code&gt;JSON.load&lt;/code&gt; на сравнительно небольших данных.&lt;/p&gt;

&lt;p&gt;Промоделируем ситуацию (размер занимаемой памяти на вашем компьютере может отличаться, но
я проверил на маке и на линуксе). Сгенерируем json-файл:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;strng&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 26 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 54 MB&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;big.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь его прочитаем:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;big.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 57 MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1600 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
&lt;img class=&#39;emoji&#39; title=&#39;:scream_cat:&#39; alt=&#39;:scream_cat:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f640.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; 
массив, который в руби занимает 15 мегабайт, после восстановления раздувается в 100 раз (при использовании
библиотеки &lt;code&gt;oj&lt;/code&gt; в 50 раз). Самое противное в этой ситуации, что json на 1 гигабайт сохранить вы сможете,
а прочитать уже нет - памяти не хватит. Особенно неприятно об этом узнать
после нескольких часов вычислений.&lt;/p&gt;

&lt;p&gt;Чтобы обойти эту проблему можно использовать пару &lt;code&gt;Marshal.dump/load&lt;/code&gt;, которая работает гораздо быстрее и не занимает лишней памяти.
Однако marshal-файл не получится посмотреть глазами, нормально хранить в системе контроля версии или погрепать. Поэтому универсального решения не существует, все зависит от задачи. 
Просто помните, когда сохраняете большой JSON-файл, а хватит ли
вам духа и оперативной памяти, чтобы его прочитать?&lt;/p&gt;

        </description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/02/1gb_json/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/02/1gb_json/index.html</guid>
      </item>
    
      <item>
        <title>Архитектура проводов</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/provod/main.jpg&quot; /&gt;
          &lt;p&gt;В жизни есть вещи, про которые не принято говорить на
конференциях. Простые, топорные, но крайне рабочие схемы. Одна из таких схем - 
это архитектура проводов (название - мое &lt;img class=&#39;emoji&#39; title=&#39;:smile:&#39; alt=&#39;:smile:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f604.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;).&lt;/p&gt;

&lt;p&gt;Думаю вы замечали, что в любом офисе, на улице, в подъездах
и еще много где
скапливается огромное
количество проводов. Никто не хочет разбираться нужен ли каждый конкретный провод или нет,
всегда проще сверху протянуть новый. Такой принцип достаточно хорошо и долго работает, хотя
выглядит это, конечно, не очень.&lt;/p&gt;

&lt;p&gt;Аналогичный подход используется в некоторых очень важных местах программного кода, когда
ключевый метод вызывается много где, но при этом все равно продолжает развиваться и
сохраняет обратную совместимость. В
этом случае для поддержки нового функционала добавляют новые параметры и обкладывают
легаси код условиями, чтобы на старых параметрах код работал как раньше.&lt;/p&gt;

&lt;p&gt;Такой подход я встречал в больших и страшных C++-приложениях.
Такой прием за четыре года разработки &lt;a href=&quot;https://uchi.ru&quot;&gt;Учи.ру&lt;/a&gt; мы использовали один раз,
но со всей душой. Метод принимает 48 параметров (в виде ключей хэша, но все-таки).&lt;/p&gt;

&lt;p&gt;Главное, при использовании архитектуры проводов, важно помнить, что в один прекрасный день
придется срезать все провода и проложить их заново (кстати в случае нашего метода-рекордсмена
мы как раз этим занимаемся).&lt;/p&gt;

        </description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/09/01/provod/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/09/01/provod/index.html</guid>
      </item>
    
      <item>
        <title>Троешники рулят</title>
        <description>
          &lt;img src=&quot;http://vakhov.me/assets/2/tri/main.jpg&quot; /&gt;
          &lt;p&gt;В школе я был многие годы, пожалуй, отличником. К счатью без красного диплома, но все таки в
основном были пятерки.
В институте в зачетке уже было 90% четверок. И только во взрослой жизни я наконец
скатился на тройки.&lt;/p&gt;

&lt;p&gt;Для меня троешник - это человек, который специализируется в одном-двух направлениях, 
а на остальные кладет &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; &lt;img class=&#39;emoji&#39; title=&#39;:nut_and_bolt:&#39; alt=&#39;:nut_and_bolt:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f529.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. Поэтому,
в школьных аналогиях, у него
за год выходит
2-3 пятерки по его любимым предметам, а остальные тройки. Такой ребенок образцово переходит
из класса в класс, как-то там сдает русский язык с биологией и большую часть времени занимается тем,
что ему
нравится.&lt;/p&gt;

&lt;p&gt;Сейчас у меня очень узкие интересы, каждый день читаю твиттер, пачку рсс, статьи, книги,
на 99% вокруг IT и совершенно не интересуюсь политикой, спортом, сортами вина и многими другими
вещами. Кино я люблю кассовое, чтобы было смешно и тупо, совершенно колхозные вкусы. На совещаниях
частенько сижу в телефоне, рисую каракули или просто скучаю. Много раз не приходил на внутренние
встречи, опаздывал на собеседования, пропадал в интернете и ленился. В быту
я совершенно бесполезен, даже не буду об этом говорить.&lt;/p&gt;

&lt;p&gt;Но те вещи, которые меня цепляют, сейчас это в основном всякие штуки, связанные с
организацией разработки в целом,
я готов делать и думать о них круглые сутки. За это, как кажется, мне
прощают слабости в других вопросах.&lt;/p&gt;

&lt;p&gt;Так жить гораздо приятнее -
концентрироваться на интересном и спихивать все остальное, лишь бы отстали.
Троешники рулят. Когда я стал
троешником, я стал по настоящему счастлив.&lt;/p&gt;

        </description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 +0300</pubDate>
        <link>http://vakhov.me/blog/2016/08/31/tri/index.html</link>
        <guid isPermaLink="true">http://vakhov.me/blog/2016/08/31/tri/index.html</guid>
      </item>
    
  </channel>
</rss>
